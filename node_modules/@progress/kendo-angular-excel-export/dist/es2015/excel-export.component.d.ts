/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { QueryList, NgZone } from '@angular/core';
import { WorkbookOptions } from '@progress/kendo-ooxml';
import { CellOptions } from './ooxml/cell-options.interface';
import { ExcelExportData } from './excel-export-data';
import { ColumnBase } from './columns/column-base';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * Represents the [Kendo UI Excel Export component for Angular]({% slug overview_excelexport %}).
 * Configures the settings for the Excel export of the Kendo UI Grid.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ExcelExportComponent {
    private localization;
    private zone;
    /**
     * Specifies the name of the file that is exported to Excel.
     * @default "Export.xlsx"
     */
    fileName: string;
    /**
     * Enables or disables the column filtering in the Excel file
     * ([see example]({% slug filtering_excelexport %})).
     */
    filterable: boolean;
    /**
     * Specifies if groups are collapsible in the excel file.
     */
    collapsible: boolean;
    /**
     * The author of the workbook.
     */
    creator?: string;
    /**
     * The date on which the workbook is created.
     * The default value is `new Date()`.
     */
    date?: Date;
    /**
     * If `forceProxy` is set to `true`, the content is forwarded to `proxyURL`
     * even if the browser supports the local saving of files.
     */
    forceProxy: boolean;
    /**
     * The URL of the server-side proxy which will stream the file to the end user. When the browser is not
     * capable of saving files locally&mdash;for example, Internet Explorer 9 and earlier, and Safari&mdash;a
     * proxy is used. The implementation of the server-side proxy has to be done by you.
     *
     * The proxy receives a POST request with the following parameters in the request body:
     * - `contentType`&mdash;The MIME type of the file.
     * - `base64`&mdash;The base-64 encoded file content.
     * - `fileName`&mdash;The file name, as requested by the caller.
     * The proxy is expected to return the decoded file with the **Content-Disposition** header set to `attachment; filename="<fileName.xslx>"`.
     */
    proxyURL: string;
    /**
     * The exported data. If grouped, the data must be structured as described by the
     * [`GroupResult`]({% slug api_kendo-data-query_groupresult %}) option of the Kendo UI Data Query component.
     */
    data: any[];
    /**
     * The exported data groups. The groups must be compatible with the
     * [`GroupDescriptor`]({% slug api_kendo-data-query_groupdescriptor %}) option of the Kendo UI Data Query component.
     */
    group: any[];
    /**
     * The options of the cells that are inserted before the data, group, and footer cells
     * to indicate the group hierarchy when the data is grouped
     * ([see example]({% slug cells_excelexport %}#toc-padding-cells)).
     */
    paddingCellOptions: CellOptions;
    /**
     * The options of the cells that are inserted before the header cells
     * to align the headers and the column values when the data is grouped
     * ([see example]({% slug cells_excelexport %}#toc-header-padding-cells)).
     */
    headerPaddingCellOptions: CellOptions;
    /**
     * @hidden
     */
    columns: QueryList<ColumnBase>;
    constructor(localization: LocalizationService, zone: NgZone);
    /**
     * Saves the data to Excel.
     *
     * @param exportData - An optional parameter. Can be the data that will be exported or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).
     */
    save(exportData?: any[] | ExcelExportData | WorkbookOptions): void;
    /**
     * Based on the specified columns and data, returns
     * [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %})
     * ([see example]({% slug customrowsandcells_excelexport %})).
     *
     * @param exportData - The optional data to be exported.
     * @returns {WorkbookOptions} - The workbook options.
     */
    workbookOptions(exportData?: any[] | ExcelExportData): WorkbookOptions;
    /**
     * Returns a promise which will be resolved with the file data URI
     * ([see example]({% slug filesaving_excelexport %})).
     *
     * @param exportData - The optional data or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}) that will be used to generate the data URI.
     * @returns {Promise<string>} - The promise that will be resolved by the file data URI.
     */
    toDataURL(exportData?: any[] | ExcelExportData | WorkbookOptions): Promise<string>;
    protected getExportData(exportData?: ExcelExportData | any[]): ExcelExportData;
    protected saveFile(dataURL: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ExcelExportComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ExcelExportComponent, "kendo-excelexport", ["kendoExcelExport"], {
    "fileName": "fileName";
    "filterable": "filterable";
    "collapsible": "collapsible";
    "creator": "creator";
    "date": "date";
    "forceProxy": "forceProxy";
    "proxyURL": "proxyURL";
    "data": "data";
    "group": "group";
    "paddingCellOptions": "paddingCellOptions";
    "headerPaddingCellOptions": "headerPaddingCellOptions";
}, {}, ["columns"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtZXhwb3J0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJleGNlbC1leHBvcnQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBK0ZBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgUXVlcnlMaXN0LCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFdvcmtib29rT3B0aW9ucyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1vb3htbCc7XG5pbXBvcnQgeyBDZWxsT3B0aW9ucyB9IGZyb20gJy4vb294bWwvY2VsbC1vcHRpb25zLmludGVyZmFjZSc7XG5pbXBvcnQgeyBFeGNlbEV4cG9ydERhdGEgfSBmcm9tICcuL2V4Y2VsLWV4cG9ydC1kYXRhJztcbmltcG9ydCB7IENvbHVtbkJhc2UgfSBmcm9tICcuL2NvbHVtbnMvY29sdW1uLWJhc2UnO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBbS2VuZG8gVUkgRXhjZWwgRXhwb3J0IGNvbXBvbmVudCBmb3IgQW5ndWxhcl0oeyUgc2x1ZyBvdmVydmlld19leGNlbGV4cG9ydCAlfSkuXG4gKiBDb25maWd1cmVzIHRoZSBzZXR0aW5ncyBmb3IgdGhlIEV4Y2VsIGV4cG9ydCBvZiB0aGUgS2VuZG8gVUkgR3JpZC5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRXhjZWxFeHBvcnRDb21wb25lbnQge1xuICAgIHByaXZhdGUgbG9jYWxpemF0aW9uO1xuICAgIHByaXZhdGUgem9uZTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIG5hbWUgb2YgdGhlIGZpbGUgdGhhdCBpcyBleHBvcnRlZCB0byBFeGNlbC5cbiAgICAgKiBAZGVmYXVsdCBcIkV4cG9ydC54bHN4XCJcbiAgICAgKi9cbiAgICBmaWxlTmFtZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGNvbHVtbiBmaWx0ZXJpbmcgaW4gdGhlIEV4Y2VsIGZpbGVcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGZpbHRlcmluZ19leGNlbGV4cG9ydCAlfSkpLlxuICAgICAqL1xuICAgIGZpbHRlcmFibGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGlmIGdyb3VwcyBhcmUgY29sbGFwc2libGUgaW4gdGhlIGV4Y2VsIGZpbGUuXG4gICAgICovXG4gICAgY29sbGFwc2libGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIGF1dGhvciBvZiB0aGUgd29ya2Jvb2suXG4gICAgICovXG4gICAgY3JlYXRvcj86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgZGF0ZSBvbiB3aGljaCB0aGUgd29ya2Jvb2sgaXMgY3JlYXRlZC5cbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgbmV3IERhdGUoKWAuXG4gICAgICovXG4gICAgZGF0ZT86IERhdGU7XG4gICAgLyoqXG4gICAgICogSWYgYGZvcmNlUHJveHlgIGlzIHNldCB0byBgdHJ1ZWAsIHRoZSBjb250ZW50IGlzIGZvcndhcmRlZCB0byBgcHJveHlVUkxgXG4gICAgICogZXZlbiBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGUgbG9jYWwgc2F2aW5nIG9mIGZpbGVzLlxuICAgICAqL1xuICAgIGZvcmNlUHJveHk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIFVSTCBvZiB0aGUgc2VydmVyLXNpZGUgcHJveHkgd2hpY2ggd2lsbCBzdHJlYW0gdGhlIGZpbGUgdG8gdGhlIGVuZCB1c2VyLiBXaGVuIHRoZSBicm93c2VyIGlzIG5vdFxuICAgICAqIGNhcGFibGUgb2Ygc2F2aW5nIGZpbGVzIGxvY2FsbHkmbWRhc2g7Zm9yIGV4YW1wbGUsIEludGVybmV0IEV4cGxvcmVyIDkgYW5kIGVhcmxpZXIsIGFuZCBTYWZhcmkmbWRhc2g7YVxuICAgICAqIHByb3h5IGlzIHVzZWQuIFRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgc2VydmVyLXNpZGUgcHJveHkgaGFzIHRvIGJlIGRvbmUgYnkgeW91LlxuICAgICAqXG4gICAgICogVGhlIHByb3h5IHJlY2VpdmVzIGEgUE9TVCByZXF1ZXN0IHdpdGggdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzIGluIHRoZSByZXF1ZXN0IGJvZHk6XG4gICAgICogLSBgY29udGVudFR5cGVgJm1kYXNoO1RoZSBNSU1FIHR5cGUgb2YgdGhlIGZpbGUuXG4gICAgICogLSBgYmFzZTY0YCZtZGFzaDtUaGUgYmFzZS02NCBlbmNvZGVkIGZpbGUgY29udGVudC5cbiAgICAgKiAtIGBmaWxlTmFtZWAmbWRhc2g7VGhlIGZpbGUgbmFtZSwgYXMgcmVxdWVzdGVkIGJ5IHRoZSBjYWxsZXIuXG4gICAgICogVGhlIHByb3h5IGlzIGV4cGVjdGVkIHRvIHJldHVybiB0aGUgZGVjb2RlZCBmaWxlIHdpdGggdGhlICoqQ29udGVudC1EaXNwb3NpdGlvbioqIGhlYWRlciBzZXQgdG8gYGF0dGFjaG1lbnQ7IGZpbGVuYW1lPVwiPGZpbGVOYW1lLnhzbHg+XCJgLlxuICAgICAqL1xuICAgIHByb3h5VVJMOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGV4cG9ydGVkIGRhdGEuIElmIGdyb3VwZWQsIHRoZSBkYXRhIG11c3QgYmUgc3RydWN0dXJlZCBhcyBkZXNjcmliZWQgYnkgdGhlXG4gICAgICogW2BHcm91cFJlc3VsdGBdKHslIHNsdWcgYXBpX2tlbmRvLWRhdGEtcXVlcnlfZ3JvdXByZXN1bHQgJX0pIG9wdGlvbiBvZiB0aGUgS2VuZG8gVUkgRGF0YSBRdWVyeSBjb21wb25lbnQuXG4gICAgICovXG4gICAgZGF0YTogYW55W107XG4gICAgLyoqXG4gICAgICogVGhlIGV4cG9ydGVkIGRhdGEgZ3JvdXBzLiBUaGUgZ3JvdXBzIG11c3QgYmUgY29tcGF0aWJsZSB3aXRoIHRoZVxuICAgICAqIFtgR3JvdXBEZXNjcmlwdG9yYF0oeyUgc2x1ZyBhcGlfa2VuZG8tZGF0YS1xdWVyeV9ncm91cGRlc2NyaXB0b3IgJX0pIG9wdGlvbiBvZiB0aGUgS2VuZG8gVUkgRGF0YSBRdWVyeSBjb21wb25lbnQuXG4gICAgICovXG4gICAgZ3JvdXA6IGFueVtdO1xuICAgIC8qKlxuICAgICAqIFRoZSBvcHRpb25zIG9mIHRoZSBjZWxscyB0aGF0IGFyZSBpbnNlcnRlZCBiZWZvcmUgdGhlIGRhdGEsIGdyb3VwLCBhbmQgZm9vdGVyIGNlbGxzXG4gICAgICogdG8gaW5kaWNhdGUgdGhlIGdyb3VwIGhpZXJhcmNoeSB3aGVuIHRoZSBkYXRhIGlzIGdyb3VwZWRcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGNlbGxzX2V4Y2VsZXhwb3J0ICV9I3RvYy1wYWRkaW5nLWNlbGxzKSkuXG4gICAgICovXG4gICAgcGFkZGluZ0NlbGxPcHRpb25zOiBDZWxsT3B0aW9ucztcbiAgICAvKipcbiAgICAgKiBUaGUgb3B0aW9ucyBvZiB0aGUgY2VsbHMgdGhhdCBhcmUgaW5zZXJ0ZWQgYmVmb3JlIHRoZSBoZWFkZXIgY2VsbHNcbiAgICAgKiB0byBhbGlnbiB0aGUgaGVhZGVycyBhbmQgdGhlIGNvbHVtbiB2YWx1ZXMgd2hlbiB0aGUgZGF0YSBpcyBncm91cGVkXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBjZWxsc19leGNlbGV4cG9ydCAlfSN0b2MtaGVhZGVyLXBhZGRpbmctY2VsbHMpKS5cbiAgICAgKi9cbiAgICBoZWFkZXJQYWRkaW5nQ2VsbE9wdGlvbnM6IENlbGxPcHRpb25zO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjb2x1bW5zOiBRdWVyeUxpc3Q8Q29sdW1uQmFzZT47XG4gICAgY29uc3RydWN0b3IobG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlLCB6b25lOiBOZ1pvbmUpO1xuICAgIC8qKlxuICAgICAqIFNhdmVzIHRoZSBkYXRhIHRvIEV4Y2VsLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV4cG9ydERhdGEgLSBBbiBvcHRpb25hbCBwYXJhbWV0ZXIuIENhbiBiZSB0aGUgZGF0YSB0aGF0IHdpbGwgYmUgZXhwb3J0ZWQgb3IgW2BXb3JrYm9va09wdGlvbnNgXSh7JSBzbHVnIGFwaV9leGNlbC1leHBvcnRfd29ya2Jvb2tvcHRpb25zICV9KS5cbiAgICAgKi9cbiAgICBzYXZlKGV4cG9ydERhdGE/OiBhbnlbXSB8IEV4Y2VsRXhwb3J0RGF0YSB8IFdvcmtib29rT3B0aW9ucyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQmFzZWQgb24gdGhlIHNwZWNpZmllZCBjb2x1bW5zIGFuZCBkYXRhLCByZXR1cm5zXG4gICAgICogW2BXb3JrYm9va09wdGlvbnNgXSh7JSBzbHVnIGFwaV9leGNlbC1leHBvcnRfd29ya2Jvb2tvcHRpb25zICV9KVxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgY3VzdG9tcm93c2FuZGNlbGxzX2V4Y2VsZXhwb3J0ICV9KSkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXhwb3J0RGF0YSAtIFRoZSBvcHRpb25hbCBkYXRhIHRvIGJlIGV4cG9ydGVkLlxuICAgICAqIEByZXR1cm5zIHtXb3JrYm9va09wdGlvbnN9IC0gVGhlIHdvcmtib29rIG9wdGlvbnMuXG4gICAgICovXG4gICAgd29ya2Jvb2tPcHRpb25zKGV4cG9ydERhdGE/OiBhbnlbXSB8IEV4Y2VsRXhwb3J0RGF0YSk6IFdvcmtib29rT3B0aW9ucztcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB3aGljaCB3aWxsIGJlIHJlc29sdmVkIHdpdGggdGhlIGZpbGUgZGF0YSBVUklcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGZpbGVzYXZpbmdfZXhjZWxleHBvcnQgJX0pKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBleHBvcnREYXRhIC0gVGhlIG9wdGlvbmFsIGRhdGEgb3IgW2BXb3JrYm9va09wdGlvbnNgXSh7JSBzbHVnIGFwaV9leGNlbC1leHBvcnRfd29ya2Jvb2tvcHRpb25zICV9KSB0aGF0IHdpbGwgYmUgdXNlZCB0byBnZW5lcmF0ZSB0aGUgZGF0YSBVUkkuXG4gICAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gLSBUaGUgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgYnkgdGhlIGZpbGUgZGF0YSBVUkkuXG4gICAgICovXG4gICAgdG9EYXRhVVJMKGV4cG9ydERhdGE/OiBhbnlbXSB8IEV4Y2VsRXhwb3J0RGF0YSB8IFdvcmtib29rT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPjtcbiAgICBwcm90ZWN0ZWQgZ2V0RXhwb3J0RGF0YShleHBvcnREYXRhPzogRXhjZWxFeHBvcnREYXRhIHwgYW55W10pOiBFeGNlbEV4cG9ydERhdGE7XG4gICAgcHJvdGVjdGVkIHNhdmVGaWxlKGRhdGFVUkw6IHN0cmluZyk6IHZvaWQ7XG59XG4iXX0=