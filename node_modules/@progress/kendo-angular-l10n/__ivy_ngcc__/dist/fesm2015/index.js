/**-----------------------------------------------------------------------------------------
* Copyright © 2019 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { map, skip, tap } from 'rxjs/operators';

/* tslint:disable:max-line-length */
/**
 * A base class for a service that returns localized messages.
 *
 * For more information, refer to the section on [using the message service]({% slug messages_l10n %}#toc-using-the-message-service).
 */
import * as ɵngcc0 from '@angular/core';
class MessageService {
    constructor() {
        /**
         * @hidden
         */
        this.changes = new Subject();
    }
    /**
     * Notifies the components that the messages were changed.
     *
     * @param rtl - (Optional) A new value for the [text direction token]({% slug api_l10n_rtl %}).
     */
    notify(rtl) {
        this.changes.next({ rtl });
    }
    /**
     * Returns a localized message for the supplied key.
     *
     * @param key - The message key. For example, `"kendo.grid.noRecords"`.
     * @return - The localized message for this key or `undefined` if not found.
     */
    get(key) {
        return undefined;
    }
}
MessageService.ɵfac = function MessageService_Factory(t) { return new (t || MessageService)(); };
MessageService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MessageService, factory: MessageService.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MessageService, [{
        type: Injectable
    }], function () { return []; }, null); })();

/**
 * Base class that acts as a component messages container.
 *
 * For internal use.
 * @hidden
 */
class ComponentMessages {
    get override() {
        return false;
    }
    ngOnChanges(changes) {
        this.register(changes);
        if (Object.keys(changes).some(field => !changes[field].isFirstChange())) {
            this.service.notifyChanges();
        }
    }
    ngOnInit() {
        this.subscription = this.service.changes.pipe(skip(1)).subscribe(() => this.register(this));
    }
    register(changes) {
        const keys = Object.keys(changes);
        keys.forEach(key => this.service.register(key, this[key], this.override));
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ComponentMessages.ɵfac = function ComponentMessages_Factory(t) { return new (t || ComponentMessages)(); };
ComponentMessages.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ComponentMessages, features: [ɵngcc0.ɵɵNgOnChangesFeature()] });


/**
 * A token that specifies the text direction of Kendo UI for Angular components.
 *
 * @example
 * {% embed_file rtl/app.module.ts preview %}
 * {% embed_file rtl/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 */
const RTL = new InjectionToken("Kendo UI Right-to-Left token");

/**
 * Localization prefix for the component messages.
 *
 * For internal use.
 * @hidden
 */
const L10N_PREFIX = new InjectionToken('Localization key prefix');
/**
 * Component localization service.
 *
 * For internal use.
 * @hidden
 */
class LocalizationService {
    constructor(prefix, messageService, _rtl) {
        this.prefix = prefix;
        this.messageService = messageService;
        this._rtl = _rtl;
        this.changes = new BehaviorSubject({ rtl: this._rtl });
        this.dictionary = {};
        if (messageService) {
            this.subscription = messageService.changes
                .pipe(map(({ rtl }) => rtl !== undefined ? rtl : this._rtl), tap(rtl => this._rtl = rtl))
                .subscribe(rtl => {
                this.dictionary = {};
                this.changes.next({ rtl });
            });
        }
    }
    get rtl() {
        return this._rtl;
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    get(shortKey) {
        const key = this.key(shortKey);
        return this.dictionary[key];
    }
    register(shortKey, value, override = false) {
        const key = this.key(shortKey);
        let message = value;
        if (!override) {
            if (this.dictionary.hasOwnProperty(key)) {
                return;
            }
            message = this.defaultValue(key, value);
        }
        this.dictionary[key] = message;
    }
    notifyChanges() {
        this.changes.next({ rtl: this.rtl });
    }
    key(shortKey) {
        return this.prefix + '.' + shortKey;
    }
    defaultValue(key, value) {
        if (!this.messageService) {
            return value;
        }
        const alt = this.messageService.get(key);
        return (alt === undefined) ? value : alt;
    }
}
LocalizationService.ɵfac = function LocalizationService_Factory(t) { return new (t || LocalizationService)(ɵngcc0.ɵɵinject(L10N_PREFIX), ɵngcc0.ɵɵinject(MessageService, 8), ɵngcc0.ɵɵinject(RTL, 8)); };
LocalizationService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LocalizationService, factory: LocalizationService.ɵfac });
/** @nocollapse */
LocalizationService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [L10N_PREFIX,] }] },
    { type: MessageService, decorators: [{ type: Optional }] },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LocalizationService, [{
        type: Injectable
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [L10N_PREFIX]
            }] }, { type: MessageService, decorators: [{
                type: Optional
            }] }, { type: Boolean, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [RTL]
            }] }]; }, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { MessageService, ComponentMessages, L10N_PREFIX, LocalizationService, RTL };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFjQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0F3QkM7OztnREFHQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBOEJEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQThFQSx3SEFHQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQ0FNQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDE5IFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgc2tpcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGggKi9cbi8qKlxuICogQSBiYXNlIGNsYXNzIGZvciBhIHNlcnZpY2UgdGhhdCByZXR1cm5zIGxvY2FsaXplZCBtZXNzYWdlcy5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgcmVmZXIgdG8gdGhlIHNlY3Rpb24gb24gW3VzaW5nIHRoZSBtZXNzYWdlIHNlcnZpY2VdKHslIHNsdWcgbWVzc2FnZXNfbDEwbiAlfSN0b2MtdXNpbmctdGhlLW1lc3NhZ2Utc2VydmljZSkuXG4gKi9cbmNsYXNzIE1lc3NhZ2VTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBoaWRkZW5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2hhbmdlcyA9IG5ldyBTdWJqZWN0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vdGlmaWVzIHRoZSBjb21wb25lbnRzIHRoYXQgdGhlIG1lc3NhZ2VzIHdlcmUgY2hhbmdlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBydGwgLSAoT3B0aW9uYWwpIEEgbmV3IHZhbHVlIGZvciB0aGUgW3RleHQgZGlyZWN0aW9uIHRva2VuXSh7JSBzbHVnIGFwaV9sMTBuX3J0bCAlfSkuXG4gICAgICovXG4gICAgbm90aWZ5KHJ0bCkge1xuICAgICAgICB0aGlzLmNoYW5nZXMubmV4dCh7IHJ0bCB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxvY2FsaXplZCBtZXNzYWdlIGZvciB0aGUgc3VwcGxpZWQga2V5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGtleSAtIFRoZSBtZXNzYWdlIGtleS4gRm9yIGV4YW1wbGUsIGBcImtlbmRvLmdyaWQubm9SZWNvcmRzXCJgLlxuICAgICAqIEByZXR1cm4gLSBUaGUgbG9jYWxpemVkIG1lc3NhZ2UgZm9yIHRoaXMga2V5IG9yIGB1bmRlZmluZWRgIGlmIG5vdCBmb3VuZC5cbiAgICAgKi9cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuTWVzc2FnZVNlcnZpY2UuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IEluamVjdGFibGUgfSxcbl07XG5cbi8qKlxuICogQmFzZSBjbGFzcyB0aGF0IGFjdHMgYXMgYSBjb21wb25lbnQgbWVzc2FnZXMgY29udGFpbmVyLlxuICpcbiAqIEZvciBpbnRlcm5hbCB1c2UuXG4gKiBAaGlkZGVuXG4gKi9cbmNsYXNzIENvbXBvbmVudE1lc3NhZ2VzIHtcbiAgICBnZXQgb3ZlcnJpZGUoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKGNoYW5nZXMpO1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMoY2hhbmdlcykuc29tZShmaWVsZCA9PiAhY2hhbmdlc1tmaWVsZF0uaXNGaXJzdENoYW5nZSgpKSkge1xuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLm5vdGlmeUNoYW5nZXMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLnNlcnZpY2UuY2hhbmdlcy5waXBlKHNraXAoMSkpLnN1YnNjcmliZSgoKSA9PiB0aGlzLnJlZ2lzdGVyKHRoaXMpKTtcbiAgICB9XG4gICAgcmVnaXN0ZXIoY2hhbmdlcykge1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoY2hhbmdlcyk7XG4gICAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4gdGhpcy5zZXJ2aWNlLnJlZ2lzdGVyKGtleSwgdGhpc1trZXldLCB0aGlzLm92ZXJyaWRlKSk7XG4gICAgfVxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQSB0b2tlbiB0aGF0IHNwZWNpZmllcyB0aGUgdGV4dCBkaXJlY3Rpb24gb2YgS2VuZG8gVUkgZm9yIEFuZ3VsYXIgY29tcG9uZW50cy5cbiAqXG4gKiBAZXhhbXBsZVxuICogeyUgZW1iZWRfZmlsZSBydGwvYXBwLm1vZHVsZS50cyBwcmV2aWV3ICV9XG4gKiB7JSBlbWJlZF9maWxlIHJ0bC9hcHAuY29tcG9uZW50LnRzICV9XG4gKiB7JSBlbWJlZF9maWxlIHNoYXJlZC9tYWluLnRzIGhpZGRlbiAlfVxuICpcbiAqL1xuY29uc3QgUlRMID0gbmV3IEluamVjdGlvblRva2VuKFwiS2VuZG8gVUkgUmlnaHQtdG8tTGVmdCB0b2tlblwiKTtcblxuLyoqXG4gKiBMb2NhbGl6YXRpb24gcHJlZml4IGZvciB0aGUgY29tcG9uZW50IG1lc3NhZ2VzLlxuICpcbiAqIEZvciBpbnRlcm5hbCB1c2UuXG4gKiBAaGlkZGVuXG4gKi9cbmNvbnN0IEwxME5fUFJFRklYID0gbmV3IEluamVjdGlvblRva2VuKCdMb2NhbGl6YXRpb24ga2V5IHByZWZpeCcpO1xuLyoqXG4gKiBDb21wb25lbnQgbG9jYWxpemF0aW9uIHNlcnZpY2UuXG4gKlxuICogRm9yIGludGVybmFsIHVzZS5cbiAqIEBoaWRkZW5cbiAqL1xuY2xhc3MgTG9jYWxpemF0aW9uU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IocHJlZml4LCBtZXNzYWdlU2VydmljZSwgX3J0bCkge1xuICAgICAgICB0aGlzLnByZWZpeCA9IHByZWZpeDtcbiAgICAgICAgdGhpcy5tZXNzYWdlU2VydmljZSA9IG1lc3NhZ2VTZXJ2aWNlO1xuICAgICAgICB0aGlzLl9ydGwgPSBfcnRsO1xuICAgICAgICB0aGlzLmNoYW5nZXMgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHsgcnRsOiB0aGlzLl9ydGwgfSk7XG4gICAgICAgIHRoaXMuZGljdGlvbmFyeSA9IHt9O1xuICAgICAgICBpZiAobWVzc2FnZVNlcnZpY2UpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbWVzc2FnZVNlcnZpY2UuY2hhbmdlc1xuICAgICAgICAgICAgICAgIC5waXBlKG1hcCgoeyBydGwgfSkgPT4gcnRsICE9PSB1bmRlZmluZWQgPyBydGwgOiB0aGlzLl9ydGwpLCB0YXAocnRsID0+IHRoaXMuX3J0bCA9IHJ0bCkpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZShydGwgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGljdGlvbmFyeSA9IHt9O1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlcy5uZXh0KHsgcnRsIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHJ0bCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3J0bDtcbiAgICB9XG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQoc2hvcnRLZXkpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5rZXkoc2hvcnRLZXkpO1xuICAgICAgICByZXR1cm4gdGhpcy5kaWN0aW9uYXJ5W2tleV07XG4gICAgfVxuICAgIHJlZ2lzdGVyKHNob3J0S2V5LCB2YWx1ZSwgb3ZlcnJpZGUgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmtleShzaG9ydEtleSk7XG4gICAgICAgIGxldCBtZXNzYWdlID0gdmFsdWU7XG4gICAgICAgIGlmICghb3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRpY3Rpb25hcnkuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lc3NhZ2UgPSB0aGlzLmRlZmF1bHRWYWx1ZShrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpY3Rpb25hcnlba2V5XSA9IG1lc3NhZ2U7XG4gICAgfVxuICAgIG5vdGlmeUNoYW5nZXMoKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlcy5uZXh0KHsgcnRsOiB0aGlzLnJ0bCB9KTtcbiAgICB9XG4gICAga2V5KHNob3J0S2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZWZpeCArICcuJyArIHNob3J0S2V5O1xuICAgIH1cbiAgICBkZWZhdWx0VmFsdWUoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMubWVzc2FnZVNlcnZpY2UpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbHQgPSB0aGlzLm1lc3NhZ2VTZXJ2aWNlLmdldChrZXkpO1xuICAgICAgICByZXR1cm4gKGFsdCA9PT0gdW5kZWZpbmVkKSA/IHZhbHVlIDogYWx0O1xuICAgIH1cbn1cbkxvY2FsaXphdGlvblNlcnZpY2UuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IEluamVjdGFibGUgfSxcbl07XG4vKiogQG5vY29sbGFwc2UgKi9cbkxvY2FsaXphdGlvblNlcnZpY2UuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBTdHJpbmcsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEluamVjdCwgYXJnczogW0wxME5fUFJFRklYLF0gfV0gfSxcbiAgICB7IHR5cGU6IE1lc3NhZ2VTZXJ2aWNlLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9XSB9LFxuICAgIHsgdHlwZTogQm9vbGVhbiwgZGVjb3JhdG9yczogW3sgdHlwZTogT3B0aW9uYWwgfSwgeyB0eXBlOiBJbmplY3QsIGFyZ3M6IFtSVEwsXSB9XSB9XG5dO1xuXG4vKipcbiAqIEdlbmVyYXRlZCBidW5kbGUgaW5kZXguIERvIG5vdCBlZGl0LlxuICovXG5cbmV4cG9ydCB7IE1lc3NhZ2VTZXJ2aWNlLCBDb21wb25lbnRNZXNzYWdlcywgTDEwTl9QUkVGSVgsIExvY2FsaXphdGlvblNlcnZpY2UsIFJUTCB9O1xuIl19