/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, ElementRef, Renderer2, AfterViewInit, OnInit } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ChipRemoveEvent } from './chip-remove-event-args.interface';
import { ChipLook } from './models/chip-look';
import { ChipType } from './models/type';
/**
 * Displays a Chip that represents an input, attribute or an action.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ChipComponent implements OnInit, AfterViewInit {
    element: ElementRef;
    private renderer;
    private localizationService;
    /**
     * Changes the visual appearance by using alternative styling options.
     *
     * The available values are:
     * * `filled`
     * * `outlined`
     */
    look: ChipLook;
    /**
     * Sets the label text of the Chip.
     */
    label: string;
    /**
     * Defines the name for an existing icon in a Kendo UI theme.
     * The icon is rendered inside the Chip by a `span.k-icon` element.
     */
    icon: string;
    /**
     * Defines a CSS class — or multiple classes separated by spaces —
     * which are applied to a span element.
     * Allows the usage of custom icons.
     */
    iconClass: string;
    /**
     * Specifies the selected state of the Chip.
     */
    selected: boolean;
    /**
     * Specifies a custom select icon that will be rendered when the Chip is selected.
     * [see example]({% slug icons %})
     */
    selectedIcon: string;
    /**
     * Specifies if the Chip will be removable or not.
     * If the property is set to `true`, the Chip renders a remove icon.
     */
    removable: boolean;
    /**
     * Specifies a custom remove icon that will be rendered when the Chip is removable.
     * [see example]({% slug icons %})
     */
    removeIcon: string;
    /**
     * Specifies the Chip type.
     *
     * The possible values are:
     * - `none` (default)
     * - `success`
     * - `error`
     * - `warning`
     * - `info`
     */
    type: ChipType;
    /**
     * If set to `true`, the Chip will be disabled.
     */
    disabled: boolean;
    /**
     * Fires each time the user clicks the remove icon of the Chip.
     */
    remove: EventEmitter<ChipRemoveEvent>;
    tabIndex: number;
    hostClass: boolean;
    readonly outlineClass: boolean;
    readonly filledClass: boolean;
    readonly hasIconClass: boolean;
    readonly disabledClass: boolean;
    readonly selectedClass: boolean;
    readonly focusedClass: boolean;
    /**
     * @hidden
     */
    direction: string;
    private focused;
    private dynamicRTLSubscription;
    /**
     * @hidden
     */
    onFocus(): void;
    /**
     * @hidden
     */
    onBlur(): void;
    constructor(element: ElementRef, renderer: Renderer2, localizationService: LocalizationService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    /**
     * @hidden
     */
    readonly iconClasses: string;
    /**
     * @hidden
     */
    readonly selectedIconClasses: string;
    /**
     * @hidden
     */
    readonly removeIconClasses: string;
    /**
     * @hidden
     */
    typeClass(): string;
    /**
     * Focuses the Chip component.
     */
    focus(): void;
    /**
     * Blurs the Chip component.
     */
    blur(): void;
    /**
     * @hidden
     */
    onRemoveClick(e: MouseEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ChipComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ChipComponent, "kendo-chip", never, {
    "look": "look";
    "selected": "selected";
    "removable": "removable";
    "type": "type";
    "disabled": "disabled";
    "label": "label";
    "icon": "icon";
    "iconClass": "iconClass";
    "selectedIcon": "selectedIcon";
    "removeIcon": "removeIcon";
}, {
    "remove": "remove";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY2hpcC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQVlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVIQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBBZnRlclZpZXdJbml0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IENoaXBSZW1vdmVFdmVudCB9IGZyb20gJy4vY2hpcC1yZW1vdmUtZXZlbnQtYXJncy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ2hpcExvb2sgfSBmcm9tICcuL21vZGVscy9jaGlwLWxvb2snO1xuaW1wb3J0IHsgQ2hpcFR5cGUgfSBmcm9tICcuL21vZGVscy90eXBlJztcbi8qKlxuICogRGlzcGxheXMgYSBDaGlwIHRoYXQgcmVwcmVzZW50cyBhbiBpbnB1dCwgYXR0cmlidXRlIG9yIGFuIGFjdGlvbi5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2hpcENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgZWxlbWVudDogRWxlbWVudFJlZjtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgbG9jYWxpemF0aW9uU2VydmljZTtcbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSB2aXN1YWwgYXBwZWFyYW5jZSBieSB1c2luZyBhbHRlcm5hdGl2ZSBzdHlsaW5nIG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBUaGUgYXZhaWxhYmxlIHZhbHVlcyBhcmU6XG4gICAgICogKiBgZmlsbGVkYFxuICAgICAqICogYG91dGxpbmVkYFxuICAgICAqL1xuICAgIGxvb2s6IENoaXBMb29rO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGxhYmVsIHRleHQgb2YgdGhlIENoaXAuXG4gICAgICovXG4gICAgbGFiZWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBuYW1lIGZvciBhbiBleGlzdGluZyBpY29uIGluIGEgS2VuZG8gVUkgdGhlbWUuXG4gICAgICogVGhlIGljb24gaXMgcmVuZGVyZWQgaW5zaWRlIHRoZSBDaGlwIGJ5IGEgYHNwYW4uay1pY29uYCBlbGVtZW50LlxuICAgICAqL1xuICAgIGljb246IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGEgQ1NTIGNsYXNzIOKAlCBvciBtdWx0aXBsZSBjbGFzc2VzIHNlcGFyYXRlZCBieSBzcGFjZXMg4oCUXG4gICAgICogd2hpY2ggYXJlIGFwcGxpZWQgdG8gYSBzcGFuIGVsZW1lbnQuXG4gICAgICogQWxsb3dzIHRoZSB1c2FnZSBvZiBjdXN0b20gaWNvbnMuXG4gICAgICovXG4gICAgaWNvbkNsYXNzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBzZWxlY3RlZCBzdGF0ZSBvZiB0aGUgQ2hpcC5cbiAgICAgKi9cbiAgICBzZWxlY3RlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgYSBjdXN0b20gc2VsZWN0IGljb24gdGhhdCB3aWxsIGJlIHJlbmRlcmVkIHdoZW4gdGhlIENoaXAgaXMgc2VsZWN0ZWQuXG4gICAgICogW3NlZSBleGFtcGxlXSh7JSBzbHVnIGljb25zICV9KVxuICAgICAqL1xuICAgIHNlbGVjdGVkSWNvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBpZiB0aGUgQ2hpcCB3aWxsIGJlIHJlbW92YWJsZSBvciBub3QuXG4gICAgICogSWYgdGhlIHByb3BlcnR5IGlzIHNldCB0byBgdHJ1ZWAsIHRoZSBDaGlwIHJlbmRlcnMgYSByZW1vdmUgaWNvbi5cbiAgICAgKi9cbiAgICByZW1vdmFibGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGEgY3VzdG9tIHJlbW92ZSBpY29uIHRoYXQgd2lsbCBiZSByZW5kZXJlZCB3aGVuIHRoZSBDaGlwIGlzIHJlbW92YWJsZS5cbiAgICAgKiBbc2VlIGV4YW1wbGVdKHslIHNsdWcgaWNvbnMgJX0pXG4gICAgICovXG4gICAgcmVtb3ZlSWNvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgQ2hpcCB0eXBlLlxuICAgICAqXG4gICAgICogVGhlIHBvc3NpYmxlIHZhbHVlcyBhcmU6XG4gICAgICogLSBgbm9uZWAgKGRlZmF1bHQpXG4gICAgICogLSBgc3VjY2Vzc2BcbiAgICAgKiAtIGBlcnJvcmBcbiAgICAgKiAtIGB3YXJuaW5nYFxuICAgICAqIC0gYGluZm9gXG4gICAgICovXG4gICAgdHlwZTogQ2hpcFR5cGU7XG4gICAgLyoqXG4gICAgICogSWYgc2V0IHRvIGB0cnVlYCwgdGhlIENoaXAgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHVzZXIgY2xpY2tzIHRoZSByZW1vdmUgaWNvbiBvZiB0aGUgQ2hpcC5cbiAgICAgKi9cbiAgICByZW1vdmU6IEV2ZW50RW1pdHRlcjxDaGlwUmVtb3ZlRXZlbnQ+O1xuICAgIHRhYkluZGV4OiBudW1iZXI7XG4gICAgaG9zdENsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IG91dGxpbmVDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBmaWxsZWRDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBoYXNJY29uQ2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZGlzYWJsZWRDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBzZWxlY3RlZENsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGZvY3VzZWRDbGFzczogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZGlyZWN0aW9uOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBmb2N1c2VkO1xuICAgIHByaXZhdGUgZHluYW1pY1JUTFN1YnNjcmlwdGlvbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25Gb2N1cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbkJsdXIoKTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBsb2NhbGl6YXRpb25TZXJ2aWNlOiBMb2NhbGl6YXRpb25TZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGljb25DbGFzc2VzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlbGVjdGVkSWNvbkNsYXNzZXM6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVtb3ZlSWNvbkNsYXNzZXM6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgdHlwZUNsYXNzKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBGb2N1c2VzIHRoZSBDaGlwIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEJsdXJzIHRoZSBDaGlwIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBibHVyKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uUmVtb3ZlQ2xpY2soZTogTW91c2VFdmVudCk6IHZvaWQ7XG59XG4iXX0=