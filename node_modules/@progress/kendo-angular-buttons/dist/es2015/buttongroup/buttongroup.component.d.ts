/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ButtonDirective } from '../button/button.directive';
import { EventEmitter, QueryList, OnInit, OnDestroy, AfterContentChecked, AfterViewChecked, AfterContentInit, ElementRef, SimpleChanges } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ButtonGroupSelection } from '../button/selection-settings';
import { KendoButtonService } from '../button/button.service';
import { ButtonLook } from '../button-look';
import { PreventableEvent } from '../preventable-event';
/**
 * Represents the Kendo UI ButtonGroup component for Angular.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ButtonGroupComponent implements OnInit, OnDestroy, AfterContentChecked, AfterViewChecked, AfterContentInit {
    private service;
    private element;
    /**
     * By default, the ButtonGroup is enabled.
     * To disable the whole group of buttons, set its `disabled` attribute to `true`.
     *
     * To disable a specific button, set its own `disabled` attribute to `true`
     * and leave the `disabled` attribute of the ButtonGroup undefined.
     * If you define the `disabled` attribute of the ButtonGroup, it will take
     * precedence over the `disabled` attributes of the underlying buttons and they will be ignored.
     *
     * For more information on how to configure the Button, refer to
     * its [API documentation]({% slug api_buttons_buttondirective %}).
     */
    disabled: boolean;
    /**
     * By default, the selection mode of the ButtonGroup is set to `multiple`.
     */
    selection: ButtonGroupSelection;
    /**
     * Sets the width of the ButtonGroup.
     * If the width of the ButtonGroup is set:
     * - The buttons resize automatically to fill the full width of the group wrapper.
     * - The buttons acquire the same width.
     */
    width: string;
    /**
     * Changes the visual appearance by using alternative styling options
     * ([more information and examples]({% slug styling_buttongroup %})).
     * The `look` property of the ButtonGroup takes precedence over the `look` property
     * of the individual buttons that are part of the group.
     *
     * The available values are:
     * * `flat`
     * * `outline`
     */
    look: ButtonLook;
    /**
     * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabIndex: number;
    /**
     * Fires every time keyboard navigation occurs.
     */
    navigate: EventEmitter<PreventableEvent>;
    buttons: QueryList<ButtonDirective>;
    private _tabIndex;
    private currentTabIndex;
    private direction;
    private subscription;
    private localizationChangeSubscription;
    readonly wrapperClass: boolean;
    readonly disabledClass: boolean;
    readonly stretchedClass: boolean;
    readonly isFlat: boolean;
    readonly isBare: boolean;
    readonly isOutline: boolean;
    readonly getRole: string;
    readonly dir: string;
    readonly ariaDisabled: boolean;
    readonly wrapperWidth: string;
    readonly wrapperTabIndex: number;
    /**
     * @hidden
     */
    keydown(event: any): void;
    /**
     * @hidden
     */
    onFocus(): void;
    /**
     * @hidden
     */
    focusout(event: any): void;
    constructor(service: KendoButtonService, localization: LocalizationService, element: ElementRef);
    ngOnInit(): void;
    ngOnChanges(change: SimpleChanges): void;
    ngAfterContentInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    protected navigateFocus(event: any): void;
    protected deactivate(buttons: Array<ButtonDirective>): void;
    protected activate(buttons: Array<ButtonDirective>): void;
    protected defocus(buttons: Array<ButtonDirective>): void;
    protected focus(buttons: Array<ButtonDirective>): void;
    private verifySettings;
    private isSelectionSingle;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ButtonGroupComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ButtonGroupComponent, "kendo-buttongroup", ["kendoButtonGroup"], {
    "selection": "selection";
    "look": "look";
    "tabIndex": "tabIndex";
    "disabled": "disabled";
    "width": "width";
}, {
    "navigate": "navigate";
}, ["buttons"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uZ3JvdXAuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImJ1dHRvbmdyb3VwLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFjQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUZBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgQnV0dG9uRGlyZWN0aXZlIH0gZnJvbSAnLi4vYnV0dG9uL2J1dHRvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBRdWVyeUxpc3QsIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlckNvbnRlbnRDaGVja2VkLCBBZnRlclZpZXdDaGVja2VkLCBBZnRlckNvbnRlbnRJbml0LCBFbGVtZW50UmVmLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG5pbXBvcnQgeyBCdXR0b25Hcm91cFNlbGVjdGlvbiB9IGZyb20gJy4uL2J1dHRvbi9zZWxlY3Rpb24tc2V0dGluZ3MnO1xuaW1wb3J0IHsgS2VuZG9CdXR0b25TZXJ2aWNlIH0gZnJvbSAnLi4vYnV0dG9uL2J1dHRvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEJ1dHRvbkxvb2sgfSBmcm9tICcuLi9idXR0b24tbG9vayc7XG5pbXBvcnQgeyBQcmV2ZW50YWJsZUV2ZW50IH0gZnJvbSAnLi4vcHJldmVudGFibGUtZXZlbnQnO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBLZW5kbyBVSSBCdXR0b25Hcm91cCBjb21wb25lbnQgZm9yIEFuZ3VsYXIuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEJ1dHRvbkdyb3VwQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyQ29udGVudENoZWNrZWQsIEFmdGVyVmlld0NoZWNrZWQsIEFmdGVyQ29udGVudEluaXQge1xuICAgIHByaXZhdGUgc2VydmljZTtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIEJ1dHRvbkdyb3VwIGlzIGVuYWJsZWQuXG4gICAgICogVG8gZGlzYWJsZSB0aGUgd2hvbGUgZ3JvdXAgb2YgYnV0dG9ucywgc2V0IGl0cyBgZGlzYWJsZWRgIGF0dHJpYnV0ZSB0byBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBUbyBkaXNhYmxlIGEgc3BlY2lmaWMgYnV0dG9uLCBzZXQgaXRzIG93biBgZGlzYWJsZWRgIGF0dHJpYnV0ZSB0byBgdHJ1ZWBcbiAgICAgKiBhbmQgbGVhdmUgdGhlIGBkaXNhYmxlZGAgYXR0cmlidXRlIG9mIHRoZSBCdXR0b25Hcm91cCB1bmRlZmluZWQuXG4gICAgICogSWYgeW91IGRlZmluZSB0aGUgYGRpc2FibGVkYCBhdHRyaWJ1dGUgb2YgdGhlIEJ1dHRvbkdyb3VwLCBpdCB3aWxsIHRha2VcbiAgICAgKiBwcmVjZWRlbmNlIG92ZXIgdGhlIGBkaXNhYmxlZGAgYXR0cmlidXRlcyBvZiB0aGUgdW5kZXJseWluZyBidXR0b25zIGFuZCB0aGV5IHdpbGwgYmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGhvdyB0byBjb25maWd1cmUgdGhlIEJ1dHRvbiwgcmVmZXIgdG9cbiAgICAgKiBpdHMgW0FQSSBkb2N1bWVudGF0aW9uXSh7JSBzbHVnIGFwaV9idXR0b25zX2J1dHRvbmRpcmVjdGl2ZSAlfSkuXG4gICAgICovXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIHNlbGVjdGlvbiBtb2RlIG9mIHRoZSBCdXR0b25Hcm91cCBpcyBzZXQgdG8gYG11bHRpcGxlYC5cbiAgICAgKi9cbiAgICBzZWxlY3Rpb246IEJ1dHRvbkdyb3VwU2VsZWN0aW9uO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHdpZHRoIG9mIHRoZSBCdXR0b25Hcm91cC5cbiAgICAgKiBJZiB0aGUgd2lkdGggb2YgdGhlIEJ1dHRvbkdyb3VwIGlzIHNldDpcbiAgICAgKiAtIFRoZSBidXR0b25zIHJlc2l6ZSBhdXRvbWF0aWNhbGx5IHRvIGZpbGwgdGhlIGZ1bGwgd2lkdGggb2YgdGhlIGdyb3VwIHdyYXBwZXIuXG4gICAgICogLSBUaGUgYnV0dG9ucyBhY3F1aXJlIHRoZSBzYW1lIHdpZHRoLlxuICAgICAqL1xuICAgIHdpZHRoOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgdmlzdWFsIGFwcGVhcmFuY2UgYnkgdXNpbmcgYWx0ZXJuYXRpdmUgc3R5bGluZyBvcHRpb25zXG4gICAgICogKFttb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlc10oeyUgc2x1ZyBzdHlsaW5nX2J1dHRvbmdyb3VwICV9KSkuXG4gICAgICogVGhlIGBsb29rYCBwcm9wZXJ0eSBvZiB0aGUgQnV0dG9uR3JvdXAgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIHRoZSBgbG9va2AgcHJvcGVydHlcbiAgICAgKiBvZiB0aGUgaW5kaXZpZHVhbCBidXR0b25zIHRoYXQgYXJlIHBhcnQgb2YgdGhlIGdyb3VwLlxuICAgICAqXG4gICAgICogVGhlIGF2YWlsYWJsZSB2YWx1ZXMgYXJlOlxuICAgICAqICogYGZsYXRgXG4gICAgICogKiBgb3V0bGluZWBcbiAgICAgKi9cbiAgICBsb29rOiBCdXR0b25Mb29rO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgW2B0YWJJbmRleGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMvdGFiaW5kZXgpIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgdGFiSW5kZXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBldmVyeSB0aW1lIGtleWJvYXJkIG5hdmlnYXRpb24gb2NjdXJzLlxuICAgICAqL1xuICAgIG5hdmlnYXRlOiBFdmVudEVtaXR0ZXI8UHJldmVudGFibGVFdmVudD47XG4gICAgYnV0dG9uczogUXVlcnlMaXN0PEJ1dHRvbkRpcmVjdGl2ZT47XG4gICAgcHJpdmF0ZSBfdGFiSW5kZXg7XG4gICAgcHJpdmF0ZSBjdXJyZW50VGFiSW5kZXg7XG4gICAgcHJpdmF0ZSBkaXJlY3Rpb247XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBsb2NhbGl6YXRpb25DaGFuZ2VTdWJzY3JpcHRpb247XG4gICAgcmVhZG9ubHkgd3JhcHBlckNsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGRpc2FibGVkQ2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgc3RyZXRjaGVkQ2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNGbGF0OiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzQmFyZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc091dGxpbmU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZ2V0Um9sZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGRpcjogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGFyaWFEaXNhYmxlZDogYm9vbGVhbjtcbiAgICByZWFkb25seSB3cmFwcGVyV2lkdGg6IHN0cmluZztcbiAgICByZWFkb25seSB3cmFwcGVyVGFiSW5kZXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAga2V5ZG93bihldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25Gb2N1cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBmb2N1c291dChldmVudDogYW55KTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlOiBLZW5kb0J1dHRvblNlcnZpY2UsIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSwgZWxlbWVudDogRWxlbWVudFJlZik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2U6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIG5hdmlnYXRlRm9jdXMoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGRlYWN0aXZhdGUoYnV0dG9uczogQXJyYXk8QnV0dG9uRGlyZWN0aXZlPik6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGFjdGl2YXRlKGJ1dHRvbnM6IEFycmF5PEJ1dHRvbkRpcmVjdGl2ZT4pOiB2b2lkO1xuICAgIHByb3RlY3RlZCBkZWZvY3VzKGJ1dHRvbnM6IEFycmF5PEJ1dHRvbkRpcmVjdGl2ZT4pOiB2b2lkO1xuICAgIHByb3RlY3RlZCBmb2N1cyhidXR0b25zOiBBcnJheTxCdXR0b25EaXJlY3RpdmU+KTogdm9pZDtcbiAgICBwcml2YXRlIHZlcmlmeVNldHRpbmdzO1xuICAgIHByaXZhdGUgaXNTZWxlY3Rpb25TaW5nbGU7XG59XG4iXX0=