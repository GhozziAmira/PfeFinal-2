/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { SimpleChanges, ElementRef, EventEmitter, Renderer2 as Renderer, OnDestroy, NgZone } from '@angular/core';
import { KendoButtonService } from './button.service';
import { ButtonLook } from '../button-look';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * Represents the Kendo UI Button component for Angular.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ButtonDirective implements OnDestroy {
    private service;
    private ngZone;
    /**
     * Provides visual styling that indicates if the Button is active.
     * By default, `toggleable` is set to `false`.
     */
    toggleable: boolean;
    /**
     * Backwards-compatible alias
     *
     * @hidden
     */
    /**
    * @hidden
    */
    togglable: boolean;
    /**
     * Adds visual weight to the Button and makes it primary.
     */
    primary: boolean;
    /**
     * Changes the visual appearance by using alternative styling options
     * ([more information and examples]({% slug appearance_button %})).
     *
     * The available values are:
     * * `flat`
     * * `outline`
     */
    look: ButtonLook;
    /**
     * Sets the selected state of the Button.
     */
    selected: boolean;
    /**
     * @hidden
     */
    tabIndex: number;
    /**
     * Defines the name for an existing icon in a Kendo UI theme.
     * The icon is rendered inside the Button by a `span.k-icon` element.
     */
    icon: string;
    /**
     * Defines a CSS class&mdash;or multiple classes separated by spaces&mdash;
     * which are applied to a `span` element inside the Button. Allows the usage of custom icons.
     */
    iconClass: string;
    /**
     * Defines a URL which is used for an `img` element inside the Button.
     * The URL can be relative or absolute. If relative, it is evaluated with relation to the web page URL.
     */
    imageUrl: string;
    /**
     * If set to `true`, it disables the Button.
     */
    disabled: boolean;
    /**
     * @hidden
     */
    role: string;
    /**
     * Fires each time the selected state of a toggleable button is changed.
     *
     * The event argument is the new selected state (boolean).
     */
    selectedChange: EventEmitter<any>;
    /**
     * Fires each time the user clicks the button.
     */
    click: EventEmitter<any>;
    element: HTMLElement;
    renderer: Renderer;
    isDisabled: boolean;
    isIcon: boolean;
    isIconClass: boolean;
    imageNode: HTMLImageElement;
    iconNode: HTMLElement;
    private localizationChangeSubscription;
    private buttonLookChangeSubscription;
    private _focused;
    private direction;
    private _selected;
    private deferTimeout;
    private domEvents;
    isFocused: boolean;
    readonly classButton: boolean;
    readonly classPrimary: boolean;
    readonly isFlat: boolean;
    readonly isBare: boolean;
    readonly isOutline: boolean;
    readonly classDisabled: boolean;
    readonly classActive: boolean;
    readonly getDirection: string;
    /**
     * @hidden
     */
    onFocus(): void;
    /**
     * @hidden
     */
    onBlur(): void;
    constructor(element: ElementRef, renderer: Renderer, service: KendoButtonService, localization: LocalizationService, ngZone: NgZone);
    ngOnInit(): void;
    ngOnChanges(change: SimpleChanges): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    /**
     * Focuses the Button component.
     */
    focus(): void;
    /**
     * Blurs the Button component.
     */
    blur(): void;
    /**
     * @hidden
     */
    setAttribute(attribute: string, value: string): void;
    /**
     * @hidden
     */
    removeAttribute(attribute: string): void;
    /**
     * @hidden
     *
     * Internal setter that triggers selectedChange
     */
    setSelected(value: boolean): void;
    private toggleAriaCheckbox;
    private hasText;
    private addImgIcon;
    private addIcon;
    private prependChild;
    private defer;
    private iconSetter;
    private removeImageNode;
    private removeIconNode;
    private updateIconNode;
    private setIconTextClasses;
    private toggleClass;
    private _onButtonClick;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ButtonDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ButtonDirective, "button[kendoButton], span[kendoButton]", ["kendoButton"], {
    "toggleable": "toggleable";
    "primary": "primary";
    "look": "look";
    "role": "role";
    "togglable": "togglable";
    "selected": "selected";
    "tabIndex": "tabIndex";
    "icon": "icon";
    "iconClass": "iconClass";
    "imageUrl": "imageUrl";
    "disabled": "disabled";
}, {
    "selectedChange": "selectedChange";
    "click": "click";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJidXR0b24uZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztBQVdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4SUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBTaW1wbGVDaGFuZ2VzLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIFJlbmRlcmVyMiBhcyBSZW5kZXJlciwgT25EZXN0cm95LCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEtlbmRvQnV0dG9uU2VydmljZSB9IGZyb20gJy4vYnV0dG9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQnV0dG9uTG9vayB9IGZyb20gJy4uL2J1dHRvbi1sb29rJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgS2VuZG8gVUkgQnV0dG9uIGNvbXBvbmVudCBmb3IgQW5ndWxhci5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQnV0dG9uRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHNlcnZpY2U7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgdmlzdWFsIHN0eWxpbmcgdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIEJ1dHRvbiBpcyBhY3RpdmUuXG4gICAgICogQnkgZGVmYXVsdCwgYHRvZ2dsZWFibGVgIGlzIHNldCB0byBgZmFsc2VgLlxuICAgICAqL1xuICAgIHRvZ2dsZWFibGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQmFja3dhcmRzLWNvbXBhdGlibGUgYWxpYXNcbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICAvKipcbiAgICAqIEBoaWRkZW5cbiAgICAqL1xuICAgIHRvZ2dsYWJsZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBBZGRzIHZpc3VhbCB3ZWlnaHQgdG8gdGhlIEJ1dHRvbiBhbmQgbWFrZXMgaXQgcHJpbWFyeS5cbiAgICAgKi9cbiAgICBwcmltYXJ5OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdGhlIHZpc3VhbCBhcHBlYXJhbmNlIGJ5IHVzaW5nIGFsdGVybmF0aXZlIHN0eWxpbmcgb3B0aW9uc1xuICAgICAqIChbbW9yZSBpbmZvcm1hdGlvbiBhbmQgZXhhbXBsZXNdKHslIHNsdWcgYXBwZWFyYW5jZV9idXR0b24gJX0pKS5cbiAgICAgKlxuICAgICAqIFRoZSBhdmFpbGFibGUgdmFsdWVzIGFyZTpcbiAgICAgKiAqIGBmbGF0YFxuICAgICAqICogYG91dGxpbmVgXG4gICAgICovXG4gICAgbG9vazogQnV0dG9uTG9vaztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzZWxlY3RlZCBzdGF0ZSBvZiB0aGUgQnV0dG9uLlxuICAgICAqL1xuICAgIHNlbGVjdGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB0YWJJbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIG5hbWUgZm9yIGFuIGV4aXN0aW5nIGljb24gaW4gYSBLZW5kbyBVSSB0aGVtZS5cbiAgICAgKiBUaGUgaWNvbiBpcyByZW5kZXJlZCBpbnNpZGUgdGhlIEJ1dHRvbiBieSBhIGBzcGFuLmstaWNvbmAgZWxlbWVudC5cbiAgICAgKi9cbiAgICBpY29uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhIENTUyBjbGFzcyZtZGFzaDtvciBtdWx0aXBsZSBjbGFzc2VzIHNlcGFyYXRlZCBieSBzcGFjZXMmbWRhc2g7XG4gICAgICogd2hpY2ggYXJlIGFwcGxpZWQgdG8gYSBgc3BhbmAgZWxlbWVudCBpbnNpZGUgdGhlIEJ1dHRvbi4gQWxsb3dzIHRoZSB1c2FnZSBvZiBjdXN0b20gaWNvbnMuXG4gICAgICovXG4gICAgaWNvbkNsYXNzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhIFVSTCB3aGljaCBpcyB1c2VkIGZvciBhbiBgaW1nYCBlbGVtZW50IGluc2lkZSB0aGUgQnV0dG9uLlxuICAgICAqIFRoZSBVUkwgY2FuIGJlIHJlbGF0aXZlIG9yIGFic29sdXRlLiBJZiByZWxhdGl2ZSwgaXQgaXMgZXZhbHVhdGVkIHdpdGggcmVsYXRpb24gdG8gdGhlIHdlYiBwYWdlIFVSTC5cbiAgICAgKi9cbiAgICBpbWFnZVVybDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIElmIHNldCB0byBgdHJ1ZWAsIGl0IGRpc2FibGVzIHRoZSBCdXR0b24uXG4gICAgICovXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJvbGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHNlbGVjdGVkIHN0YXRlIG9mIGEgdG9nZ2xlYWJsZSBidXR0b24gaXMgY2hhbmdlZC5cbiAgICAgKlxuICAgICAqIFRoZSBldmVudCBhcmd1bWVudCBpcyB0aGUgbmV3IHNlbGVjdGVkIHN0YXRlIChib29sZWFuKS5cbiAgICAgKi9cbiAgICBzZWxlY3RlZENoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSB1c2VyIGNsaWNrcyB0aGUgYnV0dG9uLlxuICAgICAqL1xuICAgIGNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICByZW5kZXJlcjogUmVuZGVyZXI7XG4gICAgaXNEaXNhYmxlZDogYm9vbGVhbjtcbiAgICBpc0ljb246IGJvb2xlYW47XG4gICAgaXNJY29uQ2xhc3M6IGJvb2xlYW47XG4gICAgaW1hZ2VOb2RlOiBIVE1MSW1hZ2VFbGVtZW50O1xuICAgIGljb25Ob2RlOiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIGxvY2FsaXphdGlvbkNoYW5nZVN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGJ1dHRvbkxvb2tDaGFuZ2VTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBfZm9jdXNlZDtcbiAgICBwcml2YXRlIGRpcmVjdGlvbjtcbiAgICBwcml2YXRlIF9zZWxlY3RlZDtcbiAgICBwcml2YXRlIGRlZmVyVGltZW91dDtcbiAgICBwcml2YXRlIGRvbUV2ZW50cztcbiAgICBpc0ZvY3VzZWQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgY2xhc3NCdXR0b246IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgY2xhc3NQcmltYXJ5OiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzRmxhdDogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc0JhcmU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNPdXRsaW5lOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGNsYXNzRGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgY2xhc3NBY3RpdmU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZ2V0RGlyZWN0aW9uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uRm9jdXMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25CbHVyKCk6IHZvaWQ7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyLCBzZXJ2aWNlOiBLZW5kb0J1dHRvblNlcnZpY2UsIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSwgbmdab25lOiBOZ1pvbmUpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEZvY3VzZXMgdGhlIEJ1dHRvbiBjb21wb25lbnQuXG4gICAgICovXG4gICAgZm9jdXMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBCbHVycyB0aGUgQnV0dG9uIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBibHVyKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHNldEF0dHJpYnV0ZShhdHRyaWJ1dGU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGU6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqXG4gICAgICogSW50ZXJuYWwgc2V0dGVyIHRoYXQgdHJpZ2dlcnMgc2VsZWN0ZWRDaGFuZ2VcbiAgICAgKi9cbiAgICBzZXRTZWxlY3RlZCh2YWx1ZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgcHJpdmF0ZSB0b2dnbGVBcmlhQ2hlY2tib3g7XG4gICAgcHJpdmF0ZSBoYXNUZXh0O1xuICAgIHByaXZhdGUgYWRkSW1nSWNvbjtcbiAgICBwcml2YXRlIGFkZEljb247XG4gICAgcHJpdmF0ZSBwcmVwZW5kQ2hpbGQ7XG4gICAgcHJpdmF0ZSBkZWZlcjtcbiAgICBwcml2YXRlIGljb25TZXR0ZXI7XG4gICAgcHJpdmF0ZSByZW1vdmVJbWFnZU5vZGU7XG4gICAgcHJpdmF0ZSByZW1vdmVJY29uTm9kZTtcbiAgICBwcml2YXRlIHVwZGF0ZUljb25Ob2RlO1xuICAgIHByaXZhdGUgc2V0SWNvblRleHRDbGFzc2VzO1xuICAgIHByaXZhdGUgdG9nZ2xlQ2xhc3M7XG4gICAgcHJpdmF0ZSBfb25CdXR0b25DbGljaztcbn1cbiJdfQ==