/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, ElementRef, OnDestroy, NgZone } from '@angular/core';
import { Observable, Subscription } from "rxjs";
import { PopupSettings } from './popup-settings';
import { FocusService } from './../focusable/focus.service';
import { KeyEvents } from './../navigation/key-events';
import { NavigationService } from './../navigation/navigation.service';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { Direction } from '../direction';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class ListButton implements OnDestroy {
    protected focusService: FocusService;
    protected navigationService: NavigationService;
    protected wrapperRef: ElementRef;
    private _zone;
    protected _data: any;
    protected _open: boolean;
    protected _disabled: boolean;
    protected _active: boolean;
    protected _popupSettings: PopupSettings;
    protected listId: string;
    protected _isFocused: boolean;
    protected _itemClick: EventEmitter<any>;
    protected _blur: EventEmitter<any>;
    protected wrapper: HTMLElement;
    protected button: ElementRef;
    protected focusSubscription: Subscription;
    protected navigationSubscription: Subscription;
    protected enterPressSubscription: Subscription;
    protected enterUpSubscription: Subscription;
    protected openSubscription: Subscription;
    protected closeSubscription: Subscription;
    protected componentBlurredSubscription: Subscription;
    protected tabSubscription: Subscription;
    protected documentClick: Observable<{}>;
    protected wrapperBlurred: EventEmitter<any>;
    protected direction: Direction;
    protected focusFirstTimeout: any;
    protected blurTimeout: any;
    private localizationChangeSubscription;
    constructor(focusService: FocusService, navigationService: NavigationService, wrapperRef: ElementRef, _zone: NgZone, localization: LocalizationService);
    readonly popupClasses: string;
    openState: boolean;
    /**
     * @hidden
     */
    togglePopupVisibility(): void;
    /**
     * @hidden
     */
    onItemClick(index: number): void;
    ngOnDestroy(): void;
    protected subscribeEvents(): void;
    protected subscribeListItemFocusEvent(): void;
    protected subscribeComponentBlurredEvent(): void;
    protected subscribeNavigationEvents(): void;
    protected enterHandler(): void;
    protected unsubscribeEvents(): void;
    protected unsubscribe(subscription: Subscription): void;
    /**
     * @hidden
     */
    keyDownHandler(event: any): void;
    /**
     * @hidden
     */
    keyPressHandler(event: any): void;
    /**
     * @hidden
     */
    keyUpHandler(event: any): void;
    /**
     * @hidden
     */
    keyHandler(event: any, keyEvent?: KeyEvents): void;
    protected emitItemClickHandler(index: number): void;
    protected focusFirstItem(): void;
    protected focusWrapper(): void;
    /**
     * @hidden
     */
    blurHandler(): void;
    protected wrapperContains(element: any): boolean;
    protected blurWrapper(): void;
    protected focusButton(): void;
    protected handleTab(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ListButton>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ListButton, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1idXR0b24uZC50cyIsInNvdXJjZXMiOlsibGlzdC1idXR0b24uZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztBQWVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0RUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgUG9wdXBTZXR0aW5ncyB9IGZyb20gJy4vcG9wdXAtc2V0dGluZ3MnO1xuaW1wb3J0IHsgRm9jdXNTZXJ2aWNlIH0gZnJvbSAnLi8uLi9mb2N1c2FibGUvZm9jdXMuc2VydmljZSc7XG5pbXBvcnQgeyBLZXlFdmVudHMgfSBmcm9tICcuLy4uL25hdmlnYXRpb24va2V5LWV2ZW50cyc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4vLi4vbmF2aWdhdGlvbi9uYXZpZ2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xuaW1wb3J0IHsgRGlyZWN0aW9uIH0gZnJvbSAnLi4vZGlyZWN0aW9uJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMaXN0QnV0dG9uIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcm90ZWN0ZWQgZm9jdXNTZXJ2aWNlOiBGb2N1c1NlcnZpY2U7XG4gICAgcHJvdGVjdGVkIG5hdmlnYXRpb25TZXJ2aWNlOiBOYXZpZ2F0aW9uU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgd3JhcHBlclJlZjogRWxlbWVudFJlZjtcbiAgICBwcml2YXRlIF96b25lO1xuICAgIHByb3RlY3RlZCBfZGF0YTogYW55O1xuICAgIHByb3RlY3RlZCBfb3BlbjogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgX2Rpc2FibGVkOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBfYWN0aXZlOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBfcG9wdXBTZXR0aW5nczogUG9wdXBTZXR0aW5ncztcbiAgICBwcm90ZWN0ZWQgbGlzdElkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIF9pc0ZvY3VzZWQ6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIF9pdGVtQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHByb3RlY3RlZCBfYmx1cjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcHJvdGVjdGVkIHdyYXBwZXI6IEhUTUxFbGVtZW50O1xuICAgIHByb3RlY3RlZCBidXR0b246IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIGZvY3VzU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gICAgcHJvdGVjdGVkIG5hdmlnYXRpb25TdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgICBwcm90ZWN0ZWQgZW50ZXJQcmVzc1N1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICAgIHByb3RlY3RlZCBlbnRlclVwU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gICAgcHJvdGVjdGVkIG9wZW5TdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgICBwcm90ZWN0ZWQgY2xvc2VTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgICBwcm90ZWN0ZWQgY29tcG9uZW50Qmx1cnJlZFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICAgIHByb3RlY3RlZCB0YWJTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgICBwcm90ZWN0ZWQgZG9jdW1lbnRDbGljazogT2JzZXJ2YWJsZTx7fT47XG4gICAgcHJvdGVjdGVkIHdyYXBwZXJCbHVycmVkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwcm90ZWN0ZWQgZGlyZWN0aW9uOiBEaXJlY3Rpb247XG4gICAgcHJvdGVjdGVkIGZvY3VzRmlyc3RUaW1lb3V0OiBhbnk7XG4gICAgcHJvdGVjdGVkIGJsdXJUaW1lb3V0OiBhbnk7XG4gICAgcHJpdmF0ZSBsb2NhbGl6YXRpb25DaGFuZ2VTdWJzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3IoZm9jdXNTZXJ2aWNlOiBGb2N1c1NlcnZpY2UsIG5hdmlnYXRpb25TZXJ2aWNlOiBOYXZpZ2F0aW9uU2VydmljZSwgd3JhcHBlclJlZjogRWxlbWVudFJlZiwgX3pvbmU6IE5nWm9uZSwgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlKTtcbiAgICByZWFkb25seSBwb3B1cENsYXNzZXM6IHN0cmluZztcbiAgICBvcGVuU3RhdGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHRvZ2dsZVBvcHVwVmlzaWJpbGl0eSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbkl0ZW1DbGljayhpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBzdWJzY3JpYmVFdmVudHMoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaWJlTGlzdEl0ZW1Gb2N1c0V2ZW50KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHN1YnNjcmliZUNvbXBvbmVudEJsdXJyZWRFdmVudCgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBzdWJzY3JpYmVOYXZpZ2F0aW9uRXZlbnRzKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGVudGVySGFuZGxlcigpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1bnN1YnNjcmliZUV2ZW50cygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1bnN1YnNjcmliZShzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGtleURvd25IYW5kbGVyKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBrZXlQcmVzc0hhbmRsZXIoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGtleVVwSGFuZGxlcihldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAga2V5SGFuZGxlcihldmVudDogYW55LCBrZXlFdmVudD86IEtleUV2ZW50cyk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGVtaXRJdGVtQ2xpY2tIYW5kbGVyKGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBmb2N1c0ZpcnN0SXRlbSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBmb2N1c1dyYXBwZXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgYmx1ckhhbmRsZXIoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgd3JhcHBlckNvbnRhaW5zKGVsZW1lbnQ6IGFueSk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGJsdXJXcmFwcGVyKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGZvY3VzQnV0dG9uKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGhhbmRsZVRhYigpOiB2b2lkO1xufVxuIl19