/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Renderer2, ElementRef, OnDestroy, AfterContentChecked, OnChanges, EventEmitter, NgZone } from '@angular/core';
import { SelectionService } from './selection.service';
import { SelectAllCheckboxState } from "./selectable-settings";
/**
 * Represents the select-all checkbox feature of the Grid ([see example]({% slug selection_grid %}#toc-select-all-feature)).
 */
import * as ɵngcc0 from '@angular/core';
export declare class SelectAllCheckboxDirective implements AfterContentChecked, OnDestroy, OnChanges {
    private selectionService;
    private el;
    private renderer;
    private ngZone;
    /**
     * Explicitly overrides the state of the select-all checkbox.
     */
    state: SelectAllCheckboxState;
    /**
     * Fires when the user clicks the `kendoGridSelectAllCheckbox` select-all checkbox
     * ([see example]({% slug selection_grid %}#toc-select-all-feature)).
     */
    selectAllChange: EventEmitter<SelectAllCheckboxState>;
    type: string;
    private destroyClick;
    private stateSet;
    ngAfterContentChecked(): void;
    ngOnChanges(): void;
    constructor(selectionService: SelectionService, el: ElementRef, renderer: Renderer2, ngZone: NgZone);
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    onClick(): void;
    /**
     * @hidden
     */
    private setState;
    /**
     * @hidden
     */
    private stateToBool;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SelectAllCheckboxDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SelectAllCheckboxDirective, "[kendoGridSelectAllCheckbox]", never, {
    "state": "state";
}, {
    "selectAllChange": "selectAllChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0YWxsLWNoZWNrYm94LmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJzZWxlY3RhbGwtY2hlY2tib3guZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgT25EZXN0cm95LCBBZnRlckNvbnRlbnRDaGVja2VkLCBPbkNoYW5nZXMsIEV2ZW50RW1pdHRlciwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTZWxlY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi9zZWxlY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBTZWxlY3RBbGxDaGVja2JveFN0YXRlIH0gZnJvbSBcIi4vc2VsZWN0YWJsZS1zZXR0aW5nc1wiO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBzZWxlY3QtYWxsIGNoZWNrYm94IGZlYXR1cmUgb2YgdGhlIEdyaWQgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBzZWxlY3Rpb25fZ3JpZCAlfSN0b2Mtc2VsZWN0LWFsbC1mZWF0dXJlKSkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNlbGVjdEFsbENoZWNrYm94RGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xuICAgIHByaXZhdGUgc2VsZWN0aW9uU2VydmljZTtcbiAgICBwcml2YXRlIGVsO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgLyoqXG4gICAgICogRXhwbGljaXRseSBvdmVycmlkZXMgdGhlIHN0YXRlIG9mIHRoZSBzZWxlY3QtYWxsIGNoZWNrYm94LlxuICAgICAqL1xuICAgIHN0YXRlOiBTZWxlY3RBbGxDaGVja2JveFN0YXRlO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSBga2VuZG9HcmlkU2VsZWN0QWxsQ2hlY2tib3hgIHNlbGVjdC1hbGwgY2hlY2tib3hcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHNlbGVjdGlvbl9ncmlkICV9I3RvYy1zZWxlY3QtYWxsLWZlYXR1cmUpKS5cbiAgICAgKi9cbiAgICBzZWxlY3RBbGxDaGFuZ2U6IEV2ZW50RW1pdHRlcjxTZWxlY3RBbGxDaGVja2JveFN0YXRlPjtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBkZXN0cm95Q2xpY2s7XG4gICAgcHJpdmF0ZSBzdGF0ZVNldDtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdGlvblNlcnZpY2U6IFNlbGVjdGlvblNlcnZpY2UsIGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBuZ1pvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25DbGljaygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIHNldFN0YXRlO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXRlVG9Cb29sO1xufVxuIl19