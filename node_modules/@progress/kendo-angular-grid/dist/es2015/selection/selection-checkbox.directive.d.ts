/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { AfterContentChecked, ElementRef, Renderer2, OnDestroy, NgZone } from '@angular/core';
import { SelectionService } from './selection.service';
/**
 * Represents the row-selection checkbox of the Grid. The directive expects the
 * index of the current row as an input parameter. Inside the
 * [`CheckboxColumnComponent`]({% slug api_grid_checkboxcolumncomponent %}), apply the
 * directive to an `input` element. When the user clicks the checkbox that is associated
 * with the directive, a [`selectionChange`]({% slug api_grid_gridcomponent %}#toc-selectionChange)
 * event is triggered.
 *
 * @example
 * ```html-no-run
 * <kendo-grid>
 *   <kendo-grid-checkbox-column title="Custom checkbox">
 *     <ng-template kendoGridCellTemplate let-idx="rowIndex">
 *       <input [kendoGridSelectionCheckbox]="idx" />
 *     </ng-template>
 *   </kendo-grid-checkbox-column>
 * </kendo-grid>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class SelectionCheckboxDirective implements AfterContentChecked, OnDestroy {
    private selectionService;
    private el;
    private renderer;
    private ngZone;
    /**
     * The current index of the `dataItem` that will be selected.
     */
    itemIndex: number;
    type: string;
    private destroyClick;
    private destroyKeyDown;
    ngAfterContentChecked(): void;
    constructor(selectionService: SelectionService, el: ElementRef, renderer: Renderer2, ngZone: NgZone);
    ngOnDestroy(): void;
    private onClick;
    private onKeyDown;
    private setCheckedState;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SelectionCheckboxDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SelectionCheckboxDirective, "[kendoGridSelectionCheckbox]", never, {
    "itemIndex": "kendoGridSelectionCheckbox";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLWNoZWNrYm94LmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJzZWxlY3Rpb24tY2hlY2tib3guZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBPbkRlc3Ryb3ksIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2VsZWN0aW9uU2VydmljZSB9IGZyb20gJy4vc2VsZWN0aW9uLnNlcnZpY2UnO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSByb3ctc2VsZWN0aW9uIGNoZWNrYm94IG9mIHRoZSBHcmlkLiBUaGUgZGlyZWN0aXZlIGV4cGVjdHMgdGhlXG4gKiBpbmRleCBvZiB0aGUgY3VycmVudCByb3cgYXMgYW4gaW5wdXQgcGFyYW1ldGVyLiBJbnNpZGUgdGhlXG4gKiBbYENoZWNrYm94Q29sdW1uQ29tcG9uZW50YF0oeyUgc2x1ZyBhcGlfZ3JpZF9jaGVja2JveGNvbHVtbmNvbXBvbmVudCAlfSksIGFwcGx5IHRoZVxuICogZGlyZWN0aXZlIHRvIGFuIGBpbnB1dGAgZWxlbWVudC4gV2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGNoZWNrYm94IHRoYXQgaXMgYXNzb2NpYXRlZFxuICogd2l0aCB0aGUgZGlyZWN0aXZlLCBhIFtgc2VsZWN0aW9uQ2hhbmdlYF0oeyUgc2x1ZyBhcGlfZ3JpZF9ncmlkY29tcG9uZW50ICV9I3RvYy1zZWxlY3Rpb25DaGFuZ2UpXG4gKiBldmVudCBpcyB0cmlnZ2VyZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWwtbm8tcnVuXG4gKiA8a2VuZG8tZ3JpZD5cbiAqICAgPGtlbmRvLWdyaWQtY2hlY2tib3gtY29sdW1uIHRpdGxlPVwiQ3VzdG9tIGNoZWNrYm94XCI+XG4gKiAgICAgPG5nLXRlbXBsYXRlIGtlbmRvR3JpZENlbGxUZW1wbGF0ZSBsZXQtaWR4PVwicm93SW5kZXhcIj5cbiAqICAgICAgIDxpbnB1dCBba2VuZG9HcmlkU2VsZWN0aW9uQ2hlY2tib3hdPVwiaWR4XCIgLz5cbiAqICAgICA8L25nLXRlbXBsYXRlPlxuICogICA8L2tlbmRvLWdyaWQtY2hlY2tib3gtY29sdW1uPlxuICogPC9rZW5kby1ncmlkPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNlbGVjdGlvbkNoZWNrYm94RGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHNlbGVjdGlvblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBlbDtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IGluZGV4IG9mIHRoZSBgZGF0YUl0ZW1gIHRoYXQgd2lsbCBiZSBzZWxlY3RlZC5cbiAgICAgKi9cbiAgICBpdGVtSW5kZXg6IG51bWJlcjtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBkZXN0cm95Q2xpY2s7XG4gICAgcHJpdmF0ZSBkZXN0cm95S2V5RG93bjtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rpb25TZXJ2aWNlOiBTZWxlY3Rpb25TZXJ2aWNlLCBlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgbmdab25lOiBOZ1pvbmUpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBvbkNsaWNrO1xuICAgIHByaXZhdGUgb25LZXlEb3duO1xuICAgIHByaXZhdGUgc2V0Q2hlY2tlZFN0YXRlO1xufVxuIl19