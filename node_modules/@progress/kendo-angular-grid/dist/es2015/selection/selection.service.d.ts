/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, OnDestroy } from '@angular/core';
import { SelectableSettings } from './selectable-settings';
import { RowSelectedFn } from '../rendering/common/row-class';
import { RowArgs } from '../rendering/common/row-args';
import { DomEventsService } from '../common/dom-events.service';
import { LocalDataChangesService } from '../editing/local-data-changes.service';
/**
 * The returned type of the `selection` event
 * ([see example]({% slug selection_grid %}#toc-in-combination-with-the-select-all-feature)).
 */
import * as ɵngcc0 from '@angular/core';
export interface SelectionEvent {
    /**
     * The items that were added to the selection.
     */
    selectedRows: RowArgs[];
    /**
     * The items that were removed from the selection.
     */
    deselectedRows: RowArgs[];
    /**
     * Shows the state of the `Ctrl` key (or the `Command` key on a Mac) during the selection.
     */
    ctrlKey: boolean;
    /**
     * Shows the state of the `Shift` key during the selection.
     */
    shiftKey?: boolean;
}
/**
 * @hidden
 */
export declare type SelectionServiceSettings = {
    rowSelected: RowSelectedFn;
    selectable: boolean | SelectableSettings;
    view: {
        accessor: Function;
        at: Function;
        length: Number;
    };
};
/**
 * @hidden
 */
export declare class SelectionService implements OnDestroy {
    changes: EventEmitter<SelectionEvent>;
    lastSelectionStartIndex: number;
    currentSelection: RowArgs[];
    selectAllChecked: boolean;
    settings: SelectionServiceSettings;
    private cellClickSubscription;
    private mousedownSubscription;
    private dataChangedSubscription;
    private _selectAllState;
    constructor(domEvents: DomEventsService, localDataChangesService?: LocalDataChangesService);
    init(settings: any): void;
    isSelected(index: number): boolean;
    handleClick(item: any, event: any): void;
    toggle(item: any): any;
    toggleByIndex(index: number): any;
    select(item: any): any;
    deselect(removedItem: any): void;
    addAllTo(item: any, ctrlKey: boolean): any;
    updateAll(selectAllChecked: boolean): void;
    readonly selectAllState: any;
    readonly selected: number[];
    readonly options: SelectableSettings;
    ngOnDestroy(): void;
    private getIterator;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SelectionService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<SelectionService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsic2VsZWN0aW9uLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBY0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBEQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTZWxlY3RhYmxlU2V0dGluZ3MgfSBmcm9tICcuL3NlbGVjdGFibGUtc2V0dGluZ3MnO1xuaW1wb3J0IHsgUm93U2VsZWN0ZWRGbiB9IGZyb20gJy4uL3JlbmRlcmluZy9jb21tb24vcm93LWNsYXNzJztcbmltcG9ydCB7IFJvd0FyZ3MgfSBmcm9tICcuLi9yZW5kZXJpbmcvY29tbW9uL3Jvdy1hcmdzJztcbmltcG9ydCB7IERvbUV2ZW50c1NlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vZG9tLWV2ZW50cy5zZXJ2aWNlJztcbmltcG9ydCB7IExvY2FsRGF0YUNoYW5nZXNTZXJ2aWNlIH0gZnJvbSAnLi4vZWRpdGluZy9sb2NhbC1kYXRhLWNoYW5nZXMuc2VydmljZSc7XG4vKipcbiAqIFRoZSByZXR1cm5lZCB0eXBlIG9mIHRoZSBgc2VsZWN0aW9uYCBldmVudFxuICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBzZWxlY3Rpb25fZ3JpZCAlfSN0b2MtaW4tY29tYmluYXRpb24td2l0aC10aGUtc2VsZWN0LWFsbC1mZWF0dXJlKSkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0aW9uRXZlbnQge1xuICAgIC8qKlxuICAgICAqIFRoZSBpdGVtcyB0aGF0IHdlcmUgYWRkZWQgdG8gdGhlIHNlbGVjdGlvbi5cbiAgICAgKi9cbiAgICBzZWxlY3RlZFJvd3M6IFJvd0FyZ3NbXTtcbiAgICAvKipcbiAgICAgKiBUaGUgaXRlbXMgdGhhdCB3ZXJlIHJlbW92ZWQgZnJvbSB0aGUgc2VsZWN0aW9uLlxuICAgICAqL1xuICAgIGRlc2VsZWN0ZWRSb3dzOiBSb3dBcmdzW107XG4gICAgLyoqXG4gICAgICogU2hvd3MgdGhlIHN0YXRlIG9mIHRoZSBgQ3RybGAga2V5IChvciB0aGUgYENvbW1hbmRgIGtleSBvbiBhIE1hYykgZHVyaW5nIHRoZSBzZWxlY3Rpb24uXG4gICAgICovXG4gICAgY3RybEtleTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTaG93cyB0aGUgc3RhdGUgb2YgdGhlIGBTaGlmdGAga2V5IGR1cmluZyB0aGUgc2VsZWN0aW9uLlxuICAgICAqL1xuICAgIHNoaWZ0S2V5PzogYm9vbGVhbjtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSB0eXBlIFNlbGVjdGlvblNlcnZpY2VTZXR0aW5ncyA9IHtcbiAgICByb3dTZWxlY3RlZDogUm93U2VsZWN0ZWRGbjtcbiAgICBzZWxlY3RhYmxlOiBib29sZWFuIHwgU2VsZWN0YWJsZVNldHRpbmdzO1xuICAgIHZpZXc6IHtcbiAgICAgICAgYWNjZXNzb3I6IEZ1bmN0aW9uO1xuICAgICAgICBhdDogRnVuY3Rpb247XG4gICAgICAgIGxlbmd0aDogTnVtYmVyO1xuICAgIH07XG59O1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNlbGVjdGlvblNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIGNoYW5nZXM6IEV2ZW50RW1pdHRlcjxTZWxlY3Rpb25FdmVudD47XG4gICAgbGFzdFNlbGVjdGlvblN0YXJ0SW5kZXg6IG51bWJlcjtcbiAgICBjdXJyZW50U2VsZWN0aW9uOiBSb3dBcmdzW107XG4gICAgc2VsZWN0QWxsQ2hlY2tlZDogYm9vbGVhbjtcbiAgICBzZXR0aW5nczogU2VsZWN0aW9uU2VydmljZVNldHRpbmdzO1xuICAgIHByaXZhdGUgY2VsbENsaWNrU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgbW91c2Vkb3duU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgZGF0YUNoYW5nZWRTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBfc2VsZWN0QWxsU3RhdGU7XG4gICAgY29uc3RydWN0b3IoZG9tRXZlbnRzOiBEb21FdmVudHNTZXJ2aWNlLCBsb2NhbERhdGFDaGFuZ2VzU2VydmljZT86IExvY2FsRGF0YUNoYW5nZXNTZXJ2aWNlKTtcbiAgICBpbml0KHNldHRpbmdzOiBhbnkpOiB2b2lkO1xuICAgIGlzU2VsZWN0ZWQoaW5kZXg6IG51bWJlcik6IGJvb2xlYW47XG4gICAgaGFuZGxlQ2xpY2soaXRlbTogYW55LCBldmVudDogYW55KTogdm9pZDtcbiAgICB0b2dnbGUoaXRlbTogYW55KTogYW55O1xuICAgIHRvZ2dsZUJ5SW5kZXgoaW5kZXg6IG51bWJlcik6IGFueTtcbiAgICBzZWxlY3QoaXRlbTogYW55KTogYW55O1xuICAgIGRlc2VsZWN0KHJlbW92ZWRJdGVtOiBhbnkpOiB2b2lkO1xuICAgIGFkZEFsbFRvKGl0ZW06IGFueSwgY3RybEtleTogYm9vbGVhbik6IGFueTtcbiAgICB1cGRhdGVBbGwoc2VsZWN0QWxsQ2hlY2tlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgcmVhZG9ubHkgc2VsZWN0QWxsU3RhdGU6IGFueTtcbiAgICByZWFkb25seSBzZWxlY3RlZDogbnVtYmVyW107XG4gICAgcmVhZG9ubHkgb3B0aW9uczogU2VsZWN0YWJsZVNldHRpbmdzO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBnZXRJdGVyYXRvcjtcbn1cbiJdfQ==