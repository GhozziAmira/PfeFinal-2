/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnDestroy, QueryList, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { ExcelExportData, ColumnBase, CellOptions } from '@progress/kendo-angular-excel-export';
import { GridComponent } from '../grid.component';
import { ExcelService } from './excel.service';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * Configures the settings for the export of Grid in Excel ([see example]({% slug excelexport_grid %})).
 */
import * as ɵngcc0 from '@angular/core';
export declare class ExcelComponent implements OnDestroy {
    private localization;
    private zone;
    /**
     * Specifies the file name of the exported Excel file.
     * @default "Export.xlsx"
     */
    fileName: string;
    /**
     * Enables or disables column filtering in the Excel file. This behavior is different from the filtering feature of the Grid.
     */
    filterable: boolean;
    /**
     * The author of the workbook.
     */
    creator?: string;
    /**
     * The date on which the workbook was created. Defaults to `new Date()`.
     */
    date?: Date;
    /**
     * If set to `true`, the content is forwarded to `proxyURL` even if the browser supports the saving of files locally.
     */
    forceProxy: boolean;
    /**
     * The URL of the server-side proxy which streams the file to the end user.
     * You need to use a proxy if the browser is not capable of saving files locally&mdash;for example,
     * Internet Explorer 9 and Safari. The responsibility for implementing the server-side proxy is yours.
     *
     * In the request body, the proxy receives a POST request with the following parameters:
     * - `contentType`&mdash;The MIME type of the file.
     * - `base64`&mdash;The base-64 encoded file content.
     * - `fileName`&mdash;The file name, as requested by the caller.
     *
     * The proxy returns the decoded file with the `"Content-Disposition"` header set to `attachment; filename="<fileName.xslx>"`.
     */
    proxyURL: string;
    /**
     * The function that is used to get the exported data options. By default, uses the current data and group of the Grid.
     * To export data that is different from the current Grid data, provide a custom function.
     */
    fetchData: (component: GridComponent) => ExcelExportData | Promise<ExcelExportData> | Observable<ExcelExportData>;
    /**
     * If the data is grouped, the options of the cells that are inserted before the data,
     * group, and footer cells to indicate the group hierarchy.
     */
    paddingCellOptions: CellOptions;
    /**
     * If the data is grouped, the options of the cells that are inserted before the
     * header cells to align the headers and the column values.
     */
    headerPaddingCellOptions: CellOptions;
    /**
     * Specifies if the groups in the Excel file are collapsible.
     */
    collapsible: boolean;
    /**
     * @hidden
     */
    columns: QueryList<ColumnBase>;
    private saveSubscription;
    private dataSubscription;
    constructor(excelService: ExcelService, localization: LocalizationService, zone: NgZone);
    ngOnDestroy(): void;
    protected save(component: GridComponent): void;
    protected exportData(component: GridComponent, result: ExcelExportData): void;
    protected saveFile(options: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ExcelComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ExcelComponent, "kendo-grid-excel", never, {
    "fileName": "fileName";
    "filterable": "filterable";
    "creator": "creator";
    "date": "date";
    "forceProxy": "forceProxy";
    "proxyURL": "proxyURL";
    "fetchData": "fetchData";
    "paddingCellOptions": "paddingCellOptions";
    "headerPaddingCellOptions": "headerPaddingCellOptions";
    "collapsible": "collapsible";
}, {}, ["columns"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImV4Y2VsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7OztBQWFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1FQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IE9uRGVzdHJveSwgUXVlcnlMaXN0LCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEV4Y2VsRXhwb3J0RGF0YSwgQ29sdW1uQmFzZSwgQ2VsbE9wdGlvbnMgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1leGNlbC1leHBvcnQnO1xuaW1wb3J0IHsgR3JpZENvbXBvbmVudCB9IGZyb20gJy4uL2dyaWQuY29tcG9uZW50JztcbmltcG9ydCB7IEV4Y2VsU2VydmljZSB9IGZyb20gJy4vZXhjZWwuc2VydmljZSc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG4vKipcbiAqIENvbmZpZ3VyZXMgdGhlIHNldHRpbmdzIGZvciB0aGUgZXhwb3J0IG9mIEdyaWQgaW4gRXhjZWwgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBleGNlbGV4cG9ydF9ncmlkICV9KSkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEV4Y2VsQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGxvY2FsaXphdGlvbjtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBmaWxlIG5hbWUgb2YgdGhlIGV4cG9ydGVkIEV4Y2VsIGZpbGUuXG4gICAgICogQGRlZmF1bHQgXCJFeHBvcnQueGxzeFwiXG4gICAgICovXG4gICAgZmlsZU5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFbmFibGVzIG9yIGRpc2FibGVzIGNvbHVtbiBmaWx0ZXJpbmcgaW4gdGhlIEV4Y2VsIGZpbGUuIFRoaXMgYmVoYXZpb3IgaXMgZGlmZmVyZW50IGZyb20gdGhlIGZpbHRlcmluZyBmZWF0dXJlIG9mIHRoZSBHcmlkLlxuICAgICAqL1xuICAgIGZpbHRlcmFibGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIGF1dGhvciBvZiB0aGUgd29ya2Jvb2suXG4gICAgICovXG4gICAgY3JlYXRvcj86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgZGF0ZSBvbiB3aGljaCB0aGUgd29ya2Jvb2sgd2FzIGNyZWF0ZWQuIERlZmF1bHRzIHRvIGBuZXcgRGF0ZSgpYC5cbiAgICAgKi9cbiAgICBkYXRlPzogRGF0ZTtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgY29udGVudCBpcyBmb3J3YXJkZWQgdG8gYHByb3h5VVJMYCBldmVuIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoZSBzYXZpbmcgb2YgZmlsZXMgbG9jYWxseS5cbiAgICAgKi9cbiAgICBmb3JjZVByb3h5OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBVUkwgb2YgdGhlIHNlcnZlci1zaWRlIHByb3h5IHdoaWNoIHN0cmVhbXMgdGhlIGZpbGUgdG8gdGhlIGVuZCB1c2VyLlxuICAgICAqIFlvdSBuZWVkIHRvIHVzZSBhIHByb3h5IGlmIHRoZSBicm93c2VyIGlzIG5vdCBjYXBhYmxlIG9mIHNhdmluZyBmaWxlcyBsb2NhbGx5Jm1kYXNoO2ZvciBleGFtcGxlLFxuICAgICAqIEludGVybmV0IEV4cGxvcmVyIDkgYW5kIFNhZmFyaS4gVGhlIHJlc3BvbnNpYmlsaXR5IGZvciBpbXBsZW1lbnRpbmcgdGhlIHNlcnZlci1zaWRlIHByb3h5IGlzIHlvdXJzLlxuICAgICAqXG4gICAgICogSW4gdGhlIHJlcXVlc3QgYm9keSwgdGhlIHByb3h5IHJlY2VpdmVzIGEgUE9TVCByZXF1ZXN0IHdpdGggdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICAgICAqIC0gYGNvbnRlbnRUeXBlYCZtZGFzaDtUaGUgTUlNRSB0eXBlIG9mIHRoZSBmaWxlLlxuICAgICAqIC0gYGJhc2U2NGAmbWRhc2g7VGhlIGJhc2UtNjQgZW5jb2RlZCBmaWxlIGNvbnRlbnQuXG4gICAgICogLSBgZmlsZU5hbWVgJm1kYXNoO1RoZSBmaWxlIG5hbWUsIGFzIHJlcXVlc3RlZCBieSB0aGUgY2FsbGVyLlxuICAgICAqXG4gICAgICogVGhlIHByb3h5IHJldHVybnMgdGhlIGRlY29kZWQgZmlsZSB3aXRoIHRoZSBgXCJDb250ZW50LURpc3Bvc2l0aW9uXCJgIGhlYWRlciBzZXQgdG8gYGF0dGFjaG1lbnQ7IGZpbGVuYW1lPVwiPGZpbGVOYW1lLnhzbHg+XCJgLlxuICAgICAqL1xuICAgIHByb3h5VVJMOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGZ1bmN0aW9uIHRoYXQgaXMgdXNlZCB0byBnZXQgdGhlIGV4cG9ydGVkIGRhdGEgb3B0aW9ucy4gQnkgZGVmYXVsdCwgdXNlcyB0aGUgY3VycmVudCBkYXRhIGFuZCBncm91cCBvZiB0aGUgR3JpZC5cbiAgICAgKiBUbyBleHBvcnQgZGF0YSB0aGF0IGlzIGRpZmZlcmVudCBmcm9tIHRoZSBjdXJyZW50IEdyaWQgZGF0YSwgcHJvdmlkZSBhIGN1c3RvbSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmZXRjaERhdGE6IChjb21wb25lbnQ6IEdyaWRDb21wb25lbnQpID0+IEV4Y2VsRXhwb3J0RGF0YSB8IFByb21pc2U8RXhjZWxFeHBvcnREYXRhPiB8IE9ic2VydmFibGU8RXhjZWxFeHBvcnREYXRhPjtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgZGF0YSBpcyBncm91cGVkLCB0aGUgb3B0aW9ucyBvZiB0aGUgY2VsbHMgdGhhdCBhcmUgaW5zZXJ0ZWQgYmVmb3JlIHRoZSBkYXRhLFxuICAgICAqIGdyb3VwLCBhbmQgZm9vdGVyIGNlbGxzIHRvIGluZGljYXRlIHRoZSBncm91cCBoaWVyYXJjaHkuXG4gICAgICovXG4gICAgcGFkZGluZ0NlbGxPcHRpb25zOiBDZWxsT3B0aW9ucztcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgZGF0YSBpcyBncm91cGVkLCB0aGUgb3B0aW9ucyBvZiB0aGUgY2VsbHMgdGhhdCBhcmUgaW5zZXJ0ZWQgYmVmb3JlIHRoZVxuICAgICAqIGhlYWRlciBjZWxscyB0byBhbGlnbiB0aGUgaGVhZGVycyBhbmQgdGhlIGNvbHVtbiB2YWx1ZXMuXG4gICAgICovXG4gICAgaGVhZGVyUGFkZGluZ0NlbGxPcHRpb25zOiBDZWxsT3B0aW9ucztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgaWYgdGhlIGdyb3VwcyBpbiB0aGUgRXhjZWwgZmlsZSBhcmUgY29sbGFwc2libGUuXG4gICAgICovXG4gICAgY29sbGFwc2libGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNvbHVtbnM6IFF1ZXJ5TGlzdDxDb2x1bW5CYXNlPjtcbiAgICBwcml2YXRlIHNhdmVTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBkYXRhU3Vic2NyaXB0aW9uO1xuICAgIGNvbnN0cnVjdG9yKGV4Y2VsU2VydmljZTogRXhjZWxTZXJ2aWNlLCBsb2NhbGl6YXRpb246IExvY2FsaXphdGlvblNlcnZpY2UsIHpvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgc2F2ZShjb21wb25lbnQ6IEdyaWRDb21wb25lbnQpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBleHBvcnREYXRhKGNvbXBvbmVudDogR3JpZENvbXBvbmVudCwgcmVzdWx0OiBFeGNlbEV4cG9ydERhdGEpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBzYXZlRmlsZShvcHRpb25zOiBhbnkpOiB2b2lkO1xufVxuIl19