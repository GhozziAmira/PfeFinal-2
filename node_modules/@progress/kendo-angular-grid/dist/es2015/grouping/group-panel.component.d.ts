/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, OnDestroy, QueryList, OnInit, DoCheck, ChangeDetectorRef } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { GroupDescriptor } from '@progress/kendo-data-query';
import { GroupInfoService } from './group-info.service';
import { DropTargetDirective } from '../dragdrop/drop-target.directive';
import { DragHintService } from '../dragdrop/drag-hint.service';
import { DropCueService } from '../dragdrop/drop-cue.service';
import { DragAndDropContext } from '../dragdrop/context-types';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class GroupPanelComponent implements OnDestroy, OnInit, DoCheck {
    private hint;
    private cue;
    groupInfoService: GroupInfoService;
    private localization;
    private cd;
    change: EventEmitter<GroupDescriptor[]>;
    readonly groupHeaderClass: boolean;
    text: string;
    groups: GroupDescriptor[];
    dropTargets: QueryList<DropTargetDirective>;
    groupTitles: string[];
    private emptyText;
    private subscription;
    private targetSubscription;
    constructor(hint: DragHintService, cue: DropCueService, groupInfoService: GroupInfoService, localization: LocalizationService, cd: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngOnInit(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    directionChange(group: GroupDescriptor): void;
    insert(field: string, index: number): void;
    remove(group: GroupDescriptor): void;
    canDrop(draggable: DragAndDropContext, target: DragAndDropContext): boolean;
    private attachTargets;
    private enter;
    private leave;
    private drop;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GroupPanelComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GroupPanelComponent, "kendo-grid-group-panel", never, {
    "groups": "groups";
    "text": "text";
}, {
    "change": "change";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtcGFuZWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImdyb3VwLXBhbmVsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0FBZUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEJBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIFF1ZXJ5TGlzdCwgT25Jbml0LCBEb0NoZWNrLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xuaW1wb3J0IHsgR3JvdXBEZXNjcmlwdG9yIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRhdGEtcXVlcnknO1xuaW1wb3J0IHsgR3JvdXBJbmZvU2VydmljZSB9IGZyb20gJy4vZ3JvdXAtaW5mby5zZXJ2aWNlJztcbmltcG9ydCB7IERyb3BUYXJnZXREaXJlY3RpdmUgfSBmcm9tICcuLi9kcmFnZHJvcC9kcm9wLXRhcmdldC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRHJhZ0hpbnRTZXJ2aWNlIH0gZnJvbSAnLi4vZHJhZ2Ryb3AvZHJhZy1oaW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgRHJvcEN1ZVNlcnZpY2UgfSBmcm9tICcuLi9kcmFnZHJvcC9kcm9wLWN1ZS5zZXJ2aWNlJztcbmltcG9ydCB7IERyYWdBbmREcm9wQ29udGV4dCB9IGZyb20gJy4uL2RyYWdkcm9wL2NvbnRleHQtdHlwZXMnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdyb3VwUGFuZWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCwgRG9DaGVjayB7XG4gICAgcHJpdmF0ZSBoaW50O1xuICAgIHByaXZhdGUgY3VlO1xuICAgIGdyb3VwSW5mb1NlcnZpY2U6IEdyb3VwSW5mb1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBsb2NhbGl6YXRpb247XG4gICAgcHJpdmF0ZSBjZDtcbiAgICBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxHcm91cERlc2NyaXB0b3JbXT47XG4gICAgcmVhZG9ubHkgZ3JvdXBIZWFkZXJDbGFzczogYm9vbGVhbjtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgZ3JvdXBzOiBHcm91cERlc2NyaXB0b3JbXTtcbiAgICBkcm9wVGFyZ2V0czogUXVlcnlMaXN0PERyb3BUYXJnZXREaXJlY3RpdmU+O1xuICAgIGdyb3VwVGl0bGVzOiBzdHJpbmdbXTtcbiAgICBwcml2YXRlIGVtcHR5VGV4dDtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIHRhcmdldFN1YnNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihoaW50OiBEcmFnSGludFNlcnZpY2UsIGN1ZTogRHJvcEN1ZVNlcnZpY2UsIGdyb3VwSW5mb1NlcnZpY2U6IEdyb3VwSW5mb1NlcnZpY2UsIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgZGlyZWN0aW9uQ2hhbmdlKGdyb3VwOiBHcm91cERlc2NyaXB0b3IpOiB2b2lkO1xuICAgIGluc2VydChmaWVsZDogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICByZW1vdmUoZ3JvdXA6IEdyb3VwRGVzY3JpcHRvcik6IHZvaWQ7XG4gICAgY2FuRHJvcChkcmFnZ2FibGU6IERyYWdBbmREcm9wQ29udGV4dCwgdGFyZ2V0OiBEcmFnQW5kRHJvcENvbnRleHQpOiBib29sZWFuO1xuICAgIHByaXZhdGUgYXR0YWNoVGFyZ2V0cztcbiAgICBwcml2YXRlIGVudGVyO1xuICAgIHByaXZhdGUgbGVhdmU7XG4gICAgcHJpdmF0ZSBkcm9wO1xufVxuIl19