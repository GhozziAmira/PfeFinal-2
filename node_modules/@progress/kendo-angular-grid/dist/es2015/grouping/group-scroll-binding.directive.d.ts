/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef } from '@angular/core';
import { DataBindingDirective } from "../databinding.directive";
import { GridComponent } from "../grid.component";
import { CompositeFilterDescriptor, GroupDescriptor, SortDescriptor, State } from "@progress/kendo-data-query";
import { GridDataResult } from "../data/data.collection";
import { VirtualGroupResult } from "./virtual-group-result.interface";
import { LocalDataChangesService } from "../editing/local-data-changes.service";
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare const count: (groups: any[], includeFooters?: boolean) => any;
/**
 * @hidden
 */
export declare const slice: (groups: any[], skip: number, take: number, includeFooters?: boolean) => VirtualGroupResult[];
/**
 * A directive which encapsulates the in-memory handling of grouping with virtual scrolling.
 */
export declare class GroupBindingDirective extends DataBindingDirective {
    /**
     * The array of data which will be used to populate the Grid.
     */
    kendoGridGroupBinding: any[];
    /**
     * @hidden
     */
    data: any[];
    /**
     * Defines the descriptors by which the data will be sorted.
     */
    sort: SortDescriptor[];
    /**
     * Defines the descriptor by which the data will be filtered.
     */
    filter: CompositeFilterDescriptor;
    /**
     * Defines the descriptors by which the data will be grouped.
     */
    group: GroupDescriptor[];
    private groups;
    constructor(grid: GridComponent, changeDetector: ChangeDetectorRef, localDataChangesService: LocalDataChangesService);
    /**
     * @hidden
     */
    ngOnInit(): void;
    protected groupExpand({ groupIndex }: any): void;
    protected groupCollapse({ groupIndex }: any): void;
    protected process(state: State): GridDataResult;
    protected processGroups(state: State): GridDataResult;
    protected dataResult(skip: number, take: number): GridDataResult;
    protected applyState({ skip, take, sort, group, filter }: State): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GroupBindingDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<GroupBindingDirective, "[kendoGridGroupBinding]", never, {
    "kendoGridGroupBinding": "kendoGridGroupBinding";
    "sort": "sort";
    "filter": "filter";
    "group": "group";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtc2Nyb2xsLWJpbmRpbmcuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImdyb3VwLXNjcm9sbC1iaW5kaW5nLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFjQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGFCaW5kaW5nRGlyZWN0aXZlIH0gZnJvbSBcIi4uL2RhdGFiaW5kaW5nLmRpcmVjdGl2ZVwiO1xuaW1wb3J0IHsgR3JpZENvbXBvbmVudCB9IGZyb20gXCIuLi9ncmlkLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvciwgR3JvdXBEZXNjcmlwdG9yLCBTb3J0RGVzY3JpcHRvciwgU3RhdGUgfSBmcm9tIFwiQHByb2dyZXNzL2tlbmRvLWRhdGEtcXVlcnlcIjtcbmltcG9ydCB7IEdyaWREYXRhUmVzdWx0IH0gZnJvbSBcIi4uL2RhdGEvZGF0YS5jb2xsZWN0aW9uXCI7XG5pbXBvcnQgeyBWaXJ0dWFsR3JvdXBSZXN1bHQgfSBmcm9tIFwiLi92aXJ0dWFsLWdyb3VwLXJlc3VsdC5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IExvY2FsRGF0YUNoYW5nZXNTZXJ2aWNlIH0gZnJvbSBcIi4uL2VkaXRpbmcvbG9jYWwtZGF0YS1jaGFuZ2VzLnNlcnZpY2VcIjtcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBjb3VudDogKGdyb3VwczogYW55W10sIGluY2x1ZGVGb290ZXJzPzogYm9vbGVhbikgPT4gYW55O1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHNsaWNlOiAoZ3JvdXBzOiBhbnlbXSwgc2tpcDogbnVtYmVyLCB0YWtlOiBudW1iZXIsIGluY2x1ZGVGb290ZXJzPzogYm9vbGVhbikgPT4gVmlydHVhbEdyb3VwUmVzdWx0W107XG4vKipcbiAqIEEgZGlyZWN0aXZlIHdoaWNoIGVuY2Fwc3VsYXRlcyB0aGUgaW4tbWVtb3J5IGhhbmRsaW5nIG9mIGdyb3VwaW5nIHdpdGggdmlydHVhbCBzY3JvbGxpbmcuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdyb3VwQmluZGluZ0RpcmVjdGl2ZSBleHRlbmRzIERhdGFCaW5kaW5nRGlyZWN0aXZlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgYXJyYXkgb2YgZGF0YSB3aGljaCB3aWxsIGJlIHVzZWQgdG8gcG9wdWxhdGUgdGhlIEdyaWQuXG4gICAgICovXG4gICAga2VuZG9HcmlkR3JvdXBCaW5kaW5nOiBhbnlbXTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZGF0YTogYW55W107XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgZGVzY3JpcHRvcnMgYnkgd2hpY2ggdGhlIGRhdGEgd2lsbCBiZSBzb3J0ZWQuXG4gICAgICovXG4gICAgc29ydDogU29ydERlc2NyaXB0b3JbXTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBkZXNjcmlwdG9yIGJ5IHdoaWNoIHRoZSBkYXRhIHdpbGwgYmUgZmlsdGVyZWQuXG4gICAgICovXG4gICAgZmlsdGVyOiBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGRlc2NyaXB0b3JzIGJ5IHdoaWNoIHRoZSBkYXRhIHdpbGwgYmUgZ3JvdXBlZC5cbiAgICAgKi9cbiAgICBncm91cDogR3JvdXBEZXNjcmlwdG9yW107XG4gICAgcHJpdmF0ZSBncm91cHM7XG4gICAgY29uc3RydWN0b3IoZ3JpZDogR3JpZENvbXBvbmVudCwgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLCBsb2NhbERhdGFDaGFuZ2VzU2VydmljZTogTG9jYWxEYXRhQ2hhbmdlc1NlcnZpY2UpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBncm91cEV4cGFuZCh7IGdyb3VwSW5kZXggfTogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZ3JvdXBDb2xsYXBzZSh7IGdyb3VwSW5kZXggfTogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgcHJvY2VzcyhzdGF0ZTogU3RhdGUpOiBHcmlkRGF0YVJlc3VsdDtcbiAgICBwcm90ZWN0ZWQgcHJvY2Vzc0dyb3VwcyhzdGF0ZTogU3RhdGUpOiBHcmlkRGF0YVJlc3VsdDtcbiAgICBwcm90ZWN0ZWQgZGF0YVJlc3VsdChza2lwOiBudW1iZXIsIHRha2U6IG51bWJlcik6IEdyaWREYXRhUmVzdWx0O1xuICAgIHByb3RlY3RlZCBhcHBseVN0YXRlKHsgc2tpcCwgdGFrZSwgc29ydCwgZ3JvdXAsIGZpbHRlciB9OiBTdGF0ZSk6IHZvaWQ7XG59XG4iXX0=