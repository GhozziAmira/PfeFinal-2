/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { FormGroup } from '@angular/forms';
import { EditingDirectiveBase } from './editing-directive-base';
import { GridComponent } from '../grid.component';
import { LocalDataChangesService } from '../editing/local-data-changes.service';
import { CreateFormGroupArgs } from './create-form-group-args.interface';
/**
 * A directive which encapsulates the editing operations of the Grid when using the in-cell
 * editing with Reactive Forms ([see example]({% slug editing_directives_grid %}#toc-the-incell-directive)).
 */
import * as ɵngcc0 from '@angular/core';
export declare class InCellEditingDirective extends EditingDirectiveBase {
    protected grid: GridComponent;
    protected localDataChangesService: LocalDataChangesService;
    /**
     * The function that creates the `FormGroup` for the edited model.
     */
    createFormGroup: (args: CreateFormGroupArgs) => FormGroup;
    constructor(grid: GridComponent, localDataChangesService: LocalDataChangesService);
    protected createModel(args: any): any;
    protected saveModel({ dataItem, formGroup, isNew }: any): any;
    /**
     * @hidden
     */
    ngOnInit(): void;
    protected removeHandler(args: any): void;
    protected cellClickHandler(args: any): void;
    protected cellCloseHandler(args: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InCellEditingDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<InCellEditingDirective, "[kendoGridInCellEditing]", never, {
    "createFormGroup": "kendoGridInCellEditing";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW4tY2VsbC1lZGl0aW5nLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJpbi1jZWxsLWVkaXRpbmcuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0FBYUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEVkaXRpbmdEaXJlY3RpdmVCYXNlIH0gZnJvbSAnLi9lZGl0aW5nLWRpcmVjdGl2ZS1iYXNlJztcbmltcG9ydCB7IEdyaWRDb21wb25lbnQgfSBmcm9tICcuLi9ncmlkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMb2NhbERhdGFDaGFuZ2VzU2VydmljZSB9IGZyb20gJy4uL2VkaXRpbmcvbG9jYWwtZGF0YS1jaGFuZ2VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ3JlYXRlRm9ybUdyb3VwQXJncyB9IGZyb20gJy4vY3JlYXRlLWZvcm0tZ3JvdXAtYXJncy5pbnRlcmZhY2UnO1xuLyoqXG4gKiBBIGRpcmVjdGl2ZSB3aGljaCBlbmNhcHN1bGF0ZXMgdGhlIGVkaXRpbmcgb3BlcmF0aW9ucyBvZiB0aGUgR3JpZCB3aGVuIHVzaW5nIHRoZSBpbi1jZWxsXG4gKiBlZGl0aW5nIHdpdGggUmVhY3RpdmUgRm9ybXMgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBlZGl0aW5nX2RpcmVjdGl2ZXNfZ3JpZCAlfSN0b2MtdGhlLWluY2VsbC1kaXJlY3RpdmUpKS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSW5DZWxsRWRpdGluZ0RpcmVjdGl2ZSBleHRlbmRzIEVkaXRpbmdEaXJlY3RpdmVCYXNlIHtcbiAgICBwcm90ZWN0ZWQgZ3JpZDogR3JpZENvbXBvbmVudDtcbiAgICBwcm90ZWN0ZWQgbG9jYWxEYXRhQ2hhbmdlc1NlcnZpY2U6IExvY2FsRGF0YUNoYW5nZXNTZXJ2aWNlO1xuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlIGBGb3JtR3JvdXBgIGZvciB0aGUgZWRpdGVkIG1vZGVsLlxuICAgICAqL1xuICAgIGNyZWF0ZUZvcm1Hcm91cDogKGFyZ3M6IENyZWF0ZUZvcm1Hcm91cEFyZ3MpID0+IEZvcm1Hcm91cDtcbiAgICBjb25zdHJ1Y3RvcihncmlkOiBHcmlkQ29tcG9uZW50LCBsb2NhbERhdGFDaGFuZ2VzU2VydmljZTogTG9jYWxEYXRhQ2hhbmdlc1NlcnZpY2UpO1xuICAgIHByb3RlY3RlZCBjcmVhdGVNb2RlbChhcmdzOiBhbnkpOiBhbnk7XG4gICAgcHJvdGVjdGVkIHNhdmVNb2RlbCh7IGRhdGFJdGVtLCBmb3JtR3JvdXAsIGlzTmV3IH06IGFueSk6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgcmVtb3ZlSGFuZGxlcihhcmdzOiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBjZWxsQ2xpY2tIYW5kbGVyKGFyZ3M6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGNlbGxDbG9zZUhhbmRsZXIoYXJnczogYW55KTogdm9pZDtcbn1cbiJdfQ==