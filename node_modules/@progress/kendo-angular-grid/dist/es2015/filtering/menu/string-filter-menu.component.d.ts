/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { CompositeFilterDescriptor, FilterDescriptor } from '@progress/kendo-data-query';
import { ColumnComponent } from "../../columns/column.component";
import { StringFilterComponent } from '../string-filter.component';
import { FilterService } from '../filter.service';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * Represents a string-filter menu component.
 * ([see example]({% slug builtinfiltertemplate_grid %}#toc-configuration-components-for-filter-templates)).
 */
import * as ɵngcc0 from '@angular/core';
export declare class StringFilterMenuComponent extends StringFilterComponent {
    logicOperators: Array<{
        text: string;
        value: "and" | "or";
    }>;
    /**
     * @hidden
     */
    readonly hostClasses: boolean;
    /**
     * The column with which the filter is associated.
     * @type {ColumnComponent}
     */
    column: ColumnComponent;
    /**
     * The current menu filter.
     * @type {CompositeFilterDescriptor}
     */
    filter: CompositeFilterDescriptor;
    /**
     * Determines if the inputs of second criteria will displayed.
     */
    extra: boolean;
    /**
     * The `FilterService` instance which is responsible for handling the changes in the filter descriptor.
     */
    filterService: FilterService;
    constructor(localization: LocalizationService);
    readonly firstFilter: FilterDescriptor;
    readonly secondFilter: FilterDescriptor;
    logicChange(value: 'and' | 'or'): void;
    protected localizationChange(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StringFilterMenuComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<StringFilterMenuComponent, "kendo-grid-string-filter-menu", never, {
    "filter": "filter";
    "extra": "extra";
    "column": "column";
    "filterService": "filterService";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLWZpbHRlci1tZW51LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzdHJpbmctZmlsdGVyLW1lbnUuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0FBYUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IENvbXBvc2l0ZUZpbHRlckRlc2NyaXB0b3IsIEZpbHRlckRlc2NyaXB0b3IgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZGF0YS1xdWVyeSc7XG5pbXBvcnQgeyBDb2x1bW5Db21wb25lbnQgfSBmcm9tIFwiLi4vLi4vY29sdW1ucy9jb2x1bW4uY29tcG9uZW50XCI7XG5pbXBvcnQgeyBTdHJpbmdGaWx0ZXJDb21wb25lbnQgfSBmcm9tICcuLi9zdHJpbmctZmlsdGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGaWx0ZXJTZXJ2aWNlIH0gZnJvbSAnLi4vZmlsdGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgc3RyaW5nLWZpbHRlciBtZW51IGNvbXBvbmVudC5cbiAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgYnVpbHRpbmZpbHRlcnRlbXBsYXRlX2dyaWQgJX0jdG9jLWNvbmZpZ3VyYXRpb24tY29tcG9uZW50cy1mb3ItZmlsdGVyLXRlbXBsYXRlcykpLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTdHJpbmdGaWx0ZXJNZW51Q29tcG9uZW50IGV4dGVuZHMgU3RyaW5nRmlsdGVyQ29tcG9uZW50IHtcbiAgICBsb2dpY09wZXJhdG9yczogQXJyYXk8e1xuICAgICAgICB0ZXh0OiBzdHJpbmc7XG4gICAgICAgIHZhbHVlOiBcImFuZFwiIHwgXCJvclwiO1xuICAgIH0+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBob3N0Q2xhc3NlczogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgY29sdW1uIHdpdGggd2hpY2ggdGhlIGZpbHRlciBpcyBhc3NvY2lhdGVkLlxuICAgICAqIEB0eXBlIHtDb2x1bW5Db21wb25lbnR9XG4gICAgICovXG4gICAgY29sdW1uOiBDb2x1bW5Db21wb25lbnQ7XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgbWVudSBmaWx0ZXIuXG4gICAgICogQHR5cGUge0NvbXBvc2l0ZUZpbHRlckRlc2NyaXB0b3J9XG4gICAgICovXG4gICAgZmlsdGVyOiBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgdGhlIGlucHV0cyBvZiBzZWNvbmQgY3JpdGVyaWEgd2lsbCBkaXNwbGF5ZWQuXG4gICAgICovXG4gICAgZXh0cmE6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIGBGaWx0ZXJTZXJ2aWNlYCBpbnN0YW5jZSB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgaGFuZGxpbmcgdGhlIGNoYW5nZXMgaW4gdGhlIGZpbHRlciBkZXNjcmlwdG9yLlxuICAgICAqL1xuICAgIGZpbHRlclNlcnZpY2U6IEZpbHRlclNlcnZpY2U7XG4gICAgY29uc3RydWN0b3IobG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlKTtcbiAgICByZWFkb25seSBmaXJzdEZpbHRlcjogRmlsdGVyRGVzY3JpcHRvcjtcbiAgICByZWFkb25seSBzZWNvbmRGaWx0ZXI6IEZpbHRlckRlc2NyaXB0b3I7XG4gICAgbG9naWNDaGFuZ2UodmFsdWU6ICdhbmQnIHwgJ29yJyk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGxvY2FsaXphdGlvbkNoYW5nZSgpOiB2b2lkO1xufVxuIl19