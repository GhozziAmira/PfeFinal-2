/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnInit } from '@angular/core';
import { ColumnComponent } from '../columns/column.component';
import { FilterService } from './filter.service';
import { CompositeFilterDescriptor, FilterDescriptor } from '@progress/kendo-data-query';
import { BaseFilterCellComponent } from './base-filter-cell.component';
import { FilterComponent } from './filter-component.interface';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { CalendarView, DateInputFormatPlaceholder } from '@progress/kendo-angular-dateinputs';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class DateFilterComponent extends BaseFilterCellComponent implements FilterComponent, OnInit {
    protected localization: LocalizationService;
    /**
     * The column with which the filter is associated.
     * @type {ColumnComponent}
     */
    column: ColumnComponent;
    /**
     * The current root filter.
     * @type {CompositeFilterDescriptor}
     */
    filter: CompositeFilterDescriptor;
    /**
     * The default filter operator. Defaults to `contains`.
     * @type {string}
     */
    operator: string;
    /**
     * The current filter for the associated column field.
     * @readonly
     * @type {FilterDescriptor}
     */
    readonly currentFilter: FilterDescriptor;
    /**
     * Specifies the date format that is used when the component is not focused.
     * By default, the `column.format` value is used (if set).
     */
    /**
    * Specifies the date format that is used when the component is not focused.
    * By default, the `column.format` value is used (if set).
    *
    * @readonly
    * @type {string}
    */
    format: string;
    /**
     * Specifies the smallest value that is valid.
     * @type {Date}
     */
    min: Date;
    /**
     * Specifies the greatest value that is valid.
     * @type {Date}
     */
    max: Date;
    /**
     * Defines the descriptions of the format sections in the input field.
     * * `wide`&mdash;Displays the full description of the format section. For example, turns `MM` into `month`.
     * Retrieved from [CLDR](https://github.com/telerik/kendo-intl/blob/develop/docs/cldr/index.md).
     * * `narrow`&mdash;Displays the narrow description of the format section. For example, turns `MM` into `mo.`.
     * Retrieved from [CLDR](https://github.com/telerik/kendo-intl/blob/develop/docs/cldr/index.md).
     * * `short`&mdash;Displays the short description of the format section. For example, turns `MM` into `mo.`.
     * Retrieved from [CLDR](https://github.com/telerik/kendo-intl/blob/develop/docs/cldr/index.md).
     * * `formatPattern`&mdash;Directly displays the format section.
     * * [`CustomFormatPlaceholder`]({% slug api_dateinputs_dateinputcustomformatplaceholder %})&mdash;
     * An object that defines the description of the format sections.
     * For example, `{ day: 'd.', month: 'M.', year: 'y', hour: 'h.' }`.
     */
    formatPlaceholder: DateInputFormatPlaceholder;
    /**
     * Specifies the hint that the component displays when its value is `null`.
     */
    placeholder: string;
    /**
     * Defines the active view that the calendar initially renders.
     * By default, the active view is `month`.
     *
     * > You have to set `activeView` within the `topView`-`bottomView` range.
     */
    activeView: CalendarView;
    /**
     * Defines the bottommost calendar view, to which the user can navigate.
     */
    bottomView: CalendarView;
    /**
     * Defines the topmost calendar view, to which the user can navigate.
     */
    topView: CalendarView;
    /**
     * Determines whether to display a week number column in the `month` view of the Calendar.
     */
    weekNumber: boolean;
    private readonly columnFormat;
    /**
     * The current filter operator for the associated column field.
     * @readonly
     * @type {string}
     */
    readonly currentOperator: string;
    protected defaultOperators: Array<{
        text: string;
        value: string;
    }>;
    private _format;
    private subscription;
    constructor(filterService: FilterService, localization: LocalizationService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    protected localizationChange(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DateFilterComponent>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DateFilterComponent, never, never, {
    "operator": "operator";
    "activeView": "activeView";
    "bottomView": "bottomView";
    "topView": "topView";
    "weekNumber": "weekNumber";
    "format": "format";
    "column": "column";
    "filter": "filter";
    "min": "min";
    "max": "max";
    "formatPlaceholder": "formatPlaceholder";
    "placeholder": "placeholder";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1maWx0ZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImRhdGUtZmlsdGVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0FBZUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1HQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29sdW1uQ29tcG9uZW50IH0gZnJvbSAnLi4vY29sdW1ucy9jb2x1bW4uY29tcG9uZW50JztcbmltcG9ydCB7IEZpbHRlclNlcnZpY2UgfSBmcm9tICcuL2ZpbHRlci5zZXJ2aWNlJztcbmltcG9ydCB7IENvbXBvc2l0ZUZpbHRlckRlc2NyaXB0b3IsIEZpbHRlckRlc2NyaXB0b3IgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZGF0YS1xdWVyeSc7XG5pbXBvcnQgeyBCYXNlRmlsdGVyQ2VsbENvbXBvbmVudCB9IGZyb20gJy4vYmFzZS1maWx0ZXItY2VsbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmlsdGVyQ29tcG9uZW50IH0gZnJvbSAnLi9maWx0ZXItY29tcG9uZW50LmludGVyZmFjZSc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG5pbXBvcnQgeyBDYWxlbmRhclZpZXcsIERhdGVJbnB1dEZvcm1hdFBsYWNlaG9sZGVyIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItZGF0ZWlucHV0cyc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGF0ZUZpbHRlckNvbXBvbmVudCBleHRlbmRzIEJhc2VGaWx0ZXJDZWxsQ29tcG9uZW50IGltcGxlbWVudHMgRmlsdGVyQ29tcG9uZW50LCBPbkluaXQge1xuICAgIHByb3RlY3RlZCBsb2NhbGl6YXRpb246IExvY2FsaXphdGlvblNlcnZpY2U7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbHVtbiB3aXRoIHdoaWNoIHRoZSBmaWx0ZXIgaXMgYXNzb2NpYXRlZC5cbiAgICAgKiBAdHlwZSB7Q29sdW1uQ29tcG9uZW50fVxuICAgICAqL1xuICAgIGNvbHVtbjogQ29sdW1uQ29tcG9uZW50O1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHJvb3QgZmlsdGVyLlxuICAgICAqIEB0eXBlIHtDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yfVxuICAgICAqL1xuICAgIGZpbHRlcjogQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvcjtcbiAgICAvKipcbiAgICAgKiBUaGUgZGVmYXVsdCBmaWx0ZXIgb3BlcmF0b3IuIERlZmF1bHRzIHRvIGBjb250YWluc2AuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBvcGVyYXRvcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IGZpbHRlciBmb3IgdGhlIGFzc29jaWF0ZWQgY29sdW1uIGZpZWxkLlxuICAgICAqIEByZWFkb25seVxuICAgICAqIEB0eXBlIHtGaWx0ZXJEZXNjcmlwdG9yfVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGN1cnJlbnRGaWx0ZXI6IEZpbHRlckRlc2NyaXB0b3I7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBkYXRlIGZvcm1hdCB0aGF0IGlzIHVzZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBmb2N1c2VkLlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSBgY29sdW1uLmZvcm1hdGAgdmFsdWUgaXMgdXNlZCAoaWYgc2V0KS5cbiAgICAgKi9cbiAgICAvKipcbiAgICAqIFNwZWNpZmllcyB0aGUgZGF0ZSBmb3JtYXQgdGhhdCBpcyB1c2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgZm9jdXNlZC5cbiAgICAqIEJ5IGRlZmF1bHQsIHRoZSBgY29sdW1uLmZvcm1hdGAgdmFsdWUgaXMgdXNlZCAoaWYgc2V0KS5cbiAgICAqXG4gICAgKiBAcmVhZG9ubHlcbiAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgKi9cbiAgICBmb3JtYXQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHNtYWxsZXN0IHZhbHVlIHRoYXQgaXMgdmFsaWQuXG4gICAgICogQHR5cGUge0RhdGV9XG4gICAgICovXG4gICAgbWluOiBEYXRlO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgZ3JlYXRlc3QgdmFsdWUgdGhhdCBpcyB2YWxpZC5cbiAgICAgKiBAdHlwZSB7RGF0ZX1cbiAgICAgKi9cbiAgICBtYXg6IERhdGU7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgZGVzY3JpcHRpb25zIG9mIHRoZSBmb3JtYXQgc2VjdGlvbnMgaW4gdGhlIGlucHV0IGZpZWxkLlxuICAgICAqICogYHdpZGVgJm1kYXNoO0Rpc3BsYXlzIHRoZSBmdWxsIGRlc2NyaXB0aW9uIG9mIHRoZSBmb3JtYXQgc2VjdGlvbi4gRm9yIGV4YW1wbGUsIHR1cm5zIGBNTWAgaW50byBgbW9udGhgLlxuICAgICAqIFJldHJpZXZlZCBmcm9tIFtDTERSXShodHRwczovL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1pbnRsL2Jsb2IvZGV2ZWxvcC9kb2NzL2NsZHIvaW5kZXgubWQpLlxuICAgICAqICogYG5hcnJvd2AmbWRhc2g7RGlzcGxheXMgdGhlIG5hcnJvdyBkZXNjcmlwdGlvbiBvZiB0aGUgZm9ybWF0IHNlY3Rpb24uIEZvciBleGFtcGxlLCB0dXJucyBgTU1gIGludG8gYG1vLmAuXG4gICAgICogUmV0cmlldmVkIGZyb20gW0NMRFJdKGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWludGwvYmxvYi9kZXZlbG9wL2RvY3MvY2xkci9pbmRleC5tZCkuXG4gICAgICogKiBgc2hvcnRgJm1kYXNoO0Rpc3BsYXlzIHRoZSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgZm9ybWF0IHNlY3Rpb24uIEZvciBleGFtcGxlLCB0dXJucyBgTU1gIGludG8gYG1vLmAuXG4gICAgICogUmV0cmlldmVkIGZyb20gW0NMRFJdKGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWludGwvYmxvYi9kZXZlbG9wL2RvY3MvY2xkci9pbmRleC5tZCkuXG4gICAgICogKiBgZm9ybWF0UGF0dGVybmAmbWRhc2g7RGlyZWN0bHkgZGlzcGxheXMgdGhlIGZvcm1hdCBzZWN0aW9uLlxuICAgICAqICogW2BDdXN0b21Gb3JtYXRQbGFjZWhvbGRlcmBdKHslIHNsdWcgYXBpX2RhdGVpbnB1dHNfZGF0ZWlucHV0Y3VzdG9tZm9ybWF0cGxhY2Vob2xkZXIgJX0pJm1kYXNoO1xuICAgICAqIEFuIG9iamVjdCB0aGF0IGRlZmluZXMgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBmb3JtYXQgc2VjdGlvbnMuXG4gICAgICogRm9yIGV4YW1wbGUsIGB7IGRheTogJ2QuJywgbW9udGg6ICdNLicsIHllYXI6ICd5JywgaG91cjogJ2guJyB9YC5cbiAgICAgKi9cbiAgICBmb3JtYXRQbGFjZWhvbGRlcjogRGF0ZUlucHV0Rm9ybWF0UGxhY2Vob2xkZXI7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBoaW50IHRoYXQgdGhlIGNvbXBvbmVudCBkaXNwbGF5cyB3aGVuIGl0cyB2YWx1ZSBpcyBgbnVsbGAuXG4gICAgICovXG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBhY3RpdmUgdmlldyB0aGF0IHRoZSBjYWxlbmRhciBpbml0aWFsbHkgcmVuZGVycy5cbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgYWN0aXZlIHZpZXcgaXMgYG1vbnRoYC5cbiAgICAgKlxuICAgICAqID4gWW91IGhhdmUgdG8gc2V0IGBhY3RpdmVWaWV3YCB3aXRoaW4gdGhlIGB0b3BWaWV3YC1gYm90dG9tVmlld2AgcmFuZ2UuXG4gICAgICovXG4gICAgYWN0aXZlVmlldzogQ2FsZW5kYXJWaWV3O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGJvdHRvbW1vc3QgY2FsZW5kYXIgdmlldywgdG8gd2hpY2ggdGhlIHVzZXIgY2FuIG5hdmlnYXRlLlxuICAgICAqL1xuICAgIGJvdHRvbVZpZXc6IENhbGVuZGFyVmlldztcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSB0b3Btb3N0IGNhbGVuZGFyIHZpZXcsIHRvIHdoaWNoIHRoZSB1c2VyIGNhbiBuYXZpZ2F0ZS5cbiAgICAgKi9cbiAgICB0b3BWaWV3OiBDYWxlbmRhclZpZXc7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGRpc3BsYXkgYSB3ZWVrIG51bWJlciBjb2x1bW4gaW4gdGhlIGBtb250aGAgdmlldyBvZiB0aGUgQ2FsZW5kYXIuXG4gICAgICovXG4gICAgd2Vla051bWJlcjogYm9vbGVhbjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbHVtbkZvcm1hdDtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBmaWx0ZXIgb3BlcmF0b3IgZm9yIHRoZSBhc3NvY2lhdGVkIGNvbHVtbiBmaWVsZC5cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGN1cnJlbnRPcGVyYXRvcjogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBkZWZhdWx0T3BlcmF0b3JzOiBBcnJheTx7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgdmFsdWU6IHN0cmluZztcbiAgICB9PjtcbiAgICBwcml2YXRlIF9mb3JtYXQ7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3IoZmlsdGVyU2VydmljZTogRmlsdGVyU2VydmljZSwgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGxvY2FsaXphdGlvbkNoYW5nZSgpOiB2b2lkO1xufVxuIl19