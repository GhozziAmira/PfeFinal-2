/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { SimpleChange, NgZone, Renderer2, ElementRef, OnInit, OnDestroy, OnChanges, DoCheck, TrackByFunction } from '@angular/core';
import { GroupDescriptor } from '@progress/kendo-data-query';
import { ColumnBase } from '../columns/column-base';
import { DetailTemplateDirective } from './details/detail-template.directive';
import { GroupsService } from '../grouping/groups.service';
import { ChangeNotificationService } from '../data/change-notification.service';
import { NoRecordsTemplateDirective } from './no-records-template.directive';
import { EditService } from '../editing/edit.service';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { RowClassFn } from './common/row-class';
import { SelectableSettings } from '../selection/selectable-settings';
import { DomEventsService } from '../common/dom-events.service';
import { SelectionService } from "../selection/selection.service";
import { ColumnInfoService } from "../common/column-info.service";
import { FilterableSettings } from '../filtering/filterable';
import { NavigationService } from '../navigation/navigation.service';
import { GridItem } from '../data/grid-item.interface';
import { DataItem } from '../data/data-item.interface';
import { DetailsService } from './details/details.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class TableBodyComponent implements OnInit, OnDestroy, OnChanges, DoCheck {
    detailsService: DetailsService;
    groupsService: GroupsService;
    private changeNotification;
    editService: EditService;
    private localization;
    private ngZone;
    private renderer;
    private element;
    private domEvents;
    selectionService: SelectionService;
    private columnInfoService;
    private navigationService;
    columns: Array<ColumnBase>;
    allColumns: Array<ColumnBase>;
    groups: Array<GroupDescriptor>;
    detailTemplate: DetailTemplateDirective;
    noRecordsTemplate: NoRecordsTemplateDirective;
    data: Array<GridItem>;
    skip: number;
    selectable: SelectableSettings | boolean;
    filterable: FilterableSettings;
    noRecordsText: string;
    isLocked: boolean;
    skipGroupDecoration: boolean;
    showGroupFooters: boolean;
    lockedColumnsCount: number;
    totalColumnsCount: number;
    virtualColumns: boolean;
    trackBy: TrackByFunction<GridItem>;
    groupHeaderSlaveCellsCount: number;
    groupHeaderColumns: any[];
    private clickSubscription;
    private cellKeydownSubscription;
    private clickTimeout;
    rowClass: RowClassFn;
    constructor(detailsService: DetailsService, groupsService: GroupsService, changeNotification: ChangeNotificationService, editService: EditService, localization: LocalizationService, ngZone: NgZone, renderer: Renderer2, element: ElementRef, domEvents: DomEventsService, selectionService: SelectionService, columnInfoService: ColumnInfoService, navigationService: NavigationService);
    readonly newDataItem: any;
    readonly unlockedColumnsCount: number;
    toggleRow(index: number, dataItem: any): boolean;
    isExpanded(viewItem: any): boolean;
    detailButtonStyles(viewItem: any): any;
    detailButtonTitle(viewItem: any): any;
    isGroup(item: GridItem): boolean;
    isDataItem(item: GridItem): boolean;
    isFooter(item: GridItem): boolean;
    isInExpandedGroup(item: DataItem): boolean;
    isParentGroupExpanded(item: any): boolean;
    isOdd(item: any): boolean;
    isSelectable(): boolean;
    isRowSelected(item: any): boolean;
    trackByWrapper(index: number, item: GridItem): any;
    trackByColumns(index: number, item: any): any;
    ngDoCheck(): void;
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    logicalRowIndex(rowIndex: number): number;
    addRowLogicalIndex(): number;
    logicalColIndex(column: any): number;
    ngOnInit(): void;
    ngOnDestroy(): void;
    isEditingCell(index: number, column: any): boolean;
    isEditingRow(index: number): boolean;
    readonly hasGroupHeaderColumn: boolean;
    readonly columnsContainer: any;
    readonly columnsSpan: number;
    readonly allColumnsSpan: number;
    readonly colSpan: number;
    readonly footerColumns: ColumnBase[];
    showGroupHeader(item: any): boolean;
    private readonly hasDetailTemplate;
    private clickHandler;
    private emitCellClick;
    private cellKeydownHandler;
    private cellClickArgs;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TableBodyComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TableBodyComponent, "[kendoGridTableBody]", never, {
    "columns": "columns";
    "groups": "groups";
    "skip": "skip";
    "noRecordsText": "noRecordsText";
    "isLocked": "isLocked";
    "skipGroupDecoration": "skipGroupDecoration";
    "showGroupFooters": "showGroupFooters";
    "lockedColumnsCount": "lockedColumnsCount";
    "totalColumnsCount": "totalColumnsCount";
    "trackBy": "trackBy";
    "rowClass": "rowClass";
    "allColumns": "allColumns";
    "detailTemplate": "detailTemplate";
    "noRecordsTemplate": "noRecordsTemplate";
    "data": "data";
    "selectable": "selectable";
    "filterable": "filterable";
    "virtualColumns": "virtualColumns";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtYm9keS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidGFibGUtYm9keS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEVBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgU2ltcGxlQ2hhbmdlLCBOZ1pvbmUsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgRG9DaGVjaywgVHJhY2tCeUZ1bmN0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHcm91cERlc2NyaXB0b3IgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZGF0YS1xdWVyeSc7XG5pbXBvcnQgeyBDb2x1bW5CYXNlIH0gZnJvbSAnLi4vY29sdW1ucy9jb2x1bW4tYmFzZSc7XG5pbXBvcnQgeyBEZXRhaWxUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vZGV0YWlscy9kZXRhaWwtdGVtcGxhdGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IEdyb3Vwc1NlcnZpY2UgfSBmcm9tICcuLi9ncm91cGluZy9ncm91cHMuc2VydmljZSc7XG5pbXBvcnQgeyBDaGFuZ2VOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vZGF0YS9jaGFuZ2Utbm90aWZpY2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgTm9SZWNvcmRzVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL25vLXJlY29yZHMtdGVtcGxhdGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IEVkaXRTZXJ2aWNlIH0gZnJvbSAnLi4vZWRpdGluZy9lZGl0LnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xuaW1wb3J0IHsgUm93Q2xhc3NGbiB9IGZyb20gJy4vY29tbW9uL3Jvdy1jbGFzcyc7XG5pbXBvcnQgeyBTZWxlY3RhYmxlU2V0dGluZ3MgfSBmcm9tICcuLi9zZWxlY3Rpb24vc2VsZWN0YWJsZS1zZXR0aW5ncyc7XG5pbXBvcnQgeyBEb21FdmVudHNTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL2RvbS1ldmVudHMuc2VydmljZSc7XG5pbXBvcnQgeyBTZWxlY3Rpb25TZXJ2aWNlIH0gZnJvbSBcIi4uL3NlbGVjdGlvbi9zZWxlY3Rpb24uc2VydmljZVwiO1xuaW1wb3J0IHsgQ29sdW1uSW5mb1NlcnZpY2UgfSBmcm9tIFwiLi4vY29tbW9uL2NvbHVtbi1pbmZvLnNlcnZpY2VcIjtcbmltcG9ydCB7IEZpbHRlcmFibGVTZXR0aW5ncyB9IGZyb20gJy4uL2ZpbHRlcmluZy9maWx0ZXJhYmxlJztcbmltcG9ydCB7IE5hdmlnYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vbmF2aWdhdGlvbi9uYXZpZ2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgR3JpZEl0ZW0gfSBmcm9tICcuLi9kYXRhL2dyaWQtaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRGF0YUl0ZW0gfSBmcm9tICcuLi9kYXRhL2RhdGEtaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRGV0YWlsc1NlcnZpY2UgfSBmcm9tICcuL2RldGFpbHMvZGV0YWlscy5zZXJ2aWNlJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUYWJsZUJvZHlDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBEb0NoZWNrIHtcbiAgICBkZXRhaWxzU2VydmljZTogRGV0YWlsc1NlcnZpY2U7XG4gICAgZ3JvdXBzU2VydmljZTogR3JvdXBzU2VydmljZTtcbiAgICBwcml2YXRlIGNoYW5nZU5vdGlmaWNhdGlvbjtcbiAgICBlZGl0U2VydmljZTogRWRpdFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBsb2NhbGl6YXRpb247XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBkb21FdmVudHM7XG4gICAgc2VsZWN0aW9uU2VydmljZTogU2VsZWN0aW9uU2VydmljZTtcbiAgICBwcml2YXRlIGNvbHVtbkluZm9TZXJ2aWNlO1xuICAgIHByaXZhdGUgbmF2aWdhdGlvblNlcnZpY2U7XG4gICAgY29sdW1uczogQXJyYXk8Q29sdW1uQmFzZT47XG4gICAgYWxsQ29sdW1uczogQXJyYXk8Q29sdW1uQmFzZT47XG4gICAgZ3JvdXBzOiBBcnJheTxHcm91cERlc2NyaXB0b3I+O1xuICAgIGRldGFpbFRlbXBsYXRlOiBEZXRhaWxUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICBub1JlY29yZHNUZW1wbGF0ZTogTm9SZWNvcmRzVGVtcGxhdGVEaXJlY3RpdmU7XG4gICAgZGF0YTogQXJyYXk8R3JpZEl0ZW0+O1xuICAgIHNraXA6IG51bWJlcjtcbiAgICBzZWxlY3RhYmxlOiBTZWxlY3RhYmxlU2V0dGluZ3MgfCBib29sZWFuO1xuICAgIGZpbHRlcmFibGU6IEZpbHRlcmFibGVTZXR0aW5ncztcbiAgICBub1JlY29yZHNUZXh0OiBzdHJpbmc7XG4gICAgaXNMb2NrZWQ6IGJvb2xlYW47XG4gICAgc2tpcEdyb3VwRGVjb3JhdGlvbjogYm9vbGVhbjtcbiAgICBzaG93R3JvdXBGb290ZXJzOiBib29sZWFuO1xuICAgIGxvY2tlZENvbHVtbnNDb3VudDogbnVtYmVyO1xuICAgIHRvdGFsQ29sdW1uc0NvdW50OiBudW1iZXI7XG4gICAgdmlydHVhbENvbHVtbnM6IGJvb2xlYW47XG4gICAgdHJhY2tCeTogVHJhY2tCeUZ1bmN0aW9uPEdyaWRJdGVtPjtcbiAgICBncm91cEhlYWRlclNsYXZlQ2VsbHNDb3VudDogbnVtYmVyO1xuICAgIGdyb3VwSGVhZGVyQ29sdW1uczogYW55W107XG4gICAgcHJpdmF0ZSBjbGlja1N1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGNlbGxLZXlkb3duU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgY2xpY2tUaW1lb3V0O1xuICAgIHJvd0NsYXNzOiBSb3dDbGFzc0ZuO1xuICAgIGNvbnN0cnVjdG9yKGRldGFpbHNTZXJ2aWNlOiBEZXRhaWxzU2VydmljZSwgZ3JvdXBzU2VydmljZTogR3JvdXBzU2VydmljZSwgY2hhbmdlTm90aWZpY2F0aW9uOiBDaGFuZ2VOb3RpZmljYXRpb25TZXJ2aWNlLCBlZGl0U2VydmljZTogRWRpdFNlcnZpY2UsIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSwgbmdab25lOiBOZ1pvbmUsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIGRvbUV2ZW50czogRG9tRXZlbnRzU2VydmljZSwgc2VsZWN0aW9uU2VydmljZTogU2VsZWN0aW9uU2VydmljZSwgY29sdW1uSW5mb1NlcnZpY2U6IENvbHVtbkluZm9TZXJ2aWNlLCBuYXZpZ2F0aW9uU2VydmljZTogTmF2aWdhdGlvblNlcnZpY2UpO1xuICAgIHJlYWRvbmx5IG5ld0RhdGFJdGVtOiBhbnk7XG4gICAgcmVhZG9ubHkgdW5sb2NrZWRDb2x1bW5zQ291bnQ6IG51bWJlcjtcbiAgICB0b2dnbGVSb3coaW5kZXg6IG51bWJlciwgZGF0YUl0ZW06IGFueSk6IGJvb2xlYW47XG4gICAgaXNFeHBhbmRlZCh2aWV3SXRlbTogYW55KTogYm9vbGVhbjtcbiAgICBkZXRhaWxCdXR0b25TdHlsZXModmlld0l0ZW06IGFueSk6IGFueTtcbiAgICBkZXRhaWxCdXR0b25UaXRsZSh2aWV3SXRlbTogYW55KTogYW55O1xuICAgIGlzR3JvdXAoaXRlbTogR3JpZEl0ZW0pOiBib29sZWFuO1xuICAgIGlzRGF0YUl0ZW0oaXRlbTogR3JpZEl0ZW0pOiBib29sZWFuO1xuICAgIGlzRm9vdGVyKGl0ZW06IEdyaWRJdGVtKTogYm9vbGVhbjtcbiAgICBpc0luRXhwYW5kZWRHcm91cChpdGVtOiBEYXRhSXRlbSk6IGJvb2xlYW47XG4gICAgaXNQYXJlbnRHcm91cEV4cGFuZGVkKGl0ZW06IGFueSk6IGJvb2xlYW47XG4gICAgaXNPZGQoaXRlbTogYW55KTogYm9vbGVhbjtcbiAgICBpc1NlbGVjdGFibGUoKTogYm9vbGVhbjtcbiAgICBpc1Jvd1NlbGVjdGVkKGl0ZW06IGFueSk6IGJvb2xlYW47XG4gICAgdHJhY2tCeVdyYXBwZXIoaW5kZXg6IG51bWJlciwgaXRlbTogR3JpZEl0ZW0pOiBhbnk7XG4gICAgdHJhY2tCeUNvbHVtbnMoaW5kZXg6IG51bWJlciwgaXRlbTogYW55KTogYW55O1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IHtcbiAgICAgICAgW3Byb3BlcnR5TmFtZTogc3RyaW5nXTogU2ltcGxlQ2hhbmdlO1xuICAgIH0pOiB2b2lkO1xuICAgIGxvZ2ljYWxSb3dJbmRleChyb3dJbmRleDogbnVtYmVyKTogbnVtYmVyO1xuICAgIGFkZFJvd0xvZ2ljYWxJbmRleCgpOiBudW1iZXI7XG4gICAgbG9naWNhbENvbEluZGV4KGNvbHVtbjogYW55KTogbnVtYmVyO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBpc0VkaXRpbmdDZWxsKGluZGV4OiBudW1iZXIsIGNvbHVtbjogYW55KTogYm9vbGVhbjtcbiAgICBpc0VkaXRpbmdSb3coaW5kZXg6IG51bWJlcik6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaGFzR3JvdXBIZWFkZXJDb2x1bW46IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgY29sdW1uc0NvbnRhaW5lcjogYW55O1xuICAgIHJlYWRvbmx5IGNvbHVtbnNTcGFuOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgYWxsQ29sdW1uc1NwYW46IG51bWJlcjtcbiAgICByZWFkb25seSBjb2xTcGFuOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgZm9vdGVyQ29sdW1uczogQ29sdW1uQmFzZVtdO1xuICAgIHNob3dHcm91cEhlYWRlcihpdGVtOiBhbnkpOiBib29sZWFuO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFzRGV0YWlsVGVtcGxhdGU7XG4gICAgcHJpdmF0ZSBjbGlja0hhbmRsZXI7XG4gICAgcHJpdmF0ZSBlbWl0Q2VsbENsaWNrO1xuICAgIHByaXZhdGUgY2VsbEtleWRvd25IYW5kbGVyO1xuICAgIHByaXZhdGUgY2VsbENsaWNrQXJncztcbn1cbiJdfQ==