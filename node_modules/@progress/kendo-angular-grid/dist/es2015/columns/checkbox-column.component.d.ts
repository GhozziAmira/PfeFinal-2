/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef } from '@angular/core';
import { ColumnBase } from './column-base';
import { CellTemplateDirective } from '../rendering/cell-template.directive';
/**
 * Represents the checkbox for selecting columns in the Grid. If the column is
 * defined as empty, it renders a default checkbox for row selection.
 * You can also define the content of the column inside an `<ng-template>` tag.
 * The input requires you to include the `SelectionCheckbox` option.
 *
 * The template context is set to the current data item and the following additional fields are passed:
 * - `columnIndex`&mdash;The current column index.
 * - `rowIndex`&mdash;The current data row index. If inside a new item row, it will be `-1`.
 * - `dataItem`&mdash;The current data item.
 * - `column`&mdash;The current column instance.
 * - `isNew`&mdash;The state of the current item.
 *
 * For more examples, refer to:
 * - [Selecting or deselecting all items on a page]({% slug selection_grid %}#toc-select-all-feature)
 * - [Persisting the selection]({% slug selection_grid %}#toc-in-combination-with-the-select-all-feature)
 *
 * @example
 * ```ts-preview
 *
 * _@Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-grid [data]="gridData" [selectable]="{enabled: true, checkboxOnly: true}">
 *          <kendo-grid-column field="ProductID" title="Product ID" width="120">
 *          </kendo-grid-column>
 *          <kendo-grid-column field="ProductName" title="Product Name">
 *          </kendo-grid-column>
 *          <kendo-grid-checkbox-column title="Default checkbox">
 *          </kendo-grid-checkbox-column>
 *          <kendo-grid-checkbox-column title="Custom checkbox">
 *            <ng-template kendoGridCellTemplate let-idx="rowIndex">
 *              Select row <input [kendoGridSelectionCheckbox]="idx" />
 *            </ng-template>
 *          </kendo-grid-checkbox-column>
 *        </kendo-grid>
 *    `
 * })
 *
 * class AppComponent {
 *    public gridData: any[];
 *
 *    constructor() {
 *        this.gridData = products;
 *    }
 * }
 *
 * const products = [{
 *    "ProductID": 1,
 *    "ProductName": "Chai",
 *    "UnitPrice": 18.0000,
 *    "Discontinued": true
 *  }, {
 *    "ProductID": 2,
 *    "ProductName": "Chang",
 *    "UnitPrice": 19.0000,
 *    "Discontinued": false
 *  }
 * ];
 *
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class CheckboxColumnComponent extends ColumnBase {
    parent?: ColumnBase;
    /**
     * Determines whether a select-all `kendoGridSelectAllCheckbox` checkbox will be displayed in the header.
     */
    showSelectAll: boolean;
    readonly isCheckboxColumn: boolean;
    template: CellTemplateDirective;
    constructor(parent?: ColumnBase);
    readonly templateRef: TemplateRef<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CheckboxColumnComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CheckboxColumnComponent, "kendo-grid-checkbox-column", never, {
    "showSelectAll": "showSelectAll";
}, {}, ["template"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3gtY29sdW1uLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjaGVja2JveC1jb2x1bW4uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxRUE7Ozs7Ozs7Ozs7Ozs7O0FBVUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29sdW1uQmFzZSB9IGZyb20gJy4vY29sdW1uLWJhc2UnO1xuaW1wb3J0IHsgQ2VsbFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi4vcmVuZGVyaW5nL2NlbGwtdGVtcGxhdGUuZGlyZWN0aXZlJztcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgY2hlY2tib3ggZm9yIHNlbGVjdGluZyBjb2x1bW5zIGluIHRoZSBHcmlkLiBJZiB0aGUgY29sdW1uIGlzXG4gKiBkZWZpbmVkIGFzIGVtcHR5LCBpdCByZW5kZXJzIGEgZGVmYXVsdCBjaGVja2JveCBmb3Igcm93IHNlbGVjdGlvbi5cbiAqIFlvdSBjYW4gYWxzbyBkZWZpbmUgdGhlIGNvbnRlbnQgb2YgdGhlIGNvbHVtbiBpbnNpZGUgYW4gYDxuZy10ZW1wbGF0ZT5gIHRhZy5cbiAqIFRoZSBpbnB1dCByZXF1aXJlcyB5b3UgdG8gaW5jbHVkZSB0aGUgYFNlbGVjdGlvbkNoZWNrYm94YCBvcHRpb24uXG4gKlxuICogVGhlIHRlbXBsYXRlIGNvbnRleHQgaXMgc2V0IHRvIHRoZSBjdXJyZW50IGRhdGEgaXRlbSBhbmQgdGhlIGZvbGxvd2luZyBhZGRpdGlvbmFsIGZpZWxkcyBhcmUgcGFzc2VkOlxuICogLSBgY29sdW1uSW5kZXhgJm1kYXNoO1RoZSBjdXJyZW50IGNvbHVtbiBpbmRleC5cbiAqIC0gYHJvd0luZGV4YCZtZGFzaDtUaGUgY3VycmVudCBkYXRhIHJvdyBpbmRleC4gSWYgaW5zaWRlIGEgbmV3IGl0ZW0gcm93LCBpdCB3aWxsIGJlIGAtMWAuXG4gKiAtIGBkYXRhSXRlbWAmbWRhc2g7VGhlIGN1cnJlbnQgZGF0YSBpdGVtLlxuICogLSBgY29sdW1uYCZtZGFzaDtUaGUgY3VycmVudCBjb2x1bW4gaW5zdGFuY2UuXG4gKiAtIGBpc05ld2AmbWRhc2g7VGhlIHN0YXRlIG9mIHRoZSBjdXJyZW50IGl0ZW0uXG4gKlxuICogRm9yIG1vcmUgZXhhbXBsZXMsIHJlZmVyIHRvOlxuICogLSBbU2VsZWN0aW5nIG9yIGRlc2VsZWN0aW5nIGFsbCBpdGVtcyBvbiBhIHBhZ2VdKHslIHNsdWcgc2VsZWN0aW9uX2dyaWQgJX0jdG9jLXNlbGVjdC1hbGwtZmVhdHVyZSlcbiAqIC0gW1BlcnNpc3RpbmcgdGhlIHNlbGVjdGlvbl0oeyUgc2x1ZyBzZWxlY3Rpb25fZ3JpZCAlfSN0b2MtaW4tY29tYmluYXRpb24td2l0aC10aGUtc2VsZWN0LWFsbC1mZWF0dXJlKVxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cy1wcmV2aWV3XG4gKlxuICogX0BDb21wb25lbnQoe1xuICogICAgc2VsZWN0b3I6ICdteS1hcHAnLFxuICogICAgdGVtcGxhdGU6IGBcbiAqICAgICAgICA8a2VuZG8tZ3JpZCBbZGF0YV09XCJncmlkRGF0YVwiIFtzZWxlY3RhYmxlXT1cIntlbmFibGVkOiB0cnVlLCBjaGVja2JveE9ubHk6IHRydWV9XCI+XG4gKiAgICAgICAgICA8a2VuZG8tZ3JpZC1jb2x1bW4gZmllbGQ9XCJQcm9kdWN0SURcIiB0aXRsZT1cIlByb2R1Y3QgSURcIiB3aWR0aD1cIjEyMFwiPlxuICogICAgICAgICAgPC9rZW5kby1ncmlkLWNvbHVtbj5cbiAqICAgICAgICAgIDxrZW5kby1ncmlkLWNvbHVtbiBmaWVsZD1cIlByb2R1Y3ROYW1lXCIgdGl0bGU9XCJQcm9kdWN0IE5hbWVcIj5cbiAqICAgICAgICAgIDwva2VuZG8tZ3JpZC1jb2x1bW4+XG4gKiAgICAgICAgICA8a2VuZG8tZ3JpZC1jaGVja2JveC1jb2x1bW4gdGl0bGU9XCJEZWZhdWx0IGNoZWNrYm94XCI+XG4gKiAgICAgICAgICA8L2tlbmRvLWdyaWQtY2hlY2tib3gtY29sdW1uPlxuICogICAgICAgICAgPGtlbmRvLWdyaWQtY2hlY2tib3gtY29sdW1uIHRpdGxlPVwiQ3VzdG9tIGNoZWNrYm94XCI+XG4gKiAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSBrZW5kb0dyaWRDZWxsVGVtcGxhdGUgbGV0LWlkeD1cInJvd0luZGV4XCI+XG4gKiAgICAgICAgICAgICAgU2VsZWN0IHJvdyA8aW5wdXQgW2tlbmRvR3JpZFNlbGVjdGlvbkNoZWNrYm94XT1cImlkeFwiIC8+XG4gKiAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gKiAgICAgICAgICA8L2tlbmRvLWdyaWQtY2hlY2tib3gtY29sdW1uPlxuICogICAgICAgIDwva2VuZG8tZ3JpZD5cbiAqICAgIGBcbiAqIH0pXG4gKlxuICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgIHB1YmxpYyBncmlkRGF0YTogYW55W107XG4gKlxuICogICAgY29uc3RydWN0b3IoKSB7XG4gKiAgICAgICAgdGhpcy5ncmlkRGF0YSA9IHByb2R1Y3RzO1xuICogICAgfVxuICogfVxuICpcbiAqIGNvbnN0IHByb2R1Y3RzID0gW3tcbiAqICAgIFwiUHJvZHVjdElEXCI6IDEsXG4gKiAgICBcIlByb2R1Y3ROYW1lXCI6IFwiQ2hhaVwiLFxuICogICAgXCJVbml0UHJpY2VcIjogMTguMDAwMCxcbiAqICAgIFwiRGlzY29udGludWVkXCI6IHRydWVcbiAqICB9LCB7XG4gKiAgICBcIlByb2R1Y3RJRFwiOiAyLFxuICogICAgXCJQcm9kdWN0TmFtZVwiOiBcIkNoYW5nXCIsXG4gKiAgICBcIlVuaXRQcmljZVwiOiAxOS4wMDAwLFxuICogICAgXCJEaXNjb250aW51ZWRcIjogZmFsc2VcbiAqICB9XG4gKiBdO1xuICpcbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDaGVja2JveENvbHVtbkNvbXBvbmVudCBleHRlbmRzIENvbHVtbkJhc2Uge1xuICAgIHBhcmVudD86IENvbHVtbkJhc2U7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc2VsZWN0LWFsbCBga2VuZG9HcmlkU2VsZWN0QWxsQ2hlY2tib3hgIGNoZWNrYm94IHdpbGwgYmUgZGlzcGxheWVkIGluIHRoZSBoZWFkZXIuXG4gICAgICovXG4gICAgc2hvd1NlbGVjdEFsbDogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc0NoZWNrYm94Q29sdW1uOiBib29sZWFuO1xuICAgIHRlbXBsYXRlOiBDZWxsVGVtcGxhdGVEaXJlY3RpdmU7XG4gICAgY29uc3RydWN0b3IocGFyZW50PzogQ29sdW1uQmFzZSk7XG4gICAgcmVhZG9ubHkgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG59XG4iXX0=