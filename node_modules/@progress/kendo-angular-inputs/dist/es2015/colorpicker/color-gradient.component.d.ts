/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, Renderer2, NgZone, EventEmitter, SimpleChanges, OnChanges, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { OutputFormat, KendoDragEvent, HSVA } from './models';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * The ColorGradient component enables smooth color transitions and provides options for selecting specific colors over the drag handle.
 * The ColorGradient is independently used by `kendo-colorpicker` and can be directly added to the page.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ColorGradientComponent implements OnChanges, OnDestroy, ControlValueAccessor {
    private host;
    private ngZone;
    private renderer;
    private cdr;
    hostClasses: boolean;
    readonly disabledClass: boolean;
    readonly hostTabindex: number;
    /**
     * @hidden
     */
    direction: string;
    /**
     * Defines whether the alpha slider will be displayed.
     */
    opacity: boolean;
    /**
     * Sets the disabled state of the ColorGradient.
     */
    disabled: boolean;
    /**
     * Sets the read-only state of the ColorGradient.
     */
    readonly: boolean;
    /**
     * Specifies whether the ColorGradient should display a 'Clear color' button.
     */
    clearButton: boolean;
    /**
     * Specifies the value of the initially selected color.
     */
    value: string;
    /**
     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabindex: number;
    /**
     * Fires each time the user selects a new color.
     */
    valueChange: EventEmitter<string>;
    /**
     * @hidden
     */
    backgroundColor: string;
    /**
     * @hidden
     *
     * Represents the currently selected `hue`, `saturation`, `value`, and `alpha` values.
     * The values are initially set in `ngOnInit` or in `ngOnChanges` and are
     * updated on moving the drag handle or the sliders.
     */
    hsva: HSVA;
    /**
     * Indicates whether the ColorGradient or any of its content is focused.
     */
    readonly isFocused: boolean;
    /**
     * @hidden
     */
    readonly alphaSliderValue: number;
    /**
     * Specifies the output format of the ColorGradientComponent.
     * The input value may be in a different format. However, it will be parsed into the output `format`
     * after the component processes it.
     *
     * The supported values are:
     * * (Default) `rgba`
     * * `hex`
     */
    format: OutputFormat;
    private _value;
    private _tabindex;
    private listeners;
    private dynamicRTLSubscription;
    private alphaSlider;
    private gradientWrapper;
    private dragHandle;
    private readonly gradientRect;
    constructor(host: ElementRef, ngZone: NgZone, renderer: Renderer2, cdr: ChangeDetectorRef, localizationService: LocalizationService);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * Focuses the component.
     */
    focus(): void;
    /**
     * @hidden
     */
    reset(): void;
    /**
     * @hidden
     */
    handleDragPress(args: KendoDragEvent): void;
    /**
     * @hidden
     */
    onHandleDrag(args: any): void;
    /**
     * @hidden
     */
    onHandleRelease(): void;
    /**
     * @hidden
     */
    changePosition(position: KendoDragEvent): void;
    /**
     * @hidden
     */
    handleHueSliderChange(hue: number): void;
    /**
     * @hidden
     */
    handleAlphaSliderChange(alpha: number): void;
    /**
     * @hidden
     */
    handleInputsValueChange(color: string): void;
    /**
     * @hidden
     */
    writeValue(value: string): void;
    /**
     * @hidden
     */
    registerOnChange(fn: any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: any): void;
    /**
     * @hidden
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    isEmpty(): boolean;
    private notifyNgChanged;
    private notifyNgTouched;
    private moveDragHandle;
    private updateUI;
    private handleValueChange;
    private setDragHandleElementPosition;
    private setAlphaSliderBackground;
    private addEventListeners;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ColorGradientComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ColorGradientComponent, "kendo-colorgradient", never, {
    "opacity": "opacity";
    "disabled": "disabled";
    "readonly": "readonly";
    "clearButton": "clearButton";
    "format": "format";
    "value": "value";
    "tabindex": "tabindex";
}, {
    "valueChange": "valueChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItZ3JhZGllbnQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNvbG9yLWdyYWRpZW50LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1KQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgTmdab25lLCBFdmVudEVtaXR0ZXIsIFNpbXBsZUNoYW5nZXMsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBPdXRwdXRGb3JtYXQsIEtlbmRvRHJhZ0V2ZW50LCBIU1ZBIH0gZnJvbSAnLi9tb2RlbHMnO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xuLyoqXG4gKiBUaGUgQ29sb3JHcmFkaWVudCBjb21wb25lbnQgZW5hYmxlcyBzbW9vdGggY29sb3IgdHJhbnNpdGlvbnMgYW5kIHByb3ZpZGVzIG9wdGlvbnMgZm9yIHNlbGVjdGluZyBzcGVjaWZpYyBjb2xvcnMgb3ZlciB0aGUgZHJhZyBoYW5kbGUuXG4gKiBUaGUgQ29sb3JHcmFkaWVudCBpcyBpbmRlcGVuZGVudGx5IHVzZWQgYnkgYGtlbmRvLWNvbG9ycGlja2VyYCBhbmQgY2FuIGJlIGRpcmVjdGx5IGFkZGVkIHRvIHRoZSBwYWdlLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDb2xvckdyYWRpZW50Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBwcml2YXRlIGhvc3Q7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIGNkcjtcbiAgICBob3N0Q2xhc3NlczogYm9vbGVhbjtcbiAgICByZWFkb25seSBkaXNhYmxlZENsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGhvc3RUYWJpbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBkaXJlY3Rpb246IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGFscGhhIHNsaWRlciB3aWxsIGJlIGRpc3BsYXllZC5cbiAgICAgKi9cbiAgICBvcGFjaXR5OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGRpc2FibGVkIHN0YXRlIG9mIHRoZSBDb2xvckdyYWRpZW50LlxuICAgICAqL1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHJlYWQtb25seSBzdGF0ZSBvZiB0aGUgQ29sb3JHcmFkaWVudC5cbiAgICAgKi9cbiAgICByZWFkb25seTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgQ29sb3JHcmFkaWVudCBzaG91bGQgZGlzcGxheSBhICdDbGVhciBjb2xvcicgYnV0dG9uLlxuICAgICAqL1xuICAgIGNsZWFyQnV0dG9uOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgdmFsdWUgb2YgdGhlIGluaXRpYWxseSBzZWxlY3RlZCBjb2xvci5cbiAgICAgKi9cbiAgICB2YWx1ZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgW2B0YWJpbmRleGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMvdGFiaW5kZXgpIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgdGFiaW5kZXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHVzZXIgc2VsZWN0cyBhIG5ldyBjb2xvci5cbiAgICAgKi9cbiAgICB2YWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGJhY2tncm91bmRDb2xvcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKlxuICAgICAqIFJlcHJlc2VudHMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBgaHVlYCwgYHNhdHVyYXRpb25gLCBgdmFsdWVgLCBhbmQgYGFscGhhYCB2YWx1ZXMuXG4gICAgICogVGhlIHZhbHVlcyBhcmUgaW5pdGlhbGx5IHNldCBpbiBgbmdPbkluaXRgIG9yIGluIGBuZ09uQ2hhbmdlc2AgYW5kIGFyZVxuICAgICAqIHVwZGF0ZWQgb24gbW92aW5nIHRoZSBkcmFnIGhhbmRsZSBvciB0aGUgc2xpZGVycy5cbiAgICAgKi9cbiAgICBoc3ZhOiBIU1ZBO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBDb2xvckdyYWRpZW50IG9yIGFueSBvZiBpdHMgY29udGVudCBpcyBmb2N1c2VkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlzRm9jdXNlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWxwaGFTbGlkZXJWYWx1ZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgb3V0cHV0IGZvcm1hdCBvZiB0aGUgQ29sb3JHcmFkaWVudENvbXBvbmVudC5cbiAgICAgKiBUaGUgaW5wdXQgdmFsdWUgbWF5IGJlIGluIGEgZGlmZmVyZW50IGZvcm1hdC4gSG93ZXZlciwgaXQgd2lsbCBiZSBwYXJzZWQgaW50byB0aGUgb3V0cHV0IGBmb3JtYXRgXG4gICAgICogYWZ0ZXIgdGhlIGNvbXBvbmVudCBwcm9jZXNzZXMgaXQuXG4gICAgICpcbiAgICAgKiBUaGUgc3VwcG9ydGVkIHZhbHVlcyBhcmU6XG4gICAgICogKiAoRGVmYXVsdCkgYHJnYmFgXG4gICAgICogKiBgaGV4YFxuICAgICAqL1xuICAgIGZvcm1hdDogT3V0cHV0Rm9ybWF0O1xuICAgIHByaXZhdGUgX3ZhbHVlO1xuICAgIHByaXZhdGUgX3RhYmluZGV4O1xuICAgIHByaXZhdGUgbGlzdGVuZXJzO1xuICAgIHByaXZhdGUgZHluYW1pY1JUTFN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGFscGhhU2xpZGVyO1xuICAgIHByaXZhdGUgZ3JhZGllbnRXcmFwcGVyO1xuICAgIHByaXZhdGUgZHJhZ0hhbmRsZTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGdyYWRpZW50UmVjdDtcbiAgICBjb25zdHJ1Y3Rvcihob3N0OiBFbGVtZW50UmVmLCBuZ1pvbmU6IE5nWm9uZSwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgbG9jYWxpemF0aW9uU2VydmljZTogTG9jYWxpemF0aW9uU2VydmljZSk7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBGb2N1c2VzIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgZm9jdXMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVzZXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlRHJhZ1ByZXNzKGFyZ3M6IEtlbmRvRHJhZ0V2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25IYW5kbGVEcmFnKGFyZ3M6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uSGFuZGxlUmVsZWFzZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjaGFuZ2VQb3NpdGlvbihwb3NpdGlvbjogS2VuZG9EcmFnRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVIdWVTbGlkZXJDaGFuZ2UoaHVlOiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVBbHBoYVNsaWRlckNoYW5nZShhbHBoYTogbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlSW5wdXRzVmFsdWVDaGFuZ2UoY29sb3I6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBVc2VkIGJ5IHRoZSBUZXh0Qm94Q29udGFpbmVyIHRvIGRldGVybWluZSBpZiB0aGUgY29tcG9uZW50IGlzIGVtcHR5LlxuICAgICAqL1xuICAgIGlzRW1wdHkoKTogYm9vbGVhbjtcbiAgICBwcml2YXRlIG5vdGlmeU5nQ2hhbmdlZDtcbiAgICBwcml2YXRlIG5vdGlmeU5nVG91Y2hlZDtcbiAgICBwcml2YXRlIG1vdmVEcmFnSGFuZGxlO1xuICAgIHByaXZhdGUgdXBkYXRlVUk7XG4gICAgcHJpdmF0ZSBoYW5kbGVWYWx1ZUNoYW5nZTtcbiAgICBwcml2YXRlIHNldERyYWdIYW5kbGVFbGVtZW50UG9zaXRpb247XG4gICAgcHJpdmF0ZSBzZXRBbHBoYVNsaWRlckJhY2tncm91bmQ7XG4gICAgcHJpdmF0ZSBhZGRFdmVudExpc3RlbmVycztcbn1cbiJdfQ==