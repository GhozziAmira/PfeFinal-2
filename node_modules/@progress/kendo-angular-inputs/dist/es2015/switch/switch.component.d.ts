/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, Renderer2, EventEmitter, OnInit, OnDestroy, ChangeDetectorRef, NgZone, Injector } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { Subscription } from "rxjs";
/**
 * Represents the [Kendo UI Switch component for Angular]({% slug overview_switch %}).
 */
import * as ɵngcc0 from '@angular/core';
export declare class SwitchComponent implements ControlValueAccessor, OnInit, OnDestroy {
    private renderer;
    private hostElement;
    private localizationService;
    private injector;
    private changeDetector;
    private ngZone;
    /**
     * @hidden
     */
    focusableId: string;
    /**
     * Changes the **On** label so that it can be localized ([see example]({% slug labels_switch %})).
     */
    onLabel: string;
    /**
     * Changes the **Off** label so that it can be localized ([see example]({% slug labels_switch %})).
     */
    offLabel: string;
    /**
     * Sets the current value of the Switch when it is initially displayed.
     */
    checked: boolean;
    /**
     * Determines whether the Switch is disabled ([see example]({% slug disabled_switch %})).
     */
    disabled: boolean;
    /**
     * Determines whether the Switch is in its read-only state ([see example]({% slug readonly_switch %})).
     */
    readonly: boolean;
    /**
     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the Switch.
     */
    tabindex: number;
    /**
     * @hidden
     */
    tabIndex: number;
    /**
     * Fires each time the user focuses the `input` element.
     */
    onFocus: EventEmitter<any>;
    /**
     * Fires each time the `input` element gets blurred.
     */
    onBlur: EventEmitter<any>;
    /**
     * Fires each time the user selects a new value.
     */
    valueChange: EventEmitter<any>;
    wrapper: any;
    direction: string;
    readonly ieClass: boolean;
    readonly ariaDisabled: boolean;
    readonly ariaReadonly: boolean;
    readonly ariaChecked: boolean;
    readonly hostClasses: boolean;
    readonly switchOnClass: boolean;
    readonly switchOffClass: boolean;
    readonly disabledClass: boolean;
    protected localizationChangeSubscription: Subscription;
    protected isFocused: boolean;
    protected control: NgControl;
    constructor(renderer: Renderer2, hostElement: ElementRef, localizationService: LocalizationService, injector: Injector, changeDetector: ChangeDetectorRef, ngZone: NgZone);
    /**
     * @hidden
     */
    readonly onLabelMessage: string;
    /**
     * @hidden
     */
    readonly offLabelMessage: string;
    protected ngChange: Function;
    protected ngTouched: Function;
    protected readonly isEnabled: boolean;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Focuses the Switch.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="switch.focus()">Focus</button>
     *  <kendo-switch #switch></kendo-switch>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    focus(): void;
    /**
     * Blurs the Switch.
     */
    blur(): void;
    /**
     * @hidden
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * @hidden
     */
    handleFocus: () => void;
    /**
     * @hidden
     */
    handleBlur: () => void;
    /**
     * @hidden
     */
    writeValue(value: boolean): void;
    /**
     * @hidden
     */
    registerOnChange(fn: () => any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: () => any): void;
    /**
     * @hidden
     */
    keyDownHandler(e: any): void;
    /**
     * @hidden
     */
    clickHandler(): void;
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    isEmpty(): boolean;
    private changeValue;
    private focused;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SwitchComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SwitchComponent, "kendo-switch", ["kendoSwitch"], {
    "focusableId": "focusableId";
    "checked": "checked";
    "disabled": "disabled";
    "readonly": "readonly";
    "tabindex": "tabindex";
    "tabIndex": "tabIndex";
    "onLabel": "onLabel";
    "offLabel": "offLabel";
}, {
    "onFocus": "focus";
    "onBlur": "blur";
    "valueChange": "valueChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzd2l0Y2guY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztBQVdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMklBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgT25EZXN0cm95LCBDaGFuZ2VEZXRlY3RvclJlZiwgTmdab25lLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gXCJyeGpzXCI7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIFtLZW5kbyBVSSBTd2l0Y2ggY29tcG9uZW50IGZvciBBbmd1bGFyXSh7JSBzbHVnIG92ZXJ2aWV3X3N3aXRjaCAlfSkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFN3aXRjaENvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIGhvc3RFbGVtZW50O1xuICAgIHByaXZhdGUgbG9jYWxpemF0aW9uU2VydmljZTtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGZvY3VzYWJsZUlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgKipPbioqIGxhYmVsIHNvIHRoYXQgaXQgY2FuIGJlIGxvY2FsaXplZCAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGxhYmVsc19zd2l0Y2ggJX0pKS5cbiAgICAgKi9cbiAgICBvbkxhYmVsOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgKipPZmYqKiBsYWJlbCBzbyB0aGF0IGl0IGNhbiBiZSBsb2NhbGl6ZWQgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBsYWJlbHNfc3dpdGNoICV9KSkuXG4gICAgICovXG4gICAgb2ZmTGFiZWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBTd2l0Y2ggd2hlbiBpdCBpcyBpbml0aWFsbHkgZGlzcGxheWVkLlxuICAgICAqL1xuICAgIGNoZWNrZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBTd2l0Y2ggaXMgZGlzYWJsZWQgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBkaXNhYmxlZF9zd2l0Y2ggJX0pKS5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIFN3aXRjaCBpcyBpbiBpdHMgcmVhZC1vbmx5IHN0YXRlIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgcmVhZG9ubHlfc3dpdGNoICV9KSkuXG4gICAgICovXG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBbYHRhYmluZGV4YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy90YWJpbmRleCkgb2YgdGhlIFN3aXRjaC5cbiAgICAgKi9cbiAgICB0YWJpbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB0YWJJbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGVhY2ggdGltZSB0aGUgdXNlciBmb2N1c2VzIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAgICovXG4gICAgb25Gb2N1czogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSBgaW5wdXRgIGVsZW1lbnQgZ2V0cyBibHVycmVkLlxuICAgICAqL1xuICAgIG9uQmx1cjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSB1c2VyIHNlbGVjdHMgYSBuZXcgdmFsdWUuXG4gICAgICovXG4gICAgdmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHdyYXBwZXI6IGFueTtcbiAgICBkaXJlY3Rpb246IHN0cmluZztcbiAgICByZWFkb25seSBpZUNsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGFyaWFEaXNhYmxlZDogYm9vbGVhbjtcbiAgICByZWFkb25seSBhcmlhUmVhZG9ubHk6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgYXJpYUNoZWNrZWQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaG9zdENsYXNzZXM6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgc3dpdGNoT25DbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBzd2l0Y2hPZmZDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBkaXNhYmxlZENsYXNzOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBsb2NhbGl6YXRpb25DaGFuZ2VTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgICBwcm90ZWN0ZWQgaXNGb2N1c2VkOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBjb250cm9sOiBOZ0NvbnRyb2w7XG4gICAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMiwgaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWYsIGxvY2FsaXphdGlvblNlcnZpY2U6IExvY2FsaXphdGlvblNlcnZpY2UsIGluamVjdG9yOiBJbmplY3RvciwgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLCBuZ1pvbmU6IE5nWm9uZSk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IG9uTGFiZWxNZXNzYWdlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IG9mZkxhYmVsTWVzc2FnZTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBuZ0NoYW5nZTogRnVuY3Rpb247XG4gICAgcHJvdGVjdGVkIG5nVG91Y2hlZDogRnVuY3Rpb247XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGlzRW5hYmxlZDogYm9vbGVhbjtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRm9jdXNlcyB0aGUgU3dpdGNoLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIF9AQ29tcG9uZW50KHtcbiAgICAgKiBzZWxlY3RvcjogJ215LWFwcCcsXG4gICAgICogdGVtcGxhdGU6IGBcbiAgICAgKiAgPGJ1dHRvbiAoY2xpY2spPVwic3dpdGNoLmZvY3VzKClcIj5Gb2N1czwvYnV0dG9uPlxuICAgICAqICA8a2VuZG8tc3dpdGNoICNzd2l0Y2g+PC9rZW5kby1zd2l0Y2g+XG4gICAgICogYFxuICAgICAqIH0pXG4gICAgICogY2xhc3MgQXBwQ29tcG9uZW50IHsgfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGZvY3VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQmx1cnMgdGhlIFN3aXRjaC5cbiAgICAgKi9cbiAgICBibHVyKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIENhbGxlZCB3aGVuIHRoZSBzdGF0dXMgb2YgdGhlIGNvbXBvbmVudCBjaGFuZ2VzIHRvIG9yIGZyb20gYGRpc2FibGVkYC5cbiAgICAgKiBEZXBlbmRpbmcgb24gdGhlIHZhbHVlLCBpdCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBhcHByb3ByaWF0ZSBET00gZWxlbWVudC5cbiAgICAgKi9cbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVGb2N1czogKCkgPT4gdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlQmx1cjogKCkgPT4gdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICgpID0+IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBrZXlEb3duSGFuZGxlcihlOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjbGlja0hhbmRsZXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogVXNlZCBieSB0aGUgVGV4dEJveENvbnRhaW5lciB0byBkZXRlcm1pbmUgaWYgdGhlIGNvbXBvbmVudCBpcyBlbXB0eS5cbiAgICAgKi9cbiAgICBpc0VtcHR5KCk6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBjaGFuZ2VWYWx1ZTtcbiAgICBwcml2YXRlIGZvY3VzZWQ7XG59XG4iXX0=