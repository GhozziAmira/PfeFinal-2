/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, EventEmitter, OnDestroy, Renderer2, OnChanges, OnInit, NgZone, ChangeDetectorRef, Injector } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
/**
 * Represents the [Kendo UI TextArea directive for the Inputs components for Angular]({% slug overview_textarea %}).
 * Provides floating labels to `textarea` elements.
 *
 * @example
 * ```ts-no-run
 * <textarea kendoTextArea></textarea>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class TextAreaDirective implements OnInit, OnDestroy, OnChanges, ControlValueAccessor {
    private renderer;
    private element;
    private zone;
    private changeDetector;
    private injector;
    elementClass: boolean;
    autofillClass: boolean;
    direction: string;
    /**
     * Fires each time the textarea value is changed.
     */
    valueChange: EventEmitter<any>;
    /**
     * Specifies if the `textarea` element will resize its height automatically
     * ([see example]({% slug overview_textarea %}#toc-auto-resizing)).
     *
     * @default false
     */
    autoSize: boolean;
    /**
     * Specifies the textarea value.
     */
    value: string;
    /**
     * @hidden
     */
    onFocus: EventEmitter<any>;
    /**
     * @hidden
     */
    onBlur: EventEmitter<any>;
    /**
     * @hidden
     */
    onValueChange: EventEmitter<any>;
    /**
     * @hidden
     */
    autoFillStart: EventEmitter<any>;
    /**
     * @hidden
     */
    autoFillEnd: EventEmitter<any>;
    id: string;
    private listeners;
    private inputSubscription;
    private initialHeight;
    private control;
    private resizeSubscription;
    constructor(renderer: Renderer2, element: ElementRef, zone: NgZone, changeDetector: ChangeDetectorRef, injector: Injector, rtl: boolean);
    /**
     * @hidden
     */
    writeValue(value: any): void;
    /**
     * @hidden
     */
    registerOnChange(fn: () => any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: () => any): void;
    /**
     * @hidden
     */
    setDisabledState(isDisabled: boolean): void;
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    private ngChange;
    private ngTouched;
    private elementValue;
    private setElementProperty;
    private resize;
    private handleInput;
    private handleFocus;
    private handleBlur;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TextAreaDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TextAreaDirective, "textarea[kendoTextArea]", never, {
    "autoSize": "autoSize";
    "value": "value";
}, {
    "valueChange": "valueChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGFyZWEuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbInRleHRhcmVhLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0FBZUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4RUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgUmVuZGVyZXIyLCBPbkNoYW5nZXMsIE9uSW5pdCwgTmdab25lLCBDaGFuZ2VEZXRlY3RvclJlZiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBbS2VuZG8gVUkgVGV4dEFyZWEgZGlyZWN0aXZlIGZvciB0aGUgSW5wdXRzIGNvbXBvbmVudHMgZm9yIEFuZ3VsYXJdKHslIHNsdWcgb3ZlcnZpZXdfdGV4dGFyZWEgJX0pLlxuICogUHJvdmlkZXMgZmxvYXRpbmcgbGFiZWxzIHRvIGB0ZXh0YXJlYWAgZWxlbWVudHMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzLW5vLXJ1blxuICogPHRleHRhcmVhIGtlbmRvVGV4dEFyZWE+PC90ZXh0YXJlYT5cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUZXh0QXJlYURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIGVsZW1lbnRDbGFzczogYm9vbGVhbjtcbiAgICBhdXRvZmlsbENsYXNzOiBib29sZWFuO1xuICAgIGRpcmVjdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGVhY2ggdGltZSB0aGUgdGV4dGFyZWEgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICAgKi9cbiAgICB2YWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGlmIHRoZSBgdGV4dGFyZWFgIGVsZW1lbnQgd2lsbCByZXNpemUgaXRzIGhlaWdodCBhdXRvbWF0aWNhbGx5XG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBvdmVydmlld190ZXh0YXJlYSAlfSN0b2MtYXV0by1yZXNpemluZykpLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBhdXRvU2l6ZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHRleHRhcmVhIHZhbHVlLlxuICAgICAqL1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uRm9jdXM6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbkJsdXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvblZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgYXV0b0ZpbGxTdGFydDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGF1dG9GaWxsRW5kOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBpZDogc3RyaW5nO1xuICAgIHByaXZhdGUgbGlzdGVuZXJzO1xuICAgIHByaXZhdGUgaW5wdXRTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBpbml0aWFsSGVpZ2h0O1xuICAgIHByaXZhdGUgY29udHJvbDtcbiAgICBwcml2YXRlIHJlc2l6ZVN1YnNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIyLCBlbGVtZW50OiBFbGVtZW50UmVmLCB6b25lOiBOZ1pvbmUsIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZiwgaW5qZWN0b3I6IEluamVjdG9yLCBydGw6IGJvb2xlYW4pO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoKSA9PiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IGFueSk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIG5nQ2hhbmdlO1xuICAgIHByaXZhdGUgbmdUb3VjaGVkO1xuICAgIHByaXZhdGUgZWxlbWVudFZhbHVlO1xuICAgIHByaXZhdGUgc2V0RWxlbWVudFByb3BlcnR5O1xuICAgIHByaXZhdGUgcmVzaXplO1xuICAgIHByaXZhdGUgaGFuZGxlSW5wdXQ7XG4gICAgcHJpdmF0ZSBoYW5kbGVGb2N1cztcbiAgICBwcml2YXRlIGhhbmRsZUJsdXI7XG59XG4iXX0=