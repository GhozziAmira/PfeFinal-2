/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, EventEmitter, OnChanges, OnDestroy, Renderer2, NgZone, ChangeDetectorRef, Injector } from '@angular/core';
import { ControlValueAccessor, AbstractControl, NgControl, Validator } from '@angular/forms';
import { IntlService, NumberFormatOptions } from '@progress/kendo-angular-intl';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ArrowDirection } from './arrow-direction';
import { Subscription } from 'rxjs';
/**
 * Represents the [Kendo UI NumericTextBox component for Angular]({% slug overview_numerictextbox %}).
 */
import * as ɵngcc0 from '@angular/core';
export declare class NumericTextBoxComponent implements ControlValueAccessor, OnChanges, OnDestroy, Validator {
    private intl;
    private renderer;
    private localizationService;
    private injector;
    private ngZone;
    private changeDetector;
    private hostElement;
    /**
     * @hidden
     */
    focusableId: string;
    /**
     * Determines whether the NumericTextBox is disabled ([see example]({% slug disabled_numerictextbox %})).
     */
    disabled: boolean;
    /**
     * Determines whether the NumericTextBox is in its read-only state ([see example]({% slug readonly_numerictextbox %})).
     */
    readonly: boolean;
    /**
     * Sets the title of the `input` element of the NumericTextBox.
     */
    title: string;
    /**
     * Specifies whether the value will be auto-corrected based on the minimum and maximum values
     * ([see example]({% slug precision_numerictextbox %})).
     */
    autoCorrect: boolean;
    /**
     * Specifies the number format which is used when the NumericTextBox is not focused
     * ([see example]({% slug formats_numerictextbox %})).
     * If `format` is set to `null` or `undefined`, the default format will be used.
     */
    format: string | NumberFormatOptions | null | undefined;
    /**
     * Specifies the greatest value that is valid
     * ([see example]({% slug precision_numerictextbox %}#toc-value-ranges)).
     */
    max: number;
    /**
     * Specifies the smallest value that is valid
     * ([see example]({% slug precision_numerictextbox %}#toc-value-ranges)).
     */
    min: number;
    /**
     * Specifies the number of decimals that the user can enter when the input is focused
     * ([see example]({% slug precision_numerictextbox %})).
     */
    decimals: number;
    /**
     * Specifies the input placeholder.
     */
    placeholder: string;
    /**
     * Specifies the value that is used to increment or decrement the component value
     * ([see example]({% slug predefinedsteps_numerictextbox %})).
     */
    step: number;
    /**
     * Specifies whether the **Up** and **Down** spin buttons will be rendered
     * ([see example]({% slug spinbuttons_numerictextbox %})).
     */
    spinners: boolean;
    /**
     * Determines whether the built-in minimum or maximum validators are enforced when a form is validated.
     *
     * > The 4.2.0 Angular version introduces the `min` and `max` validation directives. As a result, even if you set `rangeValidation`
     * to `false`, the built-in Angular validators will be executed.
     */
    rangeValidation: boolean;
    /**
     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabindex: number;
    /**
     * @hidden
     */
    tabIndex: number;
    /**
     * Determines whether the whole value will be selected when the NumericTextBox is clicked. Defaults to `true`.
     */
    selectOnFocus: boolean;
    /**
     * Specifies the value of the NumericTextBox
     * ([see example]({% slug formats_numerictextbox %})).
     */
    value: number;
    /**
     * Fires each time the user selects a new value ([see example]({% slug overview_numerictextbox %}#toc-events)).
     */
    valueChange: EventEmitter<any>;
    /**
     * Fires each time the user focuses the `input` element ([see example]({% slug overview_numerictextbox %}#toc-events)).
     */
    onFocus: EventEmitter<any>;
    /**
     * Fires each time the `input` element gets blurred ([see example]({% slug overview_numerictextbox %}#toc-events)).
     */
    onBlur: EventEmitter<any>;
    /**
     * @hidden
     */
    numericInput: ElementRef;
    numericWrap: ElementRef;
    direction: string;
    /**
     * @hidden
     */
    ArrowDirection: any;
    /**
     * @hidden
     */
    arrowDirection: ArrowDirection;
    readonly widgetClasses: boolean;
    protected subscriptions: Subscription;
    protected inputValue: string;
    protected spinTimeout: number;
    protected isFocused: boolean;
    protected minValidateFn: any;
    protected maxValidateFn: any;
    protected numericRegex: RegExp;
    protected _format: string | NumberFormatOptions;
    protected previousSelection: any;
    protected pressedKey: any;
    protected control: NgControl;
    protected isPasted: boolean;
    protected mouseDown: boolean;
    private ngChange;
    private ngTouched;
    private ngValidatorChange;
    constructor(intl: IntlService, renderer: Renderer2, localizationService: LocalizationService, injector: Injector, ngZone: NgZone, changeDetector: ChangeDetectorRef, hostElement: ElementRef);
    ngOnInit(): void;
    /**
     * @hidden
     */
    increasePress: (e: any) => void;
    /**
     * @hidden
     */
    decreasePress: (e: any) => void;
    /**
     * @hidden
     */
    releaseArrow: () => void;
    /**
     * @hidden
     */
    ngOnChanges(changes: any): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    validate(control: AbstractControl): {
        [key: string]: any;
    };
    /**
     * @hidden
     */
    registerOnValidatorChange(fn: Function): void;
    /**
     * @hidden
     */
    writeValue(value: number): void;
    /**
     * @hidden
     */
    registerOnChange(fn: () => any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: () => any): void;
    /**
     * @hidden
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     *
     * @param isDisabled
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * Focuses the NumericTextBox.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="numerictextbox.focus()">Focus NumericTextBox</button>
     *  <kendo-numerictextbox #numerictextbox></kendo-numerictextbox>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    focus(): void;
    /**
     * Blurs the NumericTextBox.
     */
    blur(): void;
    /**
     * Notifies the `NumericTextBoxComponent` that the input value should be changed.
     * Can be used to update the input after setting the component properties directly.
     */
    notifyValueChange(): void;
    /**
     * @hidden
     */
    handlePaste: () => void;
    /**
     * @hidden
     */
    handleInput: () => void;
    /**
     * @hidden
     */
    handleDragEnter: () => void;
    /**
     * @hidden
     */
    handleMouseDown: () => void;
    /**
     * @hidden
     */
    handleFocus: () => void;
    /**
     * @hidden
     */
    handleBlur: () => void;
    /**
     * @hidden
     */
    handleKeyDown: (e: any) => void;
    /**
     * @hidden
     */
    handleWheel: (e: any) => void;
    /**
     * @hidden
     */
    readonly incrementTitle: string;
    /**
     * @hidden
     */
    readonly decrementTitle: string;
    private readonly decimalSeparator;
    private elementValue;
    private focused;
    private readonly hasDecimals;
    private readonly isDisabled;
    private arrowPress;
    private updateValue;
    private replaceNumpadDotValue;
    private isValid;
    private spin;
    private addStep;
    private setSelection;
    private limitValue;
    private limitInputValue;
    private tryPadValue;
    private isInRange;
    private restrictModelValue;
    private restrictDecimals;
    private formatInputValue;
    private formatValue;
    private setInputValue;
    private verifySettings;
    private verifyValue;
    private parseOptions;
    private intlChange;
    private hasTrailingZeros;
    private selectAll;
    private selectCaret;
    private numberOfLeadingZeroes;
    private adjustSignificantChars;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NumericTextBoxComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NumericTextBoxComponent, "kendo-numerictextbox", ["kendoNumericTextBox"], {
    "focusableId": "focusableId";
    "disabled": "disabled";
    "readonly": "readonly";
    "title": "title";
    "autoCorrect": "autoCorrect";
    "decimals": "decimals";
    "step": "step";
    "spinners": "spinners";
    "rangeValidation": "rangeValidation";
    "tabindex": "tabindex";
    "selectOnFocus": "selectOnFocus";
    "value": "value";
    "format": "format";
    "tabIndex": "tabIndex";
    "max": "max";
    "min": "min";
    "placeholder": "placeholder";
}, {
    "valueChange": "valueChange";
    "onFocus": "focus";
    "onBlur": "blur";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtZXJpY3RleHRib3guY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm51bWVyaWN0ZXh0Ym94LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7OztBQWFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNSQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiwgTmdab25lLCBDaGFuZ2VEZXRlY3RvclJlZiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBBYnN0cmFjdENvbnRyb2wsIE5nQ29udHJvbCwgVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgSW50bFNlcnZpY2UsIE51bWJlckZvcm1hdE9wdGlvbnMgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1pbnRsJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IEFycm93RGlyZWN0aW9uIH0gZnJvbSAnLi9hcnJvdy1kaXJlY3Rpb24nO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIFtLZW5kbyBVSSBOdW1lcmljVGV4dEJveCBjb21wb25lbnQgZm9yIEFuZ3VsYXJdKHslIHNsdWcgb3ZlcnZpZXdfbnVtZXJpY3RleHRib3ggJX0pLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOdW1lcmljVGV4dEJveENvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgVmFsaWRhdG9yIHtcbiAgICBwcml2YXRlIGludGw7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIGxvY2FsaXphdGlvblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yO1xuICAgIHByaXZhdGUgaG9zdEVsZW1lbnQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGZvY3VzYWJsZUlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBOdW1lcmljVGV4dEJveCBpcyBkaXNhYmxlZCAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGRpc2FibGVkX251bWVyaWN0ZXh0Ym94ICV9KSkuXG4gICAgICovXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBOdW1lcmljVGV4dEJveCBpcyBpbiBpdHMgcmVhZC1vbmx5IHN0YXRlIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgcmVhZG9ubHlfbnVtZXJpY3RleHRib3ggJX0pKS5cbiAgICAgKi9cbiAgICByZWFkb25seTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0aXRsZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50IG9mIHRoZSBOdW1lcmljVGV4dEJveC5cbiAgICAgKi9cbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSB2YWx1ZSB3aWxsIGJlIGF1dG8tY29ycmVjdGVkIGJhc2VkIG9uIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIHZhbHVlc1xuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgcHJlY2lzaW9uX251bWVyaWN0ZXh0Ym94ICV9KSkuXG4gICAgICovXG4gICAgYXV0b0NvcnJlY3Q6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBudW1iZXIgZm9ybWF0IHdoaWNoIGlzIHVzZWQgd2hlbiB0aGUgTnVtZXJpY1RleHRCb3ggaXMgbm90IGZvY3VzZWRcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGZvcm1hdHNfbnVtZXJpY3RleHRib3ggJX0pKS5cbiAgICAgKiBJZiBgZm9ybWF0YCBpcyBzZXQgdG8gYG51bGxgIG9yIGB1bmRlZmluZWRgLCB0aGUgZGVmYXVsdCBmb3JtYXQgd2lsbCBiZSB1c2VkLlxuICAgICAqL1xuICAgIGZvcm1hdDogc3RyaW5nIHwgTnVtYmVyRm9ybWF0T3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWQ7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBncmVhdGVzdCB2YWx1ZSB0aGF0IGlzIHZhbGlkXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBwcmVjaXNpb25fbnVtZXJpY3RleHRib3ggJX0jdG9jLXZhbHVlLXJhbmdlcykpLlxuICAgICAqL1xuICAgIG1heDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgc21hbGxlc3QgdmFsdWUgdGhhdCBpcyB2YWxpZFxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgcHJlY2lzaW9uX251bWVyaWN0ZXh0Ym94ICV9I3RvYy12YWx1ZS1yYW5nZXMpKS5cbiAgICAgKi9cbiAgICBtaW46IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIG51bWJlciBvZiBkZWNpbWFscyB0aGF0IHRoZSB1c2VyIGNhbiBlbnRlciB3aGVuIHRoZSBpbnB1dCBpcyBmb2N1c2VkXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBwcmVjaXNpb25fbnVtZXJpY3RleHRib3ggJX0pKS5cbiAgICAgKi9cbiAgICBkZWNpbWFsczogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgaW5wdXQgcGxhY2Vob2xkZXIuXG4gICAgICovXG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHZhbHVlIHRoYXQgaXMgdXNlZCB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IHRoZSBjb21wb25lbnQgdmFsdWVcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHByZWRlZmluZWRzdGVwc19udW1lcmljdGV4dGJveCAlfSkpLlxuICAgICAqL1xuICAgIHN0ZXA6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgKipVcCoqIGFuZCAqKkRvd24qKiBzcGluIGJ1dHRvbnMgd2lsbCBiZSByZW5kZXJlZFxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgc3BpbmJ1dHRvbnNfbnVtZXJpY3RleHRib3ggJX0pKS5cbiAgICAgKi9cbiAgICBzcGlubmVyczogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGJ1aWx0LWluIG1pbmltdW0gb3IgbWF4aW11bSB2YWxpZGF0b3JzIGFyZSBlbmZvcmNlZCB3aGVuIGEgZm9ybSBpcyB2YWxpZGF0ZWQuXG4gICAgICpcbiAgICAgKiA+IFRoZSA0LjIuMCBBbmd1bGFyIHZlcnNpb24gaW50cm9kdWNlcyB0aGUgYG1pbmAgYW5kIGBtYXhgIHZhbGlkYXRpb24gZGlyZWN0aXZlcy4gQXMgYSByZXN1bHQsIGV2ZW4gaWYgeW91IHNldCBgcmFuZ2VWYWxpZGF0aW9uYFxuICAgICAqIHRvIGBmYWxzZWAsIHRoZSBidWlsdC1pbiBBbmd1bGFyIHZhbGlkYXRvcnMgd2lsbCBiZSBleGVjdXRlZC5cbiAgICAgKi9cbiAgICByYW5nZVZhbGlkYXRpb246IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBbYHRhYmluZGV4YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy90YWJpbmRleCkgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICB0YWJpbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB0YWJJbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgd2hvbGUgdmFsdWUgd2lsbCBiZSBzZWxlY3RlZCB3aGVuIHRoZSBOdW1lcmljVGV4dEJveCBpcyBjbGlja2VkLiBEZWZhdWx0cyB0byBgdHJ1ZWAuXG4gICAgICovXG4gICAgc2VsZWN0T25Gb2N1czogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHZhbHVlIG9mIHRoZSBOdW1lcmljVGV4dEJveFxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZm9ybWF0c19udW1lcmljdGV4dGJveCAlfSkpLlxuICAgICAqL1xuICAgIHZhbHVlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSB1c2VyIHNlbGVjdHMgYSBuZXcgdmFsdWUgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBvdmVydmlld19udW1lcmljdGV4dGJveCAlfSN0b2MtZXZlbnRzKSkuXG4gICAgICovXG4gICAgdmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGVhY2ggdGltZSB0aGUgdXNlciBmb2N1c2VzIHRoZSBgaW5wdXRgIGVsZW1lbnQgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBvdmVydmlld19udW1lcmljdGV4dGJveCAlfSN0b2MtZXZlbnRzKSkuXG4gICAgICovXG4gICAgb25Gb2N1czogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSBgaW5wdXRgIGVsZW1lbnQgZ2V0cyBibHVycmVkIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgb3ZlcnZpZXdfbnVtZXJpY3RleHRib3ggJX0jdG9jLWV2ZW50cykpLlxuICAgICAqL1xuICAgIG9uQmx1cjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG51bWVyaWNJbnB1dDogRWxlbWVudFJlZjtcbiAgICBudW1lcmljV3JhcDogRWxlbWVudFJlZjtcbiAgICBkaXJlY3Rpb246IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQXJyb3dEaXJlY3Rpb246IGFueTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgYXJyb3dEaXJlY3Rpb246IEFycm93RGlyZWN0aW9uO1xuICAgIHJlYWRvbmx5IHdpZGdldENsYXNzZXM6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbjtcbiAgICBwcm90ZWN0ZWQgaW5wdXRWYWx1ZTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBzcGluVGltZW91dDogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBpc0ZvY3VzZWQ6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIG1pblZhbGlkYXRlRm46IGFueTtcbiAgICBwcm90ZWN0ZWQgbWF4VmFsaWRhdGVGbjogYW55O1xuICAgIHByb3RlY3RlZCBudW1lcmljUmVnZXg6IFJlZ0V4cDtcbiAgICBwcm90ZWN0ZWQgX2Zvcm1hdDogc3RyaW5nIHwgTnVtYmVyRm9ybWF0T3B0aW9ucztcbiAgICBwcm90ZWN0ZWQgcHJldmlvdXNTZWxlY3Rpb246IGFueTtcbiAgICBwcm90ZWN0ZWQgcHJlc3NlZEtleTogYW55O1xuICAgIHByb3RlY3RlZCBjb250cm9sOiBOZ0NvbnRyb2w7XG4gICAgcHJvdGVjdGVkIGlzUGFzdGVkOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBtb3VzZURvd246IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBuZ0NoYW5nZTtcbiAgICBwcml2YXRlIG5nVG91Y2hlZDtcbiAgICBwcml2YXRlIG5nVmFsaWRhdG9yQ2hhbmdlO1xuICAgIGNvbnN0cnVjdG9yKGludGw6IEludGxTZXJ2aWNlLCByZW5kZXJlcjogUmVuZGVyZXIyLCBsb2NhbGl6YXRpb25TZXJ2aWNlOiBMb2NhbGl6YXRpb25TZXJ2aWNlLCBpbmplY3RvcjogSW5qZWN0b3IsIG5nWm9uZTogTmdab25lLCBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGhvc3RFbGVtZW50OiBFbGVtZW50UmVmKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBpbmNyZWFzZVByZXNzOiAoZTogYW55KSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBkZWNyZWFzZVByZXNzOiAoZTogYW55KSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWxlYXNlQXJyb3c6ICgpID0+IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogYW55O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UoZm46IEZ1bmN0aW9uKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKCkgPT4gYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIENhbGxlZCB3aGVuIHRoZSBzdGF0dXMgb2YgdGhlIGNvbXBvbmVudCBjaGFuZ2VzIHRvIG9yIGZyb20gYGRpc2FibGVkYC5cbiAgICAgKiBEZXBlbmRpbmcgb24gdGhlIHZhbHVlLCBpdCBlbmFibGVzIG9yIGRpc2FibGVzIHRoZSBhcHByb3ByaWF0ZSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpc0Rpc2FibGVkXG4gICAgICovXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBGb2N1c2VzIHRoZSBOdW1lcmljVGV4dEJveC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBfQENvbXBvbmVudCh7XG4gICAgICogc2VsZWN0b3I6ICdteS1hcHAnLFxuICAgICAqIHRlbXBsYXRlOiBgXG4gICAgICogIDxidXR0b24gKGNsaWNrKT1cIm51bWVyaWN0ZXh0Ym94LmZvY3VzKClcIj5Gb2N1cyBOdW1lcmljVGV4dEJveDwvYnV0dG9uPlxuICAgICAqICA8a2VuZG8tbnVtZXJpY3RleHRib3ggI251bWVyaWN0ZXh0Ym94Pjwva2VuZG8tbnVtZXJpY3RleHRib3g+XG4gICAgICogYFxuICAgICAqIH0pXG4gICAgICogY2xhc3MgQXBwQ29tcG9uZW50IHsgfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGZvY3VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQmx1cnMgdGhlIE51bWVyaWNUZXh0Qm94LlxuICAgICAqL1xuICAgIGJsdXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBOb3RpZmllcyB0aGUgYE51bWVyaWNUZXh0Qm94Q29tcG9uZW50YCB0aGF0IHRoZSBpbnB1dCB2YWx1ZSBzaG91bGQgYmUgY2hhbmdlZC5cbiAgICAgKiBDYW4gYmUgdXNlZCB0byB1cGRhdGUgdGhlIGlucHV0IGFmdGVyIHNldHRpbmcgdGhlIGNvbXBvbmVudCBwcm9wZXJ0aWVzIGRpcmVjdGx5LlxuICAgICAqL1xuICAgIG5vdGlmeVZhbHVlQ2hhbmdlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZVBhc3RlOiAoKSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVJbnB1dDogKCkgPT4gdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlRHJhZ0VudGVyOiAoKSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVNb3VzZURvd246ICgpID0+IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZUZvY3VzOiAoKSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVCbHVyOiAoKSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVLZXlEb3duOiAoZTogYW55KSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVXaGVlbDogKGU6IGFueSkgPT4gdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW5jcmVtZW50VGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVjcmVtZW50VGl0bGU6IHN0cmluZztcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlY2ltYWxTZXBhcmF0b3I7XG4gICAgcHJpdmF0ZSBlbGVtZW50VmFsdWU7XG4gICAgcHJpdmF0ZSBmb2N1c2VkO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaGFzRGVjaW1hbHM7XG4gICAgcHJpdmF0ZSByZWFkb25seSBpc0Rpc2FibGVkO1xuICAgIHByaXZhdGUgYXJyb3dQcmVzcztcbiAgICBwcml2YXRlIHVwZGF0ZVZhbHVlO1xuICAgIHByaXZhdGUgcmVwbGFjZU51bXBhZERvdFZhbHVlO1xuICAgIHByaXZhdGUgaXNWYWxpZDtcbiAgICBwcml2YXRlIHNwaW47XG4gICAgcHJpdmF0ZSBhZGRTdGVwO1xuICAgIHByaXZhdGUgc2V0U2VsZWN0aW9uO1xuICAgIHByaXZhdGUgbGltaXRWYWx1ZTtcbiAgICBwcml2YXRlIGxpbWl0SW5wdXRWYWx1ZTtcbiAgICBwcml2YXRlIHRyeVBhZFZhbHVlO1xuICAgIHByaXZhdGUgaXNJblJhbmdlO1xuICAgIHByaXZhdGUgcmVzdHJpY3RNb2RlbFZhbHVlO1xuICAgIHByaXZhdGUgcmVzdHJpY3REZWNpbWFscztcbiAgICBwcml2YXRlIGZvcm1hdElucHV0VmFsdWU7XG4gICAgcHJpdmF0ZSBmb3JtYXRWYWx1ZTtcbiAgICBwcml2YXRlIHNldElucHV0VmFsdWU7XG4gICAgcHJpdmF0ZSB2ZXJpZnlTZXR0aW5ncztcbiAgICBwcml2YXRlIHZlcmlmeVZhbHVlO1xuICAgIHByaXZhdGUgcGFyc2VPcHRpb25zO1xuICAgIHByaXZhdGUgaW50bENoYW5nZTtcbiAgICBwcml2YXRlIGhhc1RyYWlsaW5nWmVyb3M7XG4gICAgcHJpdmF0ZSBzZWxlY3RBbGw7XG4gICAgcHJpdmF0ZSBzZWxlY3RDYXJldDtcbiAgICBwcml2YXRlIG51bWJlck9mTGVhZGluZ1plcm9lcztcbiAgICBwcml2YXRlIGFkanVzdFNpZ25pZmljYW50Q2hhcnM7XG59XG4iXX0=