/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, QueryList, OnInit, OnChanges, OnDestroy, Renderer2 } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { IntlService } from '@progress/kendo-angular-intl';
import { TimeListComponent } from './timelist.component';
import { TimePickerDOMService } from './services/dom.service';
import { TimePickerIncrementalSteps } from './models/incremental-steps.model';
import { PickerService } from '../common/picker.service';
/**
 * @hidden
 *
 * Represents the Kendo UI TimeSelector component for Angular.
 */
import * as ɵngcc0 from '@angular/core';
export declare class TimeSelectorComponent implements OnChanges, OnInit, OnDestroy {
    localization: LocalizationService;
    private cdr;
    private element;
    intl: IntlService;
    dom: TimePickerDOMService;
    private zone;
    private renderer;
    private pickerService?;
    accept: ElementRef;
    cancel: ElementRef;
    now: ElementRef;
    timeLists: QueryList<TimeListComponent>;
    timeListWrappers: QueryList<ElementRef>;
    /**
     * @hidden
     */
    componentClass: boolean;
    /**
     * @hidden
     */
    readonly disabledClass: boolean;
    /**
     * Specifies the time format used to display the time list columns.
     */
    format: string;
    /**
     * Specifies the smallest valid time value.
     */
    min: Date;
    /**
     * Specifies the biggest valid time value.
     */
    max: Date;
    /**
     * Determines whether to display the **Cancel** button in the popup.
     */
    cancelButton: boolean;
    /**
     * Determines whether to display the **Set** button in the popup.
     */
    setButton: boolean;
    /**
     * Determines whether to display the **Now** button in the popup.
     *
     * > If the current time is out of range or the incremental step is greater than `1`, the **Now** button will be hidden.
     */
    nowButton: boolean;
    /**
     * Sets or gets the `disabled` property of the TimeSelector and determines whether the component is active.
     */
    disabled: boolean;
    /**
     * Configures the incremental steps of the TimeSelector.
     *
     * The available options are:
     * - `hour: Number`&mdash;Controls the incremental step of the hour value.
     * - `minute: Number`&mdash;Controls the incremental step of the minute value.
     * - `second: Number`&mdash;Controls the incremental step of the second value.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <kendo-timeselector format="HH:mm:ss" [steps]="steps"></kendo-timeselector>
     * `
     * })
     * class AppComponent {
     *   public steps = { hour: 2, minute: 15, second: 15 };
     * }
     * ```
     *
     * > If the incremental step is greater than `1`, the **Now** button will be hidden.
     */
    steps: TimePickerIncrementalSteps;
    /**
     * Specifies the value of the TimeSelector component.
     */
    value: Date;
    /**
     * Fires each time the user selects a new value.
     */
    valueChange: EventEmitter<Date>;
    /**
     * Fires each time the user cancels the selected value.
     */
    valueReject: EventEmitter<any>;
    dateFormatParts: any[];
    isActive: boolean;
    showNowButton: boolean;
    current: Date;
    activeListIndex: number;
    private mergeValue;
    private snapTime;
    private _activeListIndex;
    private _current;
    private _steps;
    private subscriptions;
    private domEvents;
    constructor(localization: LocalizationService, cdr: ChangeDetectorRef, element: ElementRef, intl: IntlService, dom: TimePickerDOMService, zone: NgZone, renderer: Renderer2, pickerService?: PickerService);
    /**
     * @hidden
     */
    ngOnInit(): void;
    /**
     * @hidden
     */
    ngOnChanges(_: any): void;
    ngOnDestroy(): void;
    /**
     * Focuses the TimeSelector component.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="timeselector.focus()">Focus time picker</button>
     *  <kendo-timeselector #timeselector></kendo-timeselector>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    focus(): void;
    /**
     * Blurs the TimeSelector component.
     */
    blur(): void;
    /**
     * @hidden
     */
    handleAccept(): void;
    /**
     * @hidden
     */
    handleNow(): void;
    /**
     * @hidden
     */
    handleReject(): void;
    /**
     * @hidden
     */
    handleFocus(args: any): void;
    /**
     * @hidden
     */
    handleListFocus(args: any): void;
    /**
     * @hidden
     */
    handleBlur(args: any): void;
    /**
     * @hidden
     */
    containsElement(element: any): boolean;
    partStep(part: any): number;
    private init;
    private focusList;
    private handleChange;
    private hasActiveButton;
    private hasSteps;
    private intlChange;
    private bindEvents;
    private handleKeydown;
    private emitBlur;
    private emitFocus;
    private listIndex;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TimeSelectorComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TimeSelectorComponent, "kendo-timeselector", ["kendo-timeselector"], {
    "format": "format";
    "min": "min";
    "max": "max";
    "cancelButton": "cancelButton";
    "setButton": "setButton";
    "nowButton": "nowButton";
    "disabled": "disabled";
    "value": "value";
    "steps": "steps";
}, {
    "valueChange": "valueChange";
    "valueReject": "valueReject";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXNlbGVjdG9yLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0aW1lc2VsZWN0b3IuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBLQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgUXVlcnlMaXN0LCBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IEludGxTZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItaW50bCc7XG5pbXBvcnQgeyBUaW1lTGlzdENvbXBvbmVudCB9IGZyb20gJy4vdGltZWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IFRpbWVQaWNrZXJET01TZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9kb20uc2VydmljZSc7XG5pbXBvcnQgeyBUaW1lUGlja2VySW5jcmVtZW50YWxTdGVwcyB9IGZyb20gJy4vbW9kZWxzL2luY3JlbWVudGFsLXN0ZXBzLm1vZGVsJztcbmltcG9ydCB7IFBpY2tlclNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vcGlja2VyLnNlcnZpY2UnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKlxuICogUmVwcmVzZW50cyB0aGUgS2VuZG8gVUkgVGltZVNlbGVjdG9yIGNvbXBvbmVudCBmb3IgQW5ndWxhci5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGltZVNlbGVjdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlO1xuICAgIHByaXZhdGUgY2RyO1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICBpbnRsOiBJbnRsU2VydmljZTtcbiAgICBkb206IFRpbWVQaWNrZXJET01TZXJ2aWNlO1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgcGlja2VyU2VydmljZT87XG4gICAgYWNjZXB0OiBFbGVtZW50UmVmO1xuICAgIGNhbmNlbDogRWxlbWVudFJlZjtcbiAgICBub3c6IEVsZW1lbnRSZWY7XG4gICAgdGltZUxpc3RzOiBRdWVyeUxpc3Q8VGltZUxpc3RDb21wb25lbnQ+O1xuICAgIHRpbWVMaXN0V3JhcHBlcnM6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY29tcG9uZW50Q2xhc3M6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRpc2FibGVkQ2xhc3M6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB0aW1lIGZvcm1hdCB1c2VkIHRvIGRpc3BsYXkgdGhlIHRpbWUgbGlzdCBjb2x1bW5zLlxuICAgICAqL1xuICAgIGZvcm1hdDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgc21hbGxlc3QgdmFsaWQgdGltZSB2YWx1ZS5cbiAgICAgKi9cbiAgICBtaW46IERhdGU7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBiaWdnZXN0IHZhbGlkIHRpbWUgdmFsdWUuXG4gICAgICovXG4gICAgbWF4OiBEYXRlO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0byBkaXNwbGF5IHRoZSAqKkNhbmNlbCoqIGJ1dHRvbiBpbiB0aGUgcG9wdXAuXG4gICAgICovXG4gICAgY2FuY2VsQnV0dG9uOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0byBkaXNwbGF5IHRoZSAqKlNldCoqIGJ1dHRvbiBpbiB0aGUgcG9wdXAuXG4gICAgICovXG4gICAgc2V0QnV0dG9uOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0byBkaXNwbGF5IHRoZSAqKk5vdyoqIGJ1dHRvbiBpbiB0aGUgcG9wdXAuXG4gICAgICpcbiAgICAgKiA+IElmIHRoZSBjdXJyZW50IHRpbWUgaXMgb3V0IG9mIHJhbmdlIG9yIHRoZSBpbmNyZW1lbnRhbCBzdGVwIGlzIGdyZWF0ZXIgdGhhbiBgMWAsIHRoZSAqKk5vdyoqIGJ1dHRvbiB3aWxsIGJlIGhpZGRlbi5cbiAgICAgKi9cbiAgICBub3dCdXR0b246IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0cyBvciBnZXRzIHRoZSBgZGlzYWJsZWRgIHByb3BlcnR5IG9mIHRoZSBUaW1lU2VsZWN0b3IgYW5kIGRldGVybWluZXMgd2hldGhlciB0aGUgY29tcG9uZW50IGlzIGFjdGl2ZS5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBDb25maWd1cmVzIHRoZSBpbmNyZW1lbnRhbCBzdGVwcyBvZiB0aGUgVGltZVNlbGVjdG9yLlxuICAgICAqXG4gICAgICogVGhlIGF2YWlsYWJsZSBvcHRpb25zIGFyZTpcbiAgICAgKiAtIGBob3VyOiBOdW1iZXJgJm1kYXNoO0NvbnRyb2xzIHRoZSBpbmNyZW1lbnRhbCBzdGVwIG9mIHRoZSBob3VyIHZhbHVlLlxuICAgICAqIC0gYG1pbnV0ZTogTnVtYmVyYCZtZGFzaDtDb250cm9scyB0aGUgaW5jcmVtZW50YWwgc3RlcCBvZiB0aGUgbWludXRlIHZhbHVlLlxuICAgICAqIC0gYHNlY29uZDogTnVtYmVyYCZtZGFzaDtDb250cm9scyB0aGUgaW5jcmVtZW50YWwgc3RlcCBvZiB0aGUgc2Vjb25kIHZhbHVlLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIF9AQ29tcG9uZW50KHtcbiAgICAgKiBzZWxlY3RvcjogJ215LWFwcCcsXG4gICAgICogdGVtcGxhdGU6IGBcbiAgICAgKiAgPGtlbmRvLXRpbWVzZWxlY3RvciBmb3JtYXQ9XCJISDptbTpzc1wiIFtzdGVwc109XCJzdGVwc1wiPjwva2VuZG8tdGltZXNlbGVjdG9yPlxuICAgICAqIGBcbiAgICAgKiB9KVxuICAgICAqIGNsYXNzIEFwcENvbXBvbmVudCB7XG4gICAgICogICBwdWJsaWMgc3RlcHMgPSB7IGhvdXI6IDIsIG1pbnV0ZTogMTUsIHNlY29uZDogMTUgfTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiA+IElmIHRoZSBpbmNyZW1lbnRhbCBzdGVwIGlzIGdyZWF0ZXIgdGhhbiBgMWAsIHRoZSAqKk5vdyoqIGJ1dHRvbiB3aWxsIGJlIGhpZGRlbi5cbiAgICAgKi9cbiAgICBzdGVwczogVGltZVBpY2tlckluY3JlbWVudGFsU3RlcHM7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB2YWx1ZSBvZiB0aGUgVGltZVNlbGVjdG9yIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICB2YWx1ZTogRGF0ZTtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHVzZXIgc2VsZWN0cyBhIG5ldyB2YWx1ZS5cbiAgICAgKi9cbiAgICB2YWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPERhdGU+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGVhY2ggdGltZSB0aGUgdXNlciBjYW5jZWxzIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICB2YWx1ZVJlamVjdDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZGF0ZUZvcm1hdFBhcnRzOiBhbnlbXTtcbiAgICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgICBzaG93Tm93QnV0dG9uOiBib29sZWFuO1xuICAgIGN1cnJlbnQ6IERhdGU7XG4gICAgYWN0aXZlTGlzdEluZGV4OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBtZXJnZVZhbHVlO1xuICAgIHByaXZhdGUgc25hcFRpbWU7XG4gICAgcHJpdmF0ZSBfYWN0aXZlTGlzdEluZGV4O1xuICAgIHByaXZhdGUgX2N1cnJlbnQ7XG4gICAgcHJpdmF0ZSBfc3RlcHM7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xuICAgIHByaXZhdGUgZG9tRXZlbnRzO1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgZWxlbWVudDogRWxlbWVudFJlZiwgaW50bDogSW50bFNlcnZpY2UsIGRvbTogVGltZVBpY2tlckRPTVNlcnZpY2UsIHpvbmU6IE5nWm9uZSwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcGlja2VyU2VydmljZT86IFBpY2tlclNlcnZpY2UpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhfOiBhbnkpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRm9jdXNlcyB0aGUgVGltZVNlbGVjdG9yIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBfQENvbXBvbmVudCh7XG4gICAgICogc2VsZWN0b3I6ICdteS1hcHAnLFxuICAgICAqIHRlbXBsYXRlOiBgXG4gICAgICogIDxidXR0b24gKGNsaWNrKT1cInRpbWVzZWxlY3Rvci5mb2N1cygpXCI+Rm9jdXMgdGltZSBwaWNrZXI8L2J1dHRvbj5cbiAgICAgKiAgPGtlbmRvLXRpbWVzZWxlY3RvciAjdGltZXNlbGVjdG9yPjwva2VuZG8tdGltZXNlbGVjdG9yPlxuICAgICAqIGBcbiAgICAgKiB9KVxuICAgICAqIGNsYXNzIEFwcENvbXBvbmVudCB7IH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEJsdXJzIHRoZSBUaW1lU2VsZWN0b3IgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGJsdXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlQWNjZXB0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZU5vdygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVSZWplY3QoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlRm9jdXMoYXJnczogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlTGlzdEZvY3VzKGFyZ3M6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZUJsdXIoYXJnczogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY29udGFpbnNFbGVtZW50KGVsZW1lbnQ6IGFueSk6IGJvb2xlYW47XG4gICAgcGFydFN0ZXAocGFydDogYW55KTogbnVtYmVyO1xuICAgIHByaXZhdGUgaW5pdDtcbiAgICBwcml2YXRlIGZvY3VzTGlzdDtcbiAgICBwcml2YXRlIGhhbmRsZUNoYW5nZTtcbiAgICBwcml2YXRlIGhhc0FjdGl2ZUJ1dHRvbjtcbiAgICBwcml2YXRlIGhhc1N0ZXBzO1xuICAgIHByaXZhdGUgaW50bENoYW5nZTtcbiAgICBwcml2YXRlIGJpbmRFdmVudHM7XG4gICAgcHJpdmF0ZSBoYW5kbGVLZXlkb3duO1xuICAgIHByaXZhdGUgZW1pdEJsdXI7XG4gICAgcHJpdmF0ZSBlbWl0Rm9jdXM7XG4gICAgcHJpdmF0ZSBsaXN0SW5kZXg7XG59XG4iXX0=