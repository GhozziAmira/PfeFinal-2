/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, Renderer2, AfterViewChecked, AfterViewInit, TemplateRef } from '@angular/core';
import { IntlService } from '@progress/kendo-angular-intl';
import { BusViewService } from './services/bus-view.service';
import { CalendarDOMService } from './services/dom.service';
import { CalendarView } from './models/view.type';
import { CalendarViewEnum } from './models/view.enum';
import { ViewService } from './models/view-service.interface';
import { VirtualizationComponent } from '../virtualization/virtualization.component';
import { PageAction, ScrollAction } from '../virtualization/services/scroller.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class NavigationComponent implements OnChanges, OnDestroy, AfterViewInit, AfterViewChecked {
    private bus;
    private dom;
    private intl;
    private cdr;
    private renderer;
    activeView: CalendarViewEnum;
    min: Date;
    max: Date;
    focusedDate: Date;
    templateRef: TemplateRef<any>;
    valueChange: EventEmitter<Date>;
    pageChange: EventEmitter<any>;
    virtualization: VirtualizationComponent;
    list: ElementRef;
    readonly getComponentClass: boolean;
    activeViewValue: CalendarView;
    service: ViewService;
    dates: Date[];
    style: any;
    take: number;
    skip: number;
    total: number;
    itemHeight: number;
    topOffset: number;
    bottomOffset: number;
    maxViewHeight: number;
    private indexToScroll;
    private intlSubscription;
    constructor(bus: BusViewService, dom: CalendarDOMService, intl: IntlService, cdr: ChangeDetectorRef, renderer: Renderer2);
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    onPageChange({ skip }: PageAction): void;
    scrollChange({ offset }: ScrollAction): void;
    handleDateChange(args: any): void;
    private getTake;
    private intlChange;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NavigationComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NavigationComponent, "kendo-calendar-navigation", never, {
    "min": "min";
    "max": "max";
    "focusedDate": "focusedDate";
    "activeView": "activeView";
    "templateRef": "templateRef";
}, {
    "valueChange": "valueChange";
    "pageChange": "pageChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmF2aWdhdGlvbi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBSZW5kZXJlcjIsIEFmdGVyVmlld0NoZWNrZWQsIEFmdGVyVmlld0luaXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJbnRsU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWludGwnO1xuaW1wb3J0IHsgQnVzVmlld1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2J1cy12aWV3LnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2FsZW5kYXJET01TZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9kb20uc2VydmljZSc7XG5pbXBvcnQgeyBDYWxlbmRhclZpZXcgfSBmcm9tICcuL21vZGVscy92aWV3LnR5cGUnO1xuaW1wb3J0IHsgQ2FsZW5kYXJWaWV3RW51bSB9IGZyb20gJy4vbW9kZWxzL3ZpZXcuZW51bSc7XG5pbXBvcnQgeyBWaWV3U2VydmljZSB9IGZyb20gJy4vbW9kZWxzL3ZpZXctc2VydmljZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVmlydHVhbGl6YXRpb25Db21wb25lbnQgfSBmcm9tICcuLi92aXJ0dWFsaXphdGlvbi92aXJ0dWFsaXphdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgUGFnZUFjdGlvbiwgU2Nyb2xsQWN0aW9uIH0gZnJvbSAnLi4vdmlydHVhbGl6YXRpb24vc2VydmljZXMvc2Nyb2xsZXIuc2VydmljZSc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmF2aWdhdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95LCBBZnRlclZpZXdJbml0LCBBZnRlclZpZXdDaGVja2VkIHtcbiAgICBwcml2YXRlIGJ1cztcbiAgICBwcml2YXRlIGRvbTtcbiAgICBwcml2YXRlIGludGw7XG4gICAgcHJpdmF0ZSBjZHI7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBhY3RpdmVWaWV3OiBDYWxlbmRhclZpZXdFbnVtO1xuICAgIG1pbjogRGF0ZTtcbiAgICBtYXg6IERhdGU7XG4gICAgZm9jdXNlZERhdGU6IERhdGU7XG4gICAgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgdmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICBwYWdlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB2aXJ0dWFsaXphdGlvbjogVmlydHVhbGl6YXRpb25Db21wb25lbnQ7XG4gICAgbGlzdDogRWxlbWVudFJlZjtcbiAgICByZWFkb25seSBnZXRDb21wb25lbnRDbGFzczogYm9vbGVhbjtcbiAgICBhY3RpdmVWaWV3VmFsdWU6IENhbGVuZGFyVmlldztcbiAgICBzZXJ2aWNlOiBWaWV3U2VydmljZTtcbiAgICBkYXRlczogRGF0ZVtdO1xuICAgIHN0eWxlOiBhbnk7XG4gICAgdGFrZTogbnVtYmVyO1xuICAgIHNraXA6IG51bWJlcjtcbiAgICB0b3RhbDogbnVtYmVyO1xuICAgIGl0ZW1IZWlnaHQ6IG51bWJlcjtcbiAgICB0b3BPZmZzZXQ6IG51bWJlcjtcbiAgICBib3R0b21PZmZzZXQ6IG51bWJlcjtcbiAgICBtYXhWaWV3SGVpZ2h0OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBpbmRleFRvU2Nyb2xsO1xuICAgIHByaXZhdGUgaW50bFN1YnNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihidXM6IEJ1c1ZpZXdTZXJ2aWNlLCBkb206IENhbGVuZGFyRE9NU2VydmljZSwgaW50bDogSW50bFNlcnZpY2UsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogYW55KTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIG9uUGFnZUNoYW5nZSh7IHNraXAgfTogUGFnZUFjdGlvbik6IHZvaWQ7XG4gICAgc2Nyb2xsQ2hhbmdlKHsgb2Zmc2V0IH06IFNjcm9sbEFjdGlvbik6IHZvaWQ7XG4gICAgaGFuZGxlRGF0ZUNoYW5nZShhcmdzOiBhbnkpOiB2b2lkO1xuICAgIHByaXZhdGUgZ2V0VGFrZTtcbiAgICBwcml2YXRlIGludGxDaGFuZ2U7XG59XG4iXX0=