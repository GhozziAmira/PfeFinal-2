/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { IntlService } from '@progress/kendo-angular-intl';
import { Action } from '../models/navigation-action.enum';
import { CellContext } from '../models/cell-context.interface';
import { ViewService } from '../models/view-service.interface';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class MonthViewService implements ViewService {
    private _intlService;
    constructor(_intlService: IntlService);
    addToDate(min: Date, skip: number): Date;
    datesList(start: Date, count: number): Date[];
    data(options: any): CellContext[][];
    isEqual(candidate?: Date, expected?: Date): boolean;
    isInArray(date: Date, dates: Date[]): boolean;
    isInRange(candidate: Date, min: Date, max: Date): boolean;
    beginningOfPeriod(date: Date): Date;
    isRangeStart(value: Date): boolean;
    move(value: Date, action: Action): Date;
    cellTitle(value: Date): string;
    navigationTitle(value?: Date): string;
    title(current: Date): string;
    rowLength(prependCell?: boolean): number;
    skip(value: Date, min: Date): number;
    total(min: Date, max: Date): number;
    value(current: Date): string;
    viewDate(date: Date, max: Date, viewsCount?: number): Date;
    isWeekend(date: Date): boolean;
    private abbrMonthNames;
    private normalize;
    private wideMonthNames;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MonthViewService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MonthViewService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGgtdmlldy5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbIm1vbnRoLXZpZXcuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUFXQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBJbnRsU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWludGwnO1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnLi4vbW9kZWxzL25hdmlnYXRpb24tYWN0aW9uLmVudW0nO1xuaW1wb3J0IHsgQ2VsbENvbnRleHQgfSBmcm9tICcuLi9tb2RlbHMvY2VsbC1jb250ZXh0LmludGVyZmFjZSc7XG5pbXBvcnQgeyBWaWV3U2VydmljZSB9IGZyb20gJy4uL21vZGVscy92aWV3LXNlcnZpY2UuaW50ZXJmYWNlJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNb250aFZpZXdTZXJ2aWNlIGltcGxlbWVudHMgVmlld1NlcnZpY2Uge1xuICAgIHByaXZhdGUgX2ludGxTZXJ2aWNlO1xuICAgIGNvbnN0cnVjdG9yKF9pbnRsU2VydmljZTogSW50bFNlcnZpY2UpO1xuICAgIGFkZFRvRGF0ZShtaW46IERhdGUsIHNraXA6IG51bWJlcik6IERhdGU7XG4gICAgZGF0ZXNMaXN0KHN0YXJ0OiBEYXRlLCBjb3VudDogbnVtYmVyKTogRGF0ZVtdO1xuICAgIGRhdGEob3B0aW9uczogYW55KTogQ2VsbENvbnRleHRbXVtdO1xuICAgIGlzRXF1YWwoY2FuZGlkYXRlPzogRGF0ZSwgZXhwZWN0ZWQ/OiBEYXRlKTogYm9vbGVhbjtcbiAgICBpc0luQXJyYXkoZGF0ZTogRGF0ZSwgZGF0ZXM6IERhdGVbXSk6IGJvb2xlYW47XG4gICAgaXNJblJhbmdlKGNhbmRpZGF0ZTogRGF0ZSwgbWluOiBEYXRlLCBtYXg6IERhdGUpOiBib29sZWFuO1xuICAgIGJlZ2lubmluZ09mUGVyaW9kKGRhdGU6IERhdGUpOiBEYXRlO1xuICAgIGlzUmFuZ2VTdGFydCh2YWx1ZTogRGF0ZSk6IGJvb2xlYW47XG4gICAgbW92ZSh2YWx1ZTogRGF0ZSwgYWN0aW9uOiBBY3Rpb24pOiBEYXRlO1xuICAgIGNlbGxUaXRsZSh2YWx1ZTogRGF0ZSk6IHN0cmluZztcbiAgICBuYXZpZ2F0aW9uVGl0bGUodmFsdWU/OiBEYXRlKTogc3RyaW5nO1xuICAgIHRpdGxlKGN1cnJlbnQ6IERhdGUpOiBzdHJpbmc7XG4gICAgcm93TGVuZ3RoKHByZXBlbmRDZWxsPzogYm9vbGVhbik6IG51bWJlcjtcbiAgICBza2lwKHZhbHVlOiBEYXRlLCBtaW46IERhdGUpOiBudW1iZXI7XG4gICAgdG90YWwobWluOiBEYXRlLCBtYXg6IERhdGUpOiBudW1iZXI7XG4gICAgdmFsdWUoY3VycmVudDogRGF0ZSk6IHN0cmluZztcbiAgICB2aWV3RGF0ZShkYXRlOiBEYXRlLCBtYXg6IERhdGUsIHZpZXdzQ291bnQ/OiBudW1iZXIpOiBEYXRlO1xuICAgIGlzV2Vla2VuZChkYXRlOiBEYXRlKTogYm9vbGVhbjtcbiAgICBwcml2YXRlIGFiYnJNb250aE5hbWVzO1xuICAgIHByaXZhdGUgbm9ybWFsaXplO1xuICAgIHByaXZhdGUgd2lkZU1vbnRoTmFtZXM7XG59XG4iXX0=