/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { BehaviorSubject } from 'rxjs';
import { DateInputComponent } from '../dateinput/dateinput.component';
import { DateRangePopupComponent } from './date-range-popup.component';
import { SelectionRangeEnd } from '../calendar/models/selection-range-end.type';
import { SelectionRange } from '../calendar/models/selection-range.interface';
/**
 * A service that handles the communication between the components that are placed inside the DateRangeComponent.
 * For example, the start and end `DateInput` and `DateRangePopup` components.
 */
import * as ɵngcc0 from '@angular/core';
export declare class DateRangeService {
    /**
     * An Observable instance that notifies when the `activeRangeEnd` state is changed.
     */
    activeRangeEnd$: BehaviorSubject<SelectionRangeEnd>;
    /**
     * An Observable instance that notifies when the `focusedDate` is changed.
     */
    focusedDate$: BehaviorSubject<Date>;
    /**
     * An Observable instance that notifies when the end `DateInput` component is changed.
     * For example, when a new end `DateInput` is attached or when the old one is detached.
     */
    endInput$: BehaviorSubject<DateInputComponent>;
    /**
     * An Observable instance that notifies when the start `DateInput` component is changed.
     * For example, when a new start `DateInput` is attached or the old one is detached.
     */
    startInput$: BehaviorSubject<DateInputComponent>;
    /**
     * An Observable instance that notifies when the `DateRangePopup` component is changed.
     */
    dateRangePopup$: BehaviorSubject<DateRangePopupComponent>;
    /**
     * An Observable instance that notifies when the state of the selection range is changed.
     */
    range$: BehaviorSubject<SelectionRange>;
    /**
     * Gets the current `activeRangeEnd` value.
     */
    readonly activeRangeEnd: SelectionRangeEnd;
    /**
     * Gets the current `focusedDate` value.
     */
    readonly focusedDate: Date;
    /**
     * Gets the `min` range value.
     * The `min` value is extracted from the `start` DateInput value or the `min` value of the Calendar.
     */
    readonly min: Date;
    /**
     * Gets the `max` range value.
     * The `max` value is extracted from the `end` DateInput value or the `max` value of the Calendar.
     */
    readonly max: Date;
    /**
     * Gets the current `selectionRange` value.
     */
    readonly selectionRange: SelectionRange;
    /**
     * Activates the registered `DateRangePopup` component.
     * The method opens the popup and focuses the calendar.
     */
    activatePopup(): void;
    /**
     * Deactivates the registered `DateRangePopup` component.
     * The method closes the popup.
     */
    deactivatePopup(): void;
    /**
     * @hidden
     *
     * Deactivates the registered `DateRangePopup` component and fires the `cancel` event.
     * The method closes the popup.
     */
    cancelPopup(): void;
    /**
     * Completes all observables to mitigate possible memory leaks.
     * Calls the method when a component that uses it is destroyed.
     */
    destroy(): void;
    /**
     * Returns `true` when an active component that is placed inside the `DateRangeComponent` is detected.
     * For example, the opened popup or the focused DateInput.
     *
     * @returns `true` if an active component is present.
     */
    hasActiveComponent(): boolean;
    /**
     * Registers a new start `DateInput` component. Notifies all `startInput$` listeners.
     */
    registerStartInput(startInput: DateInputComponent): void;
    /**
     * Registers a new end `DateInput` component. Notifies all `endInput$` listeners.
     */
    registerEndInput(endInput: DateInputComponent): void;
    /**
     * Registers a new `DateRangePopup` component. Notifies all `dateRangePopup$` listeners.
     */
    registerPopup(dateRangePopup: DateRangePopupComponent): void;
    /**
     * Updates the `activeRangeEnd` value. Notifies all `activeRangeEnd$` listeners.
     */
    setActiveRangeEnd(activeRange: SelectionRangeEnd): void;
    /**
     * Updates the focused date. Notifies all `focusedDate$` listeners.
     */
    setFocusedDate(value: Date): void;
    /**
     * Updates the selection range. Notifies all `range$` listeners.
     */
    setRange(range?: SelectionRange): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DateRangeService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DateRangeService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1yYW5nZS5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImRhdGUtcmFuZ2Uuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7OztBQWFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNHQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRGF0ZUlucHV0Q29tcG9uZW50IH0gZnJvbSAnLi4vZGF0ZWlucHV0L2RhdGVpbnB1dC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF0ZVJhbmdlUG9wdXBDb21wb25lbnQgfSBmcm9tICcuL2RhdGUtcmFuZ2UtcG9wdXAuY29tcG9uZW50JztcbmltcG9ydCB7IFNlbGVjdGlvblJhbmdlRW5kIH0gZnJvbSAnLi4vY2FsZW5kYXIvbW9kZWxzL3NlbGVjdGlvbi1yYW5nZS1lbmQudHlwZSc7XG5pbXBvcnQgeyBTZWxlY3Rpb25SYW5nZSB9IGZyb20gJy4uL2NhbGVuZGFyL21vZGVscy9zZWxlY3Rpb24tcmFuZ2UuaW50ZXJmYWNlJztcbi8qKlxuICogQSBzZXJ2aWNlIHRoYXQgaGFuZGxlcyB0aGUgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIHRoZSBjb21wb25lbnRzIHRoYXQgYXJlIHBsYWNlZCBpbnNpZGUgdGhlIERhdGVSYW5nZUNvbXBvbmVudC5cbiAqIEZvciBleGFtcGxlLCB0aGUgc3RhcnQgYW5kIGVuZCBgRGF0ZUlucHV0YCBhbmQgYERhdGVSYW5nZVBvcHVwYCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEYXRlUmFuZ2VTZXJ2aWNlIHtcbiAgICAvKipcbiAgICAgKiBBbiBPYnNlcnZhYmxlIGluc3RhbmNlIHRoYXQgbm90aWZpZXMgd2hlbiB0aGUgYGFjdGl2ZVJhbmdlRW5kYCBzdGF0ZSBpcyBjaGFuZ2VkLlxuICAgICAqL1xuICAgIGFjdGl2ZVJhbmdlRW5kJDogQmVoYXZpb3JTdWJqZWN0PFNlbGVjdGlvblJhbmdlRW5kPjtcbiAgICAvKipcbiAgICAgKiBBbiBPYnNlcnZhYmxlIGluc3RhbmNlIHRoYXQgbm90aWZpZXMgd2hlbiB0aGUgYGZvY3VzZWREYXRlYCBpcyBjaGFuZ2VkLlxuICAgICAqL1xuICAgIGZvY3VzZWREYXRlJDogQmVoYXZpb3JTdWJqZWN0PERhdGU+O1xuICAgIC8qKlxuICAgICAqIEFuIE9ic2VydmFibGUgaW5zdGFuY2UgdGhhdCBub3RpZmllcyB3aGVuIHRoZSBlbmQgYERhdGVJbnB1dGAgY29tcG9uZW50IGlzIGNoYW5nZWQuXG4gICAgICogRm9yIGV4YW1wbGUsIHdoZW4gYSBuZXcgZW5kIGBEYXRlSW5wdXRgIGlzIGF0dGFjaGVkIG9yIHdoZW4gdGhlIG9sZCBvbmUgaXMgZGV0YWNoZWQuXG4gICAgICovXG4gICAgZW5kSW5wdXQkOiBCZWhhdmlvclN1YmplY3Q8RGF0ZUlucHV0Q29tcG9uZW50PjtcbiAgICAvKipcbiAgICAgKiBBbiBPYnNlcnZhYmxlIGluc3RhbmNlIHRoYXQgbm90aWZpZXMgd2hlbiB0aGUgc3RhcnQgYERhdGVJbnB1dGAgY29tcG9uZW50IGlzIGNoYW5nZWQuXG4gICAgICogRm9yIGV4YW1wbGUsIHdoZW4gYSBuZXcgc3RhcnQgYERhdGVJbnB1dGAgaXMgYXR0YWNoZWQgb3IgdGhlIG9sZCBvbmUgaXMgZGV0YWNoZWQuXG4gICAgICovXG4gICAgc3RhcnRJbnB1dCQ6IEJlaGF2aW9yU3ViamVjdDxEYXRlSW5wdXRDb21wb25lbnQ+O1xuICAgIC8qKlxuICAgICAqIEFuIE9ic2VydmFibGUgaW5zdGFuY2UgdGhhdCBub3RpZmllcyB3aGVuIHRoZSBgRGF0ZVJhbmdlUG9wdXBgIGNvbXBvbmVudCBpcyBjaGFuZ2VkLlxuICAgICAqL1xuICAgIGRhdGVSYW5nZVBvcHVwJDogQmVoYXZpb3JTdWJqZWN0PERhdGVSYW5nZVBvcHVwQ29tcG9uZW50PjtcbiAgICAvKipcbiAgICAgKiBBbiBPYnNlcnZhYmxlIGluc3RhbmNlIHRoYXQgbm90aWZpZXMgd2hlbiB0aGUgc3RhdGUgb2YgdGhlIHNlbGVjdGlvbiByYW5nZSBpcyBjaGFuZ2VkLlxuICAgICAqL1xuICAgIHJhbmdlJDogQmVoYXZpb3JTdWJqZWN0PFNlbGVjdGlvblJhbmdlPjtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50IGBhY3RpdmVSYW5nZUVuZGAgdmFsdWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWN0aXZlUmFuZ2VFbmQ6IFNlbGVjdGlvblJhbmdlRW5kO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgYGZvY3VzZWREYXRlYCB2YWx1ZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBmb2N1c2VkRGF0ZTogRGF0ZTtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBgbWluYCByYW5nZSB2YWx1ZS5cbiAgICAgKiBUaGUgYG1pbmAgdmFsdWUgaXMgZXh0cmFjdGVkIGZyb20gdGhlIGBzdGFydGAgRGF0ZUlucHV0IHZhbHVlIG9yIHRoZSBgbWluYCB2YWx1ZSBvZiB0aGUgQ2FsZW5kYXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbWluOiBEYXRlO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGBtYXhgIHJhbmdlIHZhbHVlLlxuICAgICAqIFRoZSBgbWF4YCB2YWx1ZSBpcyBleHRyYWN0ZWQgZnJvbSB0aGUgYGVuZGAgRGF0ZUlucHV0IHZhbHVlIG9yIHRoZSBgbWF4YCB2YWx1ZSBvZiB0aGUgQ2FsZW5kYXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbWF4OiBEYXRlO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgYHNlbGVjdGlvblJhbmdlYCB2YWx1ZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBzZWxlY3Rpb25SYW5nZTogU2VsZWN0aW9uUmFuZ2U7XG4gICAgLyoqXG4gICAgICogQWN0aXZhdGVzIHRoZSByZWdpc3RlcmVkIGBEYXRlUmFuZ2VQb3B1cGAgY29tcG9uZW50LlxuICAgICAqIFRoZSBtZXRob2Qgb3BlbnMgdGhlIHBvcHVwIGFuZCBmb2N1c2VzIHRoZSBjYWxlbmRhci5cbiAgICAgKi9cbiAgICBhY3RpdmF0ZVBvcHVwKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRGVhY3RpdmF0ZXMgdGhlIHJlZ2lzdGVyZWQgYERhdGVSYW5nZVBvcHVwYCBjb21wb25lbnQuXG4gICAgICogVGhlIG1ldGhvZCBjbG9zZXMgdGhlIHBvcHVwLlxuICAgICAqL1xuICAgIGRlYWN0aXZhdGVQb3B1cCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKlxuICAgICAqIERlYWN0aXZhdGVzIHRoZSByZWdpc3RlcmVkIGBEYXRlUmFuZ2VQb3B1cGAgY29tcG9uZW50IGFuZCBmaXJlcyB0aGUgYGNhbmNlbGAgZXZlbnQuXG4gICAgICogVGhlIG1ldGhvZCBjbG9zZXMgdGhlIHBvcHVwLlxuICAgICAqL1xuICAgIGNhbmNlbFBvcHVwKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ29tcGxldGVzIGFsbCBvYnNlcnZhYmxlcyB0byBtaXRpZ2F0ZSBwb3NzaWJsZSBtZW1vcnkgbGVha3MuXG4gICAgICogQ2FsbHMgdGhlIG1ldGhvZCB3aGVuIGEgY29tcG9uZW50IHRoYXQgdXNlcyBpdCBpcyBkZXN0cm95ZWQuXG4gICAgICovXG4gICAgZGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIHdoZW4gYW4gYWN0aXZlIGNvbXBvbmVudCB0aGF0IGlzIHBsYWNlZCBpbnNpZGUgdGhlIGBEYXRlUmFuZ2VDb21wb25lbnRgIGlzIGRldGVjdGVkLlxuICAgICAqIEZvciBleGFtcGxlLCB0aGUgb3BlbmVkIHBvcHVwIG9yIHRoZSBmb2N1c2VkIERhdGVJbnB1dC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiBhbiBhY3RpdmUgY29tcG9uZW50IGlzIHByZXNlbnQuXG4gICAgICovXG4gICAgaGFzQWN0aXZlQ29tcG9uZW50KCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgbmV3IHN0YXJ0IGBEYXRlSW5wdXRgIGNvbXBvbmVudC4gTm90aWZpZXMgYWxsIGBzdGFydElucHV0JGAgbGlzdGVuZXJzLlxuICAgICAqL1xuICAgIHJlZ2lzdGVyU3RhcnRJbnB1dChzdGFydElucHV0OiBEYXRlSW5wdXRDb21wb25lbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIG5ldyBlbmQgYERhdGVJbnB1dGAgY29tcG9uZW50LiBOb3RpZmllcyBhbGwgYGVuZElucHV0JGAgbGlzdGVuZXJzLlxuICAgICAqL1xuICAgIHJlZ2lzdGVyRW5kSW5wdXQoZW5kSW5wdXQ6IERhdGVJbnB1dENvbXBvbmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgbmV3IGBEYXRlUmFuZ2VQb3B1cGAgY29tcG9uZW50LiBOb3RpZmllcyBhbGwgYGRhdGVSYW5nZVBvcHVwJGAgbGlzdGVuZXJzLlxuICAgICAqL1xuICAgIHJlZ2lzdGVyUG9wdXAoZGF0ZVJhbmdlUG9wdXA6IERhdGVSYW5nZVBvcHVwQ29tcG9uZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBgYWN0aXZlUmFuZ2VFbmRgIHZhbHVlLiBOb3RpZmllcyBhbGwgYGFjdGl2ZVJhbmdlRW5kJGAgbGlzdGVuZXJzLlxuICAgICAqL1xuICAgIHNldEFjdGl2ZVJhbmdlRW5kKGFjdGl2ZVJhbmdlOiBTZWxlY3Rpb25SYW5nZUVuZCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgZm9jdXNlZCBkYXRlLiBOb3RpZmllcyBhbGwgYGZvY3VzZWREYXRlJGAgbGlzdGVuZXJzLlxuICAgICAqL1xuICAgIHNldEZvY3VzZWREYXRlKHZhbHVlOiBEYXRlKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBzZWxlY3Rpb24gcmFuZ2UuIE5vdGlmaWVzIGFsbCBgcmFuZ2UkYCBsaXN0ZW5lcnMuXG4gICAgICovXG4gICAgc2V0UmFuZ2UocmFuZ2U/OiBTZWxlY3Rpb25SYW5nZSk6IHZvaWQ7XG59XG4iXX0=