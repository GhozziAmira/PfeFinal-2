/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, OnDestroy, ChangeDetectorRef, EventEmitter, NgZone, OnInit, SimpleChanges, OnChanges } from '@angular/core';
import { ControlValueAccessor, Validator, AbstractControl, ValidationErrors } from '@angular/forms';
import { Day } from '@progress/kendo-date-math';
import { PopupService } from '@progress/kendo-angular-popup';
import { IntlService } from '@progress/kendo-angular-intl';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { PickerService } from '../common/picker.service';
import { DisabledDatesService } from '../calendar/services/disabled-dates.service';
import { CalendarComponent } from '../calendar/calendar.component';
import { TimeSelectorComponent } from '../timepicker/timeselector.component';
import { DateInputComponent } from '../dateinput/dateinput.component';
import { PreventableEvent } from '../preventable-event';
import { PopupSettings } from '../popup-settings.model';
import { DateInputFormatPlaceholder } from '../dateinput/models/format-placeholder.model';
import { DateInputIncrementalSteps } from '../dateinput/models/incremental-steps.model';
import { DateTimePickerActiveTab } from './models/active-tab.type';
import { CellTemplateDirective } from '../calendar/templates/cell-template.directive';
import { MonthCellTemplateDirective } from '../calendar/templates/month-cell-template.directive';
import { YearCellTemplateDirective } from '../calendar/templates/year-cell-template.directive';
import { DecadeCellTemplateDirective } from '../calendar/templates/decade-cell-template.directive';
import { CenturyCellTemplateDirective } from '../calendar/templates/century-cell-template.directive';
import { WeekNumberCellTemplateDirective } from '../calendar/templates/weeknumber-cell-template.directive';
import { HeaderTitleTemplateDirective } from '../calendar/templates/header-title-template.directive';
/**
 * Represents the [Kendo UI DateTimePicker component for Angular]({% slug overview_datetimepicker %}).
 */
import * as ɵngcc0 from '@angular/core';
export declare class DateTimePickerComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor, Validator {
    private popupService;
    private intl;
    private cdr;
    private pickerService;
    private ngZone;
    private host;
    private touchEnabled;
    localization: LocalizationService;
    private disabledDatesService;
    /**
     * @hidden
     */
    hostClasses: boolean;
    /**
     * @hidden
     */
    wrapper: ElementRef<HTMLSpanElement>;
    /**
     * @hidden
     */
    readonly input: DateInputComponent;
    /**
     * @hidden
     */
    readonly calendar: CalendarComponent;
    /**
     * @hidden
     */
    readonly timeSelector: TimeSelectorComponent;
    /**
     * Specifies the value of the DateTimePicker component.
     *
     * > The `value` has to be a valid [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.
     */
    value: Date;
    /**
     * Specifies the date format for displaying the input value
     * ([see example]({% slug formats_datetimepicker %})).
     */
    format: string;
    /**
     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the DateTimePicker.
     */
    tabindex: number;
    /**
     * Sets the dates of the DateTimePicker that will be disabled
     * ([see example]({% slug disabled_dates_datetimepicker %})).
     */
    disabledDates: ((date: Date) => boolean) | Date[] | Day[];
    /**
     * Configures the popup settings of the DateTimePicker
     * ([see example]({% slug datetimepicker_popup_options %}#toc-customizing-the-popup)).
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `appendTo: 'root' | 'component' | ViewContainerRef`&mdash;Controls the popup container. By default, the popup will be appended to the root component.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     */
    popupSettings: PopupSettings;
    /**
     * @hidden
     */
    focusableId: string;
    /**
     * Sets the title of the input element of the DateTimePicker.
     */
    title: string;
    /**
     * Sets or gets the `disabled` property of the DateTimePicker and determines whether the component is active
     * ([see example]({% slug disabled_datetimepicker %})).
     */
    disabled: boolean;
    /**
     * Sets the read-only state of the DateTimePicker
     * ([see example]({% slug readonly_datetimepicker %})).
     */
    readonly: boolean;
    /**
     * Determines whether to display the **Cancel** button in the popup
     * ([see example]({% slug datetimepicker_popup_options %}#toc-toggling-the-cancel-button)).
     */
    cancelButton: boolean;
    /**
     * Defines the descriptions of the format sections in the input field
     * ([see example]({% slug placeholders_datetimepicker %}#toc-format-sections-description)).
     */
    formatPlaceholder: DateInputFormatPlaceholder;
    /**
     * Specifies the hint which is displayed by the DateTimePicker when its value is `null`
     * ([see example]({% slug placeholders_datetimepicker %}#toc-text-hints)).
     */
    placeholder: string;
    /**
     * Configures the incremental steps of the DateInput and the popup component of the TimePicker
     * ([see example]({% slug incrementalsteps_datetimepicker %})).
     */
    steps: DateInputIncrementalSteps;
    /**
     * Specifies the focused date of the popup Calendar
     * ([see example]({% slug datetimepicker_calendar_options %}#toc-focused-dates)).
     */
    focusedDate: Date;
    /**
     * Determines whether to display a week number column in the `month` view of the popup Calendar
     * ([see example]({% slug datetimepicker_calendar_options %}#toc-week-number-column)).
     */
    weekNumber: boolean;
    /**
     * Specifies the smallest valid date.
     * The Calendar will not display dates before this value.
     * If the `min` value of the Calendar is selected, the TimePicker will not display
     * time entries before the specified time portion of this value
     * ([see example]({% slug dateranges_datetimepicker %})).
     */
    min: Date;
    /**
     * Specifies the biggest valid date.
     * The Calendar will not display dates after this value.
     * If the `max` value of the Calendar is selected, the TimePicker will not display
     * time entries after the specified time portion of this value
     * ([see example]({% slug dateranges_datetimepicker %})).
     */
    max: Date;
    /**
     * Determines whether the built-in min or max validators are enforced when validating a form
     * ([see example]({% slug dateranges_datetimepicker %}#toc-forms-range-validation)).
     */
    rangeValidation: boolean;
    /**
     * Determines whether the built-in validator for disabled
     * date ranges is enforced when validating a form
     * ([see example]({% slug disabled_dates_datetimepicker %}#toc-validation)).
     */
    disabledDatesValidation: boolean;
    /**
     * Fires each time the user selects a new value.
     * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).
     */
    valueChange: EventEmitter<Date>;
    /**
     * Fires each time the popup is about to open.
     * This event is preventable. If you cancel the event by setting `event.preventDefault()`, the popup will remain closed.
     * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).
     */
    open: EventEmitter<PreventableEvent>;
    /**
     * Fires each time the popup is about to close.
     * This event is preventable. If you cancel the event by setting `event.preventDefault()`, the popup will remain open.
     * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).
     */
    close: EventEmitter<PreventableEvent>;
    /**
     * Fires each time the user focuses the component.
     * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).
     */
    onFocus: EventEmitter<any>;
    /**
     * Fires each time the user blurs the component.
     * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).
     */
    onBlur: EventEmitter<any>;
    /**
     * Indicates whether the component is currently open.
     */
    readonly isOpen: boolean;
    /**
     * Indicates whether the component or its popup content is focused.
     */
    isActive: boolean;
    /**
     * Sets the active tab on opening the popup
     * ([see example]({% slug datetimepicker_popup_options %}#toc-setting-the-default-tab)).
     */
    defaultTab: DateTimePickerActiveTab;
    /**
     * @hidden
     */
    readonly tabSwitchTransition: string;
    /**
     * @hidden
     *
     * Indicates whether the Calendar will be disabled.
     * The inactive tab component gets disabled and becomes inaccessible on tab click.
     */
    readonly disableCalendar: boolean;
    /**
     * @hidden
     *
     * Indicates whether the TimeSelector will be disabled.
     * The inactive tab component gets disabled and becomes inaccessible on tab click.
     */
    readonly disableTimeSelector: boolean;
    /**
     * @hidden
     *
     * Controls whether the Calendar or the TimeSelector will be displayed.
     */
    activeTab: DateTimePickerActiveTab;
    /**
     * @hidden
     *
     * Specifies the stripped time-related format that is used in the TimeSelector.
     * Updates each time the `format` property value changes.
     */
    timeSelectorFormat: string;
    /**
     * @hidden
     */
    timeSelectorMin: Date;
    /**
     * @hidden
     */
    timeSelectorMax: Date;
    /**
     * @hidden
     */
    calendarValue: Date;
    /**
     * @hidden
     */
    calendarMin: Date;
    /**
     * @hidden
     */
    calendarMax: Date;
    /**
     * @hidden
     */
    cellTemplate: CellTemplateDirective;
    /**
     * @hidden
     */
    monthCellTemplate: MonthCellTemplateDirective;
    /**
     * @hidden
     */
    yearCellTemplate: YearCellTemplateDirective;
    /**
     * @hidden
     */
    decadeCellTemplate: DecadeCellTemplateDirective;
    /**
     * @hidden
     */
    centuryCellTemplate: CenturyCellTemplateDirective;
    /**
     * @hidden
     */
    weekNumberTemplate: WeekNumberCellTemplateDirective;
    /**
     * @hidden
     */
    headerTitleTemplate: HeaderTitleTemplateDirective;
    private readonly activeTabComponent;
    private readonly appendTo;
    private container;
    private popupTemplate;
    private popupRef;
    private _popupSettings;
    private _value;
    private _format;
    private _tabindex;
    private _defaultTab;
    private _min;
    private _max;
    private _disabledDates;
    private onControlTouched;
    private onControlChange;
    private onValidatorChange;
    private minValidateFn;
    private maxValidateFn;
    private disabledDatesValidateFn;
    private subscriptions;
    constructor(popupService: PopupService, intl: IntlService, cdr: ChangeDetectorRef, pickerService: PickerService, ngZone: NgZone, host: ElementRef<HTMLElement>, touchEnabled: boolean, localization: LocalizationService, disabledDatesService: DisabledDatesService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * * If the popup is closed, focuses the DateTimePicker input.
     * * If the popup is open, the focus is moved to its content.
     */
    focus(): void;
    /**
     * Blurs the DateTimePicker.
     */
    blur(): void;
    /**
     * Toggles the visibility of the popup. If you use the `toggle` method to show or hide the popup,
     * the `open` and `close` events do not fire.
     * ([more information and example]({% slug overview_datetimepicker %}#toc-methods-and-events)).
     *
     * @param show - The state of the popup.
     */
    toggle(show?: boolean): void;
    /**
     * @hidden
     */
    writeValue(value: Date): void;
    /**
     * @hidden
     */
    registerOnChange(fn: any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: any): void;
    /**
     * @hidden
     */
    setDisabledState(disabled: boolean): void;
    /**
     * @hidden
     */
    validate(control: AbstractControl): ValidationErrors;
    /**
     * @hidden
     */
    registerOnValidatorChange(fn: Function): void;
    /**
     * @hidden
     *
     * Used by the TextBoxContainer to determine if the floating label will render in the input.
     */
    isEmpty(): boolean;
    /**
     * @hidden
     */
    handleIconClick(event: MouseEvent): void;
    /**
     * @hidden
     */
    handleFocus(): void;
    /**
     * @hidden
     */
    handleBlur(event?: FocusEvent): void;
    /**
     * @hidden
     */
    changeActiveTab(tab: DateTimePickerActiveTab): void;
    /**
     * @hidden
     */
    handleTabChangeTransitionEnd(dateTimeSelector: HTMLElement, event: TransitionEvent): void;
    /**
     * @hidden
     */
    handleAccept(): void;
    /**
     * @hidden
     */
    handleCancel(): void;
    /**
     * @hidden
     */
    handleInputValueChange(value: Date): void;
    /**
     * @hidden
     */
    handleCalendarValueChange(): void;
    /**
     * @hidden
     */
    handleKeyDown(event: KeyboardEvent): void;
    /**
     * @hidden
     */
    handleTabOut(event: KeyboardEvent): void;
    /**
     * @hidden
     */
    handleBackTabOut(event: KeyboardEvent): void;
    /**
     * @hidden
     *
     * Prevents the diversion of the focus from the currently active element in the component.
     */
    preventMouseDown(event: MouseEvent): void;
    private verifyValue;
    private verifyMinMaxRange;
    /**
     * Extracts the time slots and the literals that are not preceded by date parts
     * and concatenates the resulting parts into a string.
     * If the provided format value does not contain any time parts,
     * returns the designated format of the default popup component of the TimePicker.
     */
    private getTimeSelectorFormat;
    /**
     * The filter expression that filters out all format parts
     * except for `hour`, `minute`, `second`, `dayperiod`, and specific literals.
     * Literals will be left only if they are not preceded by date parts.
     */
    private timeFormatPartFilter;
    private togglePopup;
    private switchFocus;
    private openPopup;
    private closePopup;
    private handleValueChange;
    /**
     * Indicates whether the focus target is part of this component,
     * that is, whether the focus target is inside the component wrapper or in the popup.
     */
    private focusTargetInComponent;
    private setTimeSelectorMinMax;
    private setCalendarValue;
    /**
     * If the popup is available, runs a popup change detection.
     */
    private detectPopupChanges;
    /**
     * Depending on the predicate `runInZone` value that is passed,
     * runs the provided function either in the Angular or in the current zone.
     */
    private run;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DateTimePickerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DateTimePickerComponent, "kendo-datetimepicker", ["kendo-datetimepicker"], {
    "focusableId": "focusableId";
    "title": "title";
    "disabled": "disabled";
    "readonly": "readonly";
    "cancelButton": "cancelButton";
    "weekNumber": "weekNumber";
    "rangeValidation": "rangeValidation";
    "disabledDatesValidation": "disabledDatesValidation";
    "value": "value";
    "format": "format";
    "tabindex": "tabindex";
    "disabledDates": "disabledDates";
    "popupSettings": "popupSettings";
    "min": "min";
    "max": "max";
    "defaultTab": "defaultTab";
    "formatPlaceholder": "formatPlaceholder";
    "placeholder": "placeholder";
    "steps": "steps";
    "focusedDate": "focusedDate";
}, {
    "valueChange": "valueChange";
    "open": "open";
    "close": "close";
    "onFocus": "focus";
    "onBlur": "blur";
}, ["cellTemplate", "monthCellTemplate", "yearCellTemplate", "decadeCellTemplate", "centuryCellTemplate", "weekNumberTemplate", "headerTitleTemplate"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXRpbWVwaWNrZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImRhdGV0aW1lcGlja2VyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBOEJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUErWkEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBPbkRlc3Ryb3ksIENoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBWYWxpZGF0b3IsIEFic3RyYWN0Q29udHJvbCwgVmFsaWRhdGlvbkVycm9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IERheSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kYXRlLW1hdGgnO1xuaW1wb3J0IHsgUG9wdXBTZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItcG9wdXAnO1xuaW1wb3J0IHsgSW50bFNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1pbnRsJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IFBpY2tlclNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vcGlja2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGlzYWJsZWREYXRlc1NlcnZpY2UgfSBmcm9tICcuLi9jYWxlbmRhci9zZXJ2aWNlcy9kaXNhYmxlZC1kYXRlcy5zZXJ2aWNlJztcbmltcG9ydCB7IENhbGVuZGFyQ29tcG9uZW50IH0gZnJvbSAnLi4vY2FsZW5kYXIvY2FsZW5kYXIuY29tcG9uZW50JztcbmltcG9ydCB7IFRpbWVTZWxlY3RvckNvbXBvbmVudCB9IGZyb20gJy4uL3RpbWVwaWNrZXIvdGltZXNlbGVjdG9yLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRlSW5wdXRDb21wb25lbnQgfSBmcm9tICcuLi9kYXRlaW5wdXQvZGF0ZWlucHV0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQcmV2ZW50YWJsZUV2ZW50IH0gZnJvbSAnLi4vcHJldmVudGFibGUtZXZlbnQnO1xuaW1wb3J0IHsgUG9wdXBTZXR0aW5ncyB9IGZyb20gJy4uL3BvcHVwLXNldHRpbmdzLm1vZGVsJztcbmltcG9ydCB7IERhdGVJbnB1dEZvcm1hdFBsYWNlaG9sZGVyIH0gZnJvbSAnLi4vZGF0ZWlucHV0L21vZGVscy9mb3JtYXQtcGxhY2Vob2xkZXIubW9kZWwnO1xuaW1wb3J0IHsgRGF0ZUlucHV0SW5jcmVtZW50YWxTdGVwcyB9IGZyb20gJy4uL2RhdGVpbnB1dC9tb2RlbHMvaW5jcmVtZW50YWwtc3RlcHMubW9kZWwnO1xuaW1wb3J0IHsgRGF0ZVRpbWVQaWNrZXJBY3RpdmVUYWIgfSBmcm9tICcuL21vZGVscy9hY3RpdmUtdGFiLnR5cGUnO1xuaW1wb3J0IHsgQ2VsbFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi4vY2FsZW5kYXIvdGVtcGxhdGVzL2NlbGwtdGVtcGxhdGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IE1vbnRoQ2VsbFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi4vY2FsZW5kYXIvdGVtcGxhdGVzL21vbnRoLWNlbGwtdGVtcGxhdGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IFllYXJDZWxsVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuLi9jYWxlbmRhci90ZW1wbGF0ZXMveWVhci1jZWxsLXRlbXBsYXRlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBEZWNhZGVDZWxsVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuLi9jYWxlbmRhci90ZW1wbGF0ZXMvZGVjYWRlLWNlbGwtdGVtcGxhdGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IENlbnR1cnlDZWxsVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuLi9jYWxlbmRhci90ZW1wbGF0ZXMvY2VudHVyeS1jZWxsLXRlbXBsYXRlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBXZWVrTnVtYmVyQ2VsbFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi4vY2FsZW5kYXIvdGVtcGxhdGVzL3dlZWtudW1iZXItY2VsbC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSGVhZGVyVGl0bGVUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4uL2NhbGVuZGFyL3RlbXBsYXRlcy9oZWFkZXItdGl0bGUtdGVtcGxhdGUuZGlyZWN0aXZlJztcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgW0tlbmRvIFVJIERhdGVUaW1lUGlja2VyIGNvbXBvbmVudCBmb3IgQW5ndWxhcl0oeyUgc2x1ZyBvdmVydmlld19kYXRldGltZXBpY2tlciAlfSkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERhdGVUaW1lUGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB7XG4gICAgcHJpdmF0ZSBwb3B1cFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBpbnRsO1xuICAgIHByaXZhdGUgY2RyO1xuICAgIHByaXZhdGUgcGlja2VyU2VydmljZTtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICBwcml2YXRlIGhvc3Q7XG4gICAgcHJpdmF0ZSB0b3VjaEVuYWJsZWQ7XG4gICAgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlO1xuICAgIHByaXZhdGUgZGlzYWJsZWREYXRlc1NlcnZpY2U7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhvc3RDbGFzc2VzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB3cmFwcGVyOiBFbGVtZW50UmVmPEhUTUxTcGFuRWxlbWVudD47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlucHV0OiBEYXRlSW5wdXRDb21wb25lbnQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNhbGVuZGFyOiBDYWxlbmRhckNvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGltZVNlbGVjdG9yOiBUaW1lU2VsZWN0b3JDb21wb25lbnQ7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB2YWx1ZSBvZiB0aGUgRGF0ZVRpbWVQaWNrZXIgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogPiBUaGUgYHZhbHVlYCBoYXMgdG8gYmUgYSB2YWxpZCBbSmF2YVNjcmlwdCBgRGF0ZWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGUpIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHZhbHVlOiBEYXRlO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgZGF0ZSBmb3JtYXQgZm9yIGRpc3BsYXlpbmcgdGhlIGlucHV0IHZhbHVlXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBmb3JtYXRzX2RhdGV0aW1lcGlja2VyICV9KSkuXG4gICAgICovXG4gICAgZm9ybWF0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBbYHRhYmluZGV4YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy90YWJpbmRleCkgb2YgdGhlIERhdGVUaW1lUGlja2VyLlxuICAgICAqL1xuICAgIHRhYmluZGV4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZGF0ZXMgb2YgdGhlIERhdGVUaW1lUGlja2VyIHRoYXQgd2lsbCBiZSBkaXNhYmxlZFxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZGlzYWJsZWRfZGF0ZXNfZGF0ZXRpbWVwaWNrZXIgJX0pKS5cbiAgICAgKi9cbiAgICBkaXNhYmxlZERhdGVzOiAoKGRhdGU6IERhdGUpID0+IGJvb2xlYW4pIHwgRGF0ZVtdIHwgRGF5W107XG4gICAgLyoqXG4gICAgICogQ29uZmlndXJlcyB0aGUgcG9wdXAgc2V0dGluZ3Mgb2YgdGhlIERhdGVUaW1lUGlja2VyXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBkYXRldGltZXBpY2tlcl9wb3B1cF9vcHRpb25zICV9I3RvYy1jdXN0b21pemluZy10aGUtcG9wdXApKS5cbiAgICAgKlxuICAgICAqIFRoZSBhdmFpbGFibGUgb3B0aW9ucyBhcmU6XG4gICAgICogLSBgYW5pbWF0ZTogQm9vbGVhbmAmbWRhc2g7Q29udHJvbHMgdGhlIHBvcHVwIGFuaW1hdGlvbi4gQnkgZGVmYXVsdCwgdGhlIG9wZW4gYW5kIGNsb3NlIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQuXG4gICAgICogLSBgYXBwZW5kVG86ICdyb290JyB8ICdjb21wb25lbnQnIHwgVmlld0NvbnRhaW5lclJlZmAmbWRhc2g7Q29udHJvbHMgdGhlIHBvcHVwIGNvbnRhaW5lci4gQnkgZGVmYXVsdCwgdGhlIHBvcHVwIHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIHJvb3QgY29tcG9uZW50LlxuICAgICAqIC0gYHBvcHVwQ2xhc3M6IFN0cmluZ2AmbWRhc2g7U3BlY2lmaWVzIGEgbGlzdCBvZiBDU1MgY2xhc3NlcyB0aGF0IGFyZSB1c2VkIHRvIHN0eWxlIHRoZSBwb3B1cC5cbiAgICAgKi9cbiAgICBwb3B1cFNldHRpbmdzOiBQb3B1cFNldHRpbmdzO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBmb2N1c2FibGVJZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRpdGxlIG9mIHRoZSBpbnB1dCBlbGVtZW50IG9mIHRoZSBEYXRlVGltZVBpY2tlci5cbiAgICAgKi9cbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgb3IgZ2V0cyB0aGUgYGRpc2FibGVkYCBwcm9wZXJ0eSBvZiB0aGUgRGF0ZVRpbWVQaWNrZXIgYW5kIGRldGVybWluZXMgd2hldGhlciB0aGUgY29tcG9uZW50IGlzIGFjdGl2ZVxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZGlzYWJsZWRfZGF0ZXRpbWVwaWNrZXIgJX0pKS5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSByZWFkLW9ubHkgc3RhdGUgb2YgdGhlIERhdGVUaW1lUGlja2VyXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyByZWFkb25seV9kYXRldGltZXBpY2tlciAlfSkpLlxuICAgICAqL1xuICAgIHJlYWRvbmx5OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0byBkaXNwbGF5IHRoZSAqKkNhbmNlbCoqIGJ1dHRvbiBpbiB0aGUgcG9wdXBcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGRhdGV0aW1lcGlja2VyX3BvcHVwX29wdGlvbnMgJX0jdG9jLXRvZ2dsaW5nLXRoZS1jYW5jZWwtYnV0dG9uKSkuXG4gICAgICovXG4gICAgY2FuY2VsQnV0dG9uOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGRlc2NyaXB0aW9ucyBvZiB0aGUgZm9ybWF0IHNlY3Rpb25zIGluIHRoZSBpbnB1dCBmaWVsZFxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgcGxhY2Vob2xkZXJzX2RhdGV0aW1lcGlja2VyICV9I3RvYy1mb3JtYXQtc2VjdGlvbnMtZGVzY3JpcHRpb24pKS5cbiAgICAgKi9cbiAgICBmb3JtYXRQbGFjZWhvbGRlcjogRGF0ZUlucHV0Rm9ybWF0UGxhY2Vob2xkZXI7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBoaW50IHdoaWNoIGlzIGRpc3BsYXllZCBieSB0aGUgRGF0ZVRpbWVQaWNrZXIgd2hlbiBpdHMgdmFsdWUgaXMgYG51bGxgXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBwbGFjZWhvbGRlcnNfZGF0ZXRpbWVwaWNrZXIgJX0jdG9jLXRleHQtaGludHMpKS5cbiAgICAgKi9cbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyZXMgdGhlIGluY3JlbWVudGFsIHN0ZXBzIG9mIHRoZSBEYXRlSW5wdXQgYW5kIHRoZSBwb3B1cCBjb21wb25lbnQgb2YgdGhlIFRpbWVQaWNrZXJcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGluY3JlbWVudGFsc3RlcHNfZGF0ZXRpbWVwaWNrZXIgJX0pKS5cbiAgICAgKi9cbiAgICBzdGVwczogRGF0ZUlucHV0SW5jcmVtZW50YWxTdGVwcztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGZvY3VzZWQgZGF0ZSBvZiB0aGUgcG9wdXAgQ2FsZW5kYXJcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGRhdGV0aW1lcGlja2VyX2NhbGVuZGFyX29wdGlvbnMgJX0jdG9jLWZvY3VzZWQtZGF0ZXMpKS5cbiAgICAgKi9cbiAgICBmb2N1c2VkRGF0ZTogRGF0ZTtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdG8gZGlzcGxheSBhIHdlZWsgbnVtYmVyIGNvbHVtbiBpbiB0aGUgYG1vbnRoYCB2aWV3IG9mIHRoZSBwb3B1cCBDYWxlbmRhclxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZGF0ZXRpbWVwaWNrZXJfY2FsZW5kYXJfb3B0aW9ucyAlfSN0b2Mtd2Vlay1udW1iZXItY29sdW1uKSkuXG4gICAgICovXG4gICAgd2Vla051bWJlcjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHNtYWxsZXN0IHZhbGlkIGRhdGUuXG4gICAgICogVGhlIENhbGVuZGFyIHdpbGwgbm90IGRpc3BsYXkgZGF0ZXMgYmVmb3JlIHRoaXMgdmFsdWUuXG4gICAgICogSWYgdGhlIGBtaW5gIHZhbHVlIG9mIHRoZSBDYWxlbmRhciBpcyBzZWxlY3RlZCwgdGhlIFRpbWVQaWNrZXIgd2lsbCBub3QgZGlzcGxheVxuICAgICAqIHRpbWUgZW50cmllcyBiZWZvcmUgdGhlIHNwZWNpZmllZCB0aW1lIHBvcnRpb24gb2YgdGhpcyB2YWx1ZVxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZGF0ZXJhbmdlc19kYXRldGltZXBpY2tlciAlfSkpLlxuICAgICAqL1xuICAgIG1pbjogRGF0ZTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGJpZ2dlc3QgdmFsaWQgZGF0ZS5cbiAgICAgKiBUaGUgQ2FsZW5kYXIgd2lsbCBub3QgZGlzcGxheSBkYXRlcyBhZnRlciB0aGlzIHZhbHVlLlxuICAgICAqIElmIHRoZSBgbWF4YCB2YWx1ZSBvZiB0aGUgQ2FsZW5kYXIgaXMgc2VsZWN0ZWQsIHRoZSBUaW1lUGlja2VyIHdpbGwgbm90IGRpc3BsYXlcbiAgICAgKiB0aW1lIGVudHJpZXMgYWZ0ZXIgdGhlIHNwZWNpZmllZCB0aW1lIHBvcnRpb24gb2YgdGhpcyB2YWx1ZVxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZGF0ZXJhbmdlc19kYXRldGltZXBpY2tlciAlfSkpLlxuICAgICAqL1xuICAgIG1heDogRGF0ZTtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGJ1aWx0LWluIG1pbiBvciBtYXggdmFsaWRhdG9ycyBhcmUgZW5mb3JjZWQgd2hlbiB2YWxpZGF0aW5nIGEgZm9ybVxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZGF0ZXJhbmdlc19kYXRldGltZXBpY2tlciAlfSN0b2MtZm9ybXMtcmFuZ2UtdmFsaWRhdGlvbikpLlxuICAgICAqL1xuICAgIHJhbmdlVmFsaWRhdGlvbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGJ1aWx0LWluIHZhbGlkYXRvciBmb3IgZGlzYWJsZWRcbiAgICAgKiBkYXRlIHJhbmdlcyBpcyBlbmZvcmNlZCB3aGVuIHZhbGlkYXRpbmcgYSBmb3JtXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBkaXNhYmxlZF9kYXRlc19kYXRldGltZXBpY2tlciAlfSN0b2MtdmFsaWRhdGlvbikpLlxuICAgICAqL1xuICAgIGRpc2FibGVkRGF0ZXNWYWxpZGF0aW9uOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGVhY2ggdGltZSB0aGUgdXNlciBzZWxlY3RzIGEgbmV3IHZhbHVlLlxuICAgICAqIChbbW9yZSBpbmZvcm1hdGlvbiBhbmQgZXhhbXBsZV0oeyUgc2x1ZyBvdmVydmlld19kYXRldGltZXBpY2tlciAlfSN0b2MtbWV0aG9kcy1hbmQtZXZlbnRzKSkuXG4gICAgICovXG4gICAgdmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHBvcHVwIGlzIGFib3V0IHRvIG9wZW4uXG4gICAgICogVGhpcyBldmVudCBpcyBwcmV2ZW50YWJsZS4gSWYgeW91IGNhbmNlbCB0aGUgZXZlbnQgYnkgc2V0dGluZyBgZXZlbnQucHJldmVudERlZmF1bHQoKWAsIHRoZSBwb3B1cCB3aWxsIHJlbWFpbiBjbG9zZWQuXG4gICAgICogKFttb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlXSh7JSBzbHVnIG92ZXJ2aWV3X2RhdGV0aW1lcGlja2VyICV9I3RvYy1tZXRob2RzLWFuZC1ldmVudHMpKS5cbiAgICAgKi9cbiAgICBvcGVuOiBFdmVudEVtaXR0ZXI8UHJldmVudGFibGVFdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSBwb3B1cCBpcyBhYm91dCB0byBjbG9zZS5cbiAgICAgKiBUaGlzIGV2ZW50IGlzIHByZXZlbnRhYmxlLiBJZiB5b3UgY2FuY2VsIHRoZSBldmVudCBieSBzZXR0aW5nIGBldmVudC5wcmV2ZW50RGVmYXVsdCgpYCwgdGhlIHBvcHVwIHdpbGwgcmVtYWluIG9wZW4uXG4gICAgICogKFttb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlXSh7JSBzbHVnIG92ZXJ2aWV3X2RhdGV0aW1lcGlja2VyICV9I3RvYy1tZXRob2RzLWFuZC1ldmVudHMpKS5cbiAgICAgKi9cbiAgICBjbG9zZTogRXZlbnRFbWl0dGVyPFByZXZlbnRhYmxlRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGVhY2ggdGltZSB0aGUgdXNlciBmb2N1c2VzIHRoZSBjb21wb25lbnQuXG4gICAgICogKFttb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlXSh7JSBzbHVnIG92ZXJ2aWV3X2RhdGV0aW1lcGlja2VyICV9I3RvYy1tZXRob2RzLWFuZC1ldmVudHMpKS5cbiAgICAgKi9cbiAgICBvbkZvY3VzOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHVzZXIgYmx1cnMgdGhlIGNvbXBvbmVudC5cbiAgICAgKiAoW21vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVdKHslIHNsdWcgb3ZlcnZpZXdfZGF0ZXRpbWVwaWNrZXIgJX0jdG9jLW1ldGhvZHMtYW5kLWV2ZW50cykpLlxuICAgICAqL1xuICAgIG9uQmx1cjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBpcyBjdXJyZW50bHkgb3Blbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBpc09wZW46IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBvciBpdHMgcG9wdXAgY29udGVudCBpcyBmb2N1c2VkLlxuICAgICAqL1xuICAgIGlzQWN0aXZlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGFjdGl2ZSB0YWIgb24gb3BlbmluZyB0aGUgcG9wdXBcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGRhdGV0aW1lcGlja2VyX3BvcHVwX29wdGlvbnMgJX0jdG9jLXNldHRpbmctdGhlLWRlZmF1bHQtdGFiKSkuXG4gICAgICovXG4gICAgZGVmYXVsdFRhYjogRGF0ZVRpbWVQaWNrZXJBY3RpdmVUYWI7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhYlN3aXRjaFRyYW5zaXRpb246IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICpcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgQ2FsZW5kYXIgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICAgKiBUaGUgaW5hY3RpdmUgdGFiIGNvbXBvbmVudCBnZXRzIGRpc2FibGVkIGFuZCBiZWNvbWVzIGluYWNjZXNzaWJsZSBvbiB0YWIgY2xpY2suXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGlzYWJsZUNhbGVuZGFyOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBUaW1lU2VsZWN0b3Igd2lsbCBiZSBkaXNhYmxlZC5cbiAgICAgKiBUaGUgaW5hY3RpdmUgdGFiIGNvbXBvbmVudCBnZXRzIGRpc2FibGVkIGFuZCBiZWNvbWVzIGluYWNjZXNzaWJsZSBvbiB0YWIgY2xpY2suXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGlzYWJsZVRpbWVTZWxlY3RvcjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICpcbiAgICAgKiBDb250cm9scyB3aGV0aGVyIHRoZSBDYWxlbmRhciBvciB0aGUgVGltZVNlbGVjdG9yIHdpbGwgYmUgZGlzcGxheWVkLlxuICAgICAqL1xuICAgIGFjdGl2ZVRhYjogRGF0ZVRpbWVQaWNrZXJBY3RpdmVUYWI7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqXG4gICAgICogU3BlY2lmaWVzIHRoZSBzdHJpcHBlZCB0aW1lLXJlbGF0ZWQgZm9ybWF0IHRoYXQgaXMgdXNlZCBpbiB0aGUgVGltZVNlbGVjdG9yLlxuICAgICAqIFVwZGF0ZXMgZWFjaCB0aW1lIHRoZSBgZm9ybWF0YCBwcm9wZXJ0eSB2YWx1ZSBjaGFuZ2VzLlxuICAgICAqL1xuICAgIHRpbWVTZWxlY3RvckZvcm1hdDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB0aW1lU2VsZWN0b3JNaW46IERhdGU7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHRpbWVTZWxlY3Rvck1heDogRGF0ZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY2FsZW5kYXJWYWx1ZTogRGF0ZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY2FsZW5kYXJNaW46IERhdGU7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNhbGVuZGFyTWF4OiBEYXRlO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjZWxsVGVtcGxhdGU6IENlbGxUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbW9udGhDZWxsVGVtcGxhdGU6IE1vbnRoQ2VsbFRlbXBsYXRlRGlyZWN0aXZlO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB5ZWFyQ2VsbFRlbXBsYXRlOiBZZWFyQ2VsbFRlbXBsYXRlRGlyZWN0aXZlO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBkZWNhZGVDZWxsVGVtcGxhdGU6IERlY2FkZUNlbGxUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY2VudHVyeUNlbGxUZW1wbGF0ZTogQ2VudHVyeUNlbGxUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgd2Vla051bWJlclRlbXBsYXRlOiBXZWVrTnVtYmVyQ2VsbFRlbXBsYXRlRGlyZWN0aXZlO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoZWFkZXJUaXRsZVRlbXBsYXRlOiBIZWFkZXJUaXRsZVRlbXBsYXRlRGlyZWN0aXZlO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYWN0aXZlVGFiQ29tcG9uZW50O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYXBwZW5kVG87XG4gICAgcHJpdmF0ZSBjb250YWluZXI7XG4gICAgcHJpdmF0ZSBwb3B1cFRlbXBsYXRlO1xuICAgIHByaXZhdGUgcG9wdXBSZWY7XG4gICAgcHJpdmF0ZSBfcG9wdXBTZXR0aW5ncztcbiAgICBwcml2YXRlIF92YWx1ZTtcbiAgICBwcml2YXRlIF9mb3JtYXQ7XG4gICAgcHJpdmF0ZSBfdGFiaW5kZXg7XG4gICAgcHJpdmF0ZSBfZGVmYXVsdFRhYjtcbiAgICBwcml2YXRlIF9taW47XG4gICAgcHJpdmF0ZSBfbWF4O1xuICAgIHByaXZhdGUgX2Rpc2FibGVkRGF0ZXM7XG4gICAgcHJpdmF0ZSBvbkNvbnRyb2xUb3VjaGVkO1xuICAgIHByaXZhdGUgb25Db250cm9sQ2hhbmdlO1xuICAgIHByaXZhdGUgb25WYWxpZGF0b3JDaGFuZ2U7XG4gICAgcHJpdmF0ZSBtaW5WYWxpZGF0ZUZuO1xuICAgIHByaXZhdGUgbWF4VmFsaWRhdGVGbjtcbiAgICBwcml2YXRlIGRpc2FibGVkRGF0ZXNWYWxpZGF0ZUZuO1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlcnZpY2U6IFBvcHVwU2VydmljZSwgaW50bDogSW50bFNlcnZpY2UsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHBpY2tlclNlcnZpY2U6IFBpY2tlclNlcnZpY2UsIG5nWm9uZTogTmdab25lLCBob3N0OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PiwgdG91Y2hFbmFibGVkOiBib29sZWFuLCBsb2NhbGl6YXRpb246IExvY2FsaXphdGlvblNlcnZpY2UsIGRpc2FibGVkRGF0ZXNTZXJ2aWNlOiBEaXNhYmxlZERhdGVzU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqICogSWYgdGhlIHBvcHVwIGlzIGNsb3NlZCwgZm9jdXNlcyB0aGUgRGF0ZVRpbWVQaWNrZXIgaW5wdXQuXG4gICAgICogKiBJZiB0aGUgcG9wdXAgaXMgb3BlbiwgdGhlIGZvY3VzIGlzIG1vdmVkIHRvIGl0cyBjb250ZW50LlxuICAgICAqL1xuICAgIGZvY3VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQmx1cnMgdGhlIERhdGVUaW1lUGlja2VyLlxuICAgICAqL1xuICAgIGJsdXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBwb3B1cC4gSWYgeW91IHVzZSB0aGUgYHRvZ2dsZWAgbWV0aG9kIHRvIHNob3cgb3IgaGlkZSB0aGUgcG9wdXAsXG4gICAgICogdGhlIGBvcGVuYCBhbmQgYGNsb3NlYCBldmVudHMgZG8gbm90IGZpcmUuXG4gICAgICogKFttb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlXSh7JSBzbHVnIG92ZXJ2aWV3X2RhdGV0aW1lcGlja2VyICV9I3RvYy1tZXRob2RzLWFuZC1ldmVudHMpKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzaG93IC0gVGhlIHN0YXRlIG9mIHRoZSBwb3B1cC5cbiAgICAgKi9cbiAgICB0b2dnbGUoc2hvdz86IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBEYXRlKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHNldERpc2FibGVkU3RhdGUoZGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqXG4gICAgICogVXNlZCBieSB0aGUgVGV4dEJveENvbnRhaW5lciB0byBkZXRlcm1pbmUgaWYgdGhlIGZsb2F0aW5nIGxhYmVsIHdpbGwgcmVuZGVyIGluIHRoZSBpbnB1dC5cbiAgICAgKi9cbiAgICBpc0VtcHR5KCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZUljb25DbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZUZvY3VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZUJsdXIoZXZlbnQ/OiBGb2N1c0V2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY2hhbmdlQWN0aXZlVGFiKHRhYjogRGF0ZVRpbWVQaWNrZXJBY3RpdmVUYWIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVUYWJDaGFuZ2VUcmFuc2l0aW9uRW5kKGRhdGVUaW1lU2VsZWN0b3I6IEhUTUxFbGVtZW50LCBldmVudDogVHJhbnNpdGlvbkV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlQWNjZXB0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZUNhbmNlbCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVJbnB1dFZhbHVlQ2hhbmdlKHZhbHVlOiBEYXRlKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlQ2FsZW5kYXJWYWx1ZUNoYW5nZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVLZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlVGFiT3V0KGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlQmFja1RhYk91dChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqXG4gICAgICogUHJldmVudHMgdGhlIGRpdmVyc2lvbiBvZiB0aGUgZm9jdXMgZnJvbSB0aGUgY3VycmVudGx5IGFjdGl2ZSBlbGVtZW50IGluIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgcHJldmVudE1vdXNlRG93bihldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSB2ZXJpZnlWYWx1ZTtcbiAgICBwcml2YXRlIHZlcmlmeU1pbk1heFJhbmdlO1xuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB0aW1lIHNsb3RzIGFuZCB0aGUgbGl0ZXJhbHMgdGhhdCBhcmUgbm90IHByZWNlZGVkIGJ5IGRhdGUgcGFydHNcbiAgICAgKiBhbmQgY29uY2F0ZW5hdGVzIHRoZSByZXN1bHRpbmcgcGFydHMgaW50byBhIHN0cmluZy5cbiAgICAgKiBJZiB0aGUgcHJvdmlkZWQgZm9ybWF0IHZhbHVlIGRvZXMgbm90IGNvbnRhaW4gYW55IHRpbWUgcGFydHMsXG4gICAgICogcmV0dXJucyB0aGUgZGVzaWduYXRlZCBmb3JtYXQgb2YgdGhlIGRlZmF1bHQgcG9wdXAgY29tcG9uZW50IG9mIHRoZSBUaW1lUGlja2VyLlxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0VGltZVNlbGVjdG9yRm9ybWF0O1xuICAgIC8qKlxuICAgICAqIFRoZSBmaWx0ZXIgZXhwcmVzc2lvbiB0aGF0IGZpbHRlcnMgb3V0IGFsbCBmb3JtYXQgcGFydHNcbiAgICAgKiBleGNlcHQgZm9yIGBob3VyYCwgYG1pbnV0ZWAsIGBzZWNvbmRgLCBgZGF5cGVyaW9kYCwgYW5kIHNwZWNpZmljIGxpdGVyYWxzLlxuICAgICAqIExpdGVyYWxzIHdpbGwgYmUgbGVmdCBvbmx5IGlmIHRoZXkgYXJlIG5vdCBwcmVjZWRlZCBieSBkYXRlIHBhcnRzLlxuICAgICAqL1xuICAgIHByaXZhdGUgdGltZUZvcm1hdFBhcnRGaWx0ZXI7XG4gICAgcHJpdmF0ZSB0b2dnbGVQb3B1cDtcbiAgICBwcml2YXRlIHN3aXRjaEZvY3VzO1xuICAgIHByaXZhdGUgb3BlblBvcHVwO1xuICAgIHByaXZhdGUgY2xvc2VQb3B1cDtcbiAgICBwcml2YXRlIGhhbmRsZVZhbHVlQ2hhbmdlO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBmb2N1cyB0YXJnZXQgaXMgcGFydCBvZiB0aGlzIGNvbXBvbmVudCxcbiAgICAgKiB0aGF0IGlzLCB3aGV0aGVyIHRoZSBmb2N1cyB0YXJnZXQgaXMgaW5zaWRlIHRoZSBjb21wb25lbnQgd3JhcHBlciBvciBpbiB0aGUgcG9wdXAuXG4gICAgICovXG4gICAgcHJpdmF0ZSBmb2N1c1RhcmdldEluQ29tcG9uZW50O1xuICAgIHByaXZhdGUgc2V0VGltZVNlbGVjdG9yTWluTWF4O1xuICAgIHByaXZhdGUgc2V0Q2FsZW5kYXJWYWx1ZTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgcG9wdXAgaXMgYXZhaWxhYmxlLCBydW5zIGEgcG9wdXAgY2hhbmdlIGRldGVjdGlvbi5cbiAgICAgKi9cbiAgICBwcml2YXRlIGRldGVjdFBvcHVwQ2hhbmdlcztcbiAgICAvKipcbiAgICAgKiBEZXBlbmRpbmcgb24gdGhlIHByZWRpY2F0ZSBgcnVuSW5ab25lYCB2YWx1ZSB0aGF0IGlzIHBhc3NlZCxcbiAgICAgKiBydW5zIHRoZSBwcm92aWRlZCBmdW5jdGlvbiBlaXRoZXIgaW4gdGhlIEFuZ3VsYXIgb3IgaW4gdGhlIGN1cnJlbnQgem9uZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIHJ1bjtcbn1cbiJdfQ==