import { AfterViewInit, ComponentRef, ElementRef, EventEmitter, OnDestroy, OnChanges, Renderer2, ViewContainerRef } from '@angular/core';
import { Utils } from '../utils/utils.class';
import { ModalBackdropComponent } from './modalBackdrop.component';
import { ModalOptions } from './modal.options';
import { ComponentLoaderFactory } from '../utils/component-loader/component-loader.factory';
/** Mark any code with directive to show it's content in modal */
import * as ɵngcc0 from '@angular/core';
export declare class ModalDirective implements AfterViewInit, OnDestroy, OnChanges {
    protected _element: ElementRef;
    protected _renderer: Renderer2;
    /** allows to set modal configuration via element property */
    config: ModalOptions | any;
    /** This event fires immediately when the `show` instance method is called. */
    onShow: EventEmitter<ModalDirective>;
    open: EventEmitter<ModalDirective>;
    /** This event is fired when the modal has been made visible to the user (will wait for CSS transitions to complete) */
    onShown: EventEmitter<ModalDirective>;
    opened: EventEmitter<ModalDirective>;
    /** This event is fired immediately when the hide instance method has been called. */
    onHide: EventEmitter<ModalDirective>;
    close: EventEmitter<ModalDirective>;
    /** This event is fired when the modal has finished being hidden from the user (will wait for CSS transitions to complete). */
    onHidden: EventEmitter<ModalDirective>;
    closed: EventEmitter<ModalDirective>;
    isAnimated: boolean;
    /** This field contains last dismiss reason.
     Possible values: `backdrop-click`, `esc` and `null` (if modal was closed by direct call of `.hide()`). */
    dismissReason: string | any;
    readonly isShown: boolean;
    protected _config: ModalOptions | any;
    protected _isShown: boolean;
    protected isBodyOverflowing: boolean;
    protected originalBodyPadding: number;
    protected scrollbarWidth: number;
    protected timerHideModal: any;
    protected timerRmBackDrop: any;
    protected backdrop: ComponentRef<ModalBackdropComponent> | undefined;
    private _backdrop;
    _dialog: any;
    isNested: boolean;
    utils: Utils;
    onKeyDown(event: any): void;
    onClick(event: any): void;
    onEsc(): void;
    constructor(_element: ElementRef, _viewContainerRef: ViewContainerRef, _renderer: Renderer2, clf: ComponentLoaderFactory);
    ngOnDestroy(): any;
    ngAfterViewInit(): any;
    ngOnChanges(): any;
    /** Allows to manually toggle modal visibility */
    toggle(): void;
    /** Allows to manually open modal */
    show(): void;
    /** Allows to manually close modal */
    hide(event?: Event): void;
    /** Private methods @internal */
    protected getConfig(config?: ModalOptions): ModalOptions;
    /**
     *  Show dialog
     *  @internal
     */
    protected showElement(): void;
    /** @internal */
    protected hideModal(): void;
    /** @internal */
    protected showBackdrop(callback?: Function): void;
    /** @internal */
    protected removeBackdrop(): void;
    protected focusOtherModal(): void;
    /** @internal */
    protected resetAdjustments(): void;
    /** Scroll bar tricks */
    /** @internal */
    protected checkScrollbar(): void;
    protected setScrollbar(): void;
    protected getScrollbarWidth(): number;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ModalDirective>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ModalDirective, "[mdbModal]", ["mdb-modal", "mdbModal"], {
    "config": "config";
}, {
    "onShow": "onShow";
    "open": "open";
    "onShown": "onShown";
    "opened": "opened";
    "onHide": "onHide";
    "close": "close";
    "onHidden": "onHidden";
    "closed": "closed";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbIm1vZGFsLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9FQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudFJlZiwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgUmVuZGVyZXIyLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzLmNsYXNzJztcbmltcG9ydCB7IE1vZGFsQmFja2Ryb3BDb21wb25lbnQgfSBmcm9tICcuL21vZGFsQmFja2Ryb3AuY29tcG9uZW50JztcbmltcG9ydCB7IE1vZGFsT3B0aW9ucyB9IGZyb20gJy4vbW9kYWwub3B0aW9ucyc7XG5pbXBvcnQgeyBDb21wb25lbnRMb2FkZXJGYWN0b3J5IH0gZnJvbSAnLi4vdXRpbHMvY29tcG9uZW50LWxvYWRlci9jb21wb25lbnQtbG9hZGVyLmZhY3RvcnknO1xuLyoqIE1hcmsgYW55IGNvZGUgd2l0aCBkaXJlY3RpdmUgdG8gc2hvdyBpdCdzIGNvbnRlbnQgaW4gbW9kYWwgKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1vZGFsRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xuICAgIHByb3RlY3RlZCBfZWxlbWVudDogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgX3JlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgLyoqIGFsbG93cyB0byBzZXQgbW9kYWwgY29uZmlndXJhdGlvbiB2aWEgZWxlbWVudCBwcm9wZXJ0eSAqL1xuICAgIGNvbmZpZzogTW9kYWxPcHRpb25zIHwgYW55O1xuICAgIC8qKiBUaGlzIGV2ZW50IGZpcmVzIGltbWVkaWF0ZWx5IHdoZW4gdGhlIGBzaG93YCBpbnN0YW5jZSBtZXRob2QgaXMgY2FsbGVkLiAqL1xuICAgIG9uU2hvdzogRXZlbnRFbWl0dGVyPE1vZGFsRGlyZWN0aXZlPjtcbiAgICBvcGVuOiBFdmVudEVtaXR0ZXI8TW9kYWxEaXJlY3RpdmU+O1xuICAgIC8qKiBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIG1vZGFsIGhhcyBiZWVuIG1hZGUgdmlzaWJsZSB0byB0aGUgdXNlciAod2lsbCB3YWl0IGZvciBDU1MgdHJhbnNpdGlvbnMgdG8gY29tcGxldGUpICovXG4gICAgb25TaG93bjogRXZlbnRFbWl0dGVyPE1vZGFsRGlyZWN0aXZlPjtcbiAgICBvcGVuZWQ6IEV2ZW50RW1pdHRlcjxNb2RhbERpcmVjdGl2ZT47XG4gICAgLyoqIFRoaXMgZXZlbnQgaXMgZmlyZWQgaW1tZWRpYXRlbHkgd2hlbiB0aGUgaGlkZSBpbnN0YW5jZSBtZXRob2QgaGFzIGJlZW4gY2FsbGVkLiAqL1xuICAgIG9uSGlkZTogRXZlbnRFbWl0dGVyPE1vZGFsRGlyZWN0aXZlPjtcbiAgICBjbG9zZTogRXZlbnRFbWl0dGVyPE1vZGFsRGlyZWN0aXZlPjtcbiAgICAvKiogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIHRoZSBtb2RhbCBoYXMgZmluaXNoZWQgYmVpbmcgaGlkZGVuIGZyb20gdGhlIHVzZXIgKHdpbGwgd2FpdCBmb3IgQ1NTIHRyYW5zaXRpb25zIHRvIGNvbXBsZXRlKS4gKi9cbiAgICBvbkhpZGRlbjogRXZlbnRFbWl0dGVyPE1vZGFsRGlyZWN0aXZlPjtcbiAgICBjbG9zZWQ6IEV2ZW50RW1pdHRlcjxNb2RhbERpcmVjdGl2ZT47XG4gICAgaXNBbmltYXRlZDogYm9vbGVhbjtcbiAgICAvKiogVGhpcyBmaWVsZCBjb250YWlucyBsYXN0IGRpc21pc3MgcmVhc29uLlxuICAgICBQb3NzaWJsZSB2YWx1ZXM6IGBiYWNrZHJvcC1jbGlja2AsIGBlc2NgIGFuZCBgbnVsbGAgKGlmIG1vZGFsIHdhcyBjbG9zZWQgYnkgZGlyZWN0IGNhbGwgb2YgYC5oaWRlKClgKS4gKi9cbiAgICBkaXNtaXNzUmVhc29uOiBzdHJpbmcgfCBhbnk7XG4gICAgcmVhZG9ubHkgaXNTaG93bjogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgX2NvbmZpZzogTW9kYWxPcHRpb25zIHwgYW55O1xuICAgIHByb3RlY3RlZCBfaXNTaG93bjogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgaXNCb2R5T3ZlcmZsb3dpbmc6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIG9yaWdpbmFsQm9keVBhZGRpbmc6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgc2Nyb2xsYmFyV2lkdGg6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgdGltZXJIaWRlTW9kYWw6IGFueTtcbiAgICBwcm90ZWN0ZWQgdGltZXJSbUJhY2tEcm9wOiBhbnk7XG4gICAgcHJvdGVjdGVkIGJhY2tkcm9wOiBDb21wb25lbnRSZWY8TW9kYWxCYWNrZHJvcENvbXBvbmVudD4gfCB1bmRlZmluZWQ7XG4gICAgcHJpdmF0ZSBfYmFja2Ryb3A7XG4gICAgX2RpYWxvZzogYW55O1xuICAgIGlzTmVzdGVkOiBib29sZWFuO1xuICAgIHV0aWxzOiBVdGlscztcbiAgICBvbktleURvd24oZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25DbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICBvbkVzYygpOiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKF9lbGVtZW50OiBFbGVtZW50UmVmLCBfdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIGNsZjogQ29tcG9uZW50TG9hZGVyRmFjdG9yeSk7XG4gICAgbmdPbkRlc3Ryb3koKTogYW55O1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiBhbnk7XG4gICAgbmdPbkNoYW5nZXMoKTogYW55O1xuICAgIC8qKiBBbGxvd3MgdG8gbWFudWFsbHkgdG9nZ2xlIG1vZGFsIHZpc2liaWxpdHkgKi9cbiAgICB0b2dnbGUoKTogdm9pZDtcbiAgICAvKiogQWxsb3dzIHRvIG1hbnVhbGx5IG9wZW4gbW9kYWwgKi9cbiAgICBzaG93KCk6IHZvaWQ7XG4gICAgLyoqIEFsbG93cyB0byBtYW51YWxseSBjbG9zZSBtb2RhbCAqL1xuICAgIGhpZGUoZXZlbnQ/OiBFdmVudCk6IHZvaWQ7XG4gICAgLyoqIFByaXZhdGUgbWV0aG9kcyBAaW50ZXJuYWwgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0Q29uZmlnKGNvbmZpZz86IE1vZGFsT3B0aW9ucyk6IE1vZGFsT3B0aW9ucztcbiAgICAvKipcbiAgICAgKiAgU2hvdyBkaWFsb2dcbiAgICAgKiAgQGludGVybmFsXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHNob3dFbGVtZW50KCk6IHZvaWQ7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByb3RlY3RlZCBoaWRlTW9kYWwoKTogdm9pZDtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJvdGVjdGVkIHNob3dCYWNrZHJvcChjYWxsYmFjaz86IEZ1bmN0aW9uKTogdm9pZDtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJvdGVjdGVkIHJlbW92ZUJhY2tkcm9wKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGZvY3VzT3RoZXJNb2RhbCgpOiB2b2lkO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcm90ZWN0ZWQgcmVzZXRBZGp1c3RtZW50cygpOiB2b2lkO1xuICAgIC8qKiBTY3JvbGwgYmFyIHRyaWNrcyAqL1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcm90ZWN0ZWQgY2hlY2tTY3JvbGxiYXIoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgc2V0U2Nyb2xsYmFyKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGdldFNjcm9sbGJhcldpZHRoKCk6IG51bWJlcjtcbn1cbiJdfQ==